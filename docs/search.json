[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Yuya Hatano. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hatano Y (2023). MOVA: method evaluating pathogenicity missense variants using AlphaFold2. R package version 1.1.0.","code":"@Manual{,   title = {MOVA: a method for evaluating the pathogenicity of missense variants using AlphaFold2},   author = {Yuya Hatano},   year = {2023},   note = {R package version 1.1.0}, }"},{"path":"/reference/AlphScore_MOVA.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to compare MOVA and AlphScore. — AlphScore_MOVA","title":"Function to compare MOVA and AlphScore. — AlphScore_MOVA","text":"function plots ROC curve AlphScore gene returns AUC.","code":""},{"path":"/reference/AlphScore_MOVA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to compare MOVA and AlphScore. — AlphScore_MOVA","text":"","code":"AlphScore_MOVA(file_name, phenotype = \"Target\", col = \"green\")"},{"path":"/reference/AlphScore_MOVA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to compare MOVA and AlphScore. — AlphScore_MOVA","text":"file_name \"gene name_Target Pathogenic_predict.csv\" file output MOVA function phenotype Specify \"Target\" want positive variant Target variant , \"Pathogenic\" want include Pathogenic variant well. default \"Target\". col Specifies color ROC curve. Default green.","code":""},{"path":[]},{"path":"/reference/AlphScore_MOVA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to compare MOVA and AlphScore. — AlphScore_MOVA","text":"Return AUC gene AlphScore.","code":""},{"path":[]},{"path":"/reference/AlphScore_MOVA.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function to compare MOVA and AlphScore. — AlphScore_MOVA","text":"Yuya Hatano","code":""},{"path":[]},{"path":[]},{"path":"/reference/AlphScore_MOVA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to compare MOVA and AlphScore. — AlphScore_MOVA","text":"","code":"Hgmd_divide(\"./source/TARDBP.csv\") #> Error in fread(hgmd_file_name): File './source/TARDBP.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_gnomAD_file(\"./source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv\", \"./source/TARDBP_gnomAD.csv\") #> Error in fread(input_file_name): File './source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_variant_data(\"../CADD_REVEL/AlphScore_final.tsv\", \"./source/TARDBP.csv\", \"./source/TARDBP_gnomAD.csv\", \"Q13148\", \"TARDBP\", \"./source/TARDBPvariantdata.csv\") #> Error in fread(AlphScore_final_file): File '../CADD_REVEL/AlphScore_final.tsv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_polyphen_data(\"../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1\",\"./source/TARDBPvariantdata.csv\", \"TARDBP_alph.csv\",  \"Q13148\",  11012654, 11025492 ,\"./source/TARDBPvariantdatapol.csv\", \"./source/TARDBP_alphpol.csv\") #> Error in fread(dbNSFP4.3a_final_file): File '../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_final_variant_file(\"./source/TARDBP_alphpol.csv\",\"./source/TARDBP_alphpol2.csv\") #> Error in fread(input_file_name): File './source/TARDBP_alphpol.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA(\"./source/Q13148.fa\", \"TARDBP\", \"./source/AF-Q13148-F1-model_v2.pdb\",\"./source/TARDBP_alphpol2.csv\", \"./source/TARDBPvariantdatapol.csv\") #> Warning: data set 'BLOSUM62' not found #> Warning: cannot open file './source/Q13148.fa': No such file or directory #> Error in file(con, \"r\"): cannot open the connection PolyPhen_MOVA(\"TARDBP_Target_predict.csv\") #> Error in fread(file_name): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' AlphScore_MOVA(\"TARDBP_Target_predict.csv\") #> Error in fread(file_name): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' CADD_MOVA(\"TARDBP_Target_predict.csv\") #> Error in fread(file_name): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' REVEL_MOVA(\"TARDBP_Target_predict.csv\") #> Error in fread(file_name): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' EVE_MOVA(\"TARDBP_Target_predict.csv\", \"../dementia/EVE_all_data/variant_files/TADBP_HUMAN.csv\") #> Error in fread(file_name): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference'   ## The function is currently defined as function (file_name, phenotype = \"Target\", col = \"green\")  {     df <- fread(file_name)     if (phenotype == \"Target\") {         df <- df[(df$Type == \"Target\") | (df$Type == \"Ctrl\"),              ]     }     df$predict <- df$AlphScore     if (phenotype == \"Target\") {         df$result <- df$Type2     }     else {         df$result <- df$Type3     }     pred <- prediction(df$predict, df$result)     perf <- performance(pred, \"tpr\", \"fpr\")     plot(perf, col = col, add = TRUE)     auc.tmp <- performance(pred, \"auc\")     auc <- as.numeric(auc.tmp@y.values)     return(auc)   } #> function (file_name, phenotype = \"Target\", col = \"green\")  #> { #>     df <- fread(file_name) #>     if (phenotype == \"Target\") { #>         df <- df[(df$Type == \"Target\") | (df$Type == \"Ctrl\"),  #>             ] #>     } #>     df$predict <- df$AlphScore #>     if (phenotype == \"Target\") { #>         df$result <- df$Type2 #>     } #>     else { #>         df$result <- df$Type3 #>     } #>     pred <- prediction(df$predict, df$result) #>     perf <- performance(pred, \"tpr\", \"fpr\") #>     plot(perf, col = col, add = TRUE) #>     auc.tmp <- performance(pred, \"auc\") #>     auc <- as.numeric(auc.tmp@y.values) #>     return(auc) #>   } #> <environment: 0x0000011afe1c36c0>"},{"path":"/reference/CADD_AlphScore.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to compare MOVA and CADD + AlphScore.\r\n — CADD_AlphScore","title":"Function to compare MOVA and CADD + AlphScore.\r\n — CADD_AlphScore","text":"function plots ROC curve CADD + AlphScore gene returns AUC.","code":""},{"path":"/reference/CADD_AlphScore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to compare MOVA and CADD + AlphScore.\r\n — CADD_AlphScore","text":"","code":"CADD_AlphScore(file_name, phenotype = \"Target\", col = \"gray\")"},{"path":"/reference/CADD_AlphScore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to compare MOVA and CADD + AlphScore.\r\n — CADD_AlphScore","text":"file_name \"gene name_Target Pathogenic_predict.csv\" file output MOVA function phenotype Specify \"Target\" want positive variant Target variant , \"Pathogenic\" want include Pathogenic variant well. default \"Target\". col Specifies color ROC curve. Default gray.","code":""},{"path":[]},{"path":"/reference/CADD_AlphScore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to compare MOVA and CADD + AlphScore.\r\n — CADD_AlphScore","text":"Return AUC gene CADD + AlphScore.","code":""},{"path":[]},{"path":"/reference/CADD_AlphScore.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function to compare MOVA and CADD + AlphScore.\r\n — CADD_AlphScore","text":"Yuya Hatano","code":""},{"path":[]},{"path":[]},{"path":"/reference/CADD_AlphScore.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to compare MOVA and CADD + AlphScore.\r\n — CADD_AlphScore","text":"","code":"Hgmd_divide(\"./source/OPTN_hgmd.csv\") #> Error in fread(hgmd_file_name): File './source/OPTN_hgmd.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_gnomAD_file(\"./source/gnomAD_v3.1.2_ENST00000378748_2023_02_15_13_19_36.csv\", \"./source/OPTN_gnomAD.csv\") #> Error in fread(input_file_name): File './source/gnomAD_v3.1.2_ENST00000378748_2023_02_15_13_19_36.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_variant_data(\"../CADD_REVEL/AlphScore_final.tsv\", \"./source/OPTN_hgmd.csv\", \"./source/OPTN_gnomAD.csv\", \"Q96CV9\", \"OPTN\", \"./source/OPTNvariantdata.csv\") #> Error in fread(AlphScore_final_file): File '../CADD_REVEL/AlphScore_final.tsv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_polyphen_data(\"../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr10\",\"./source/OPTNvariantdata.csv\", \"OPTN_alph.csv\", \"Q96CV9\",13100173,13138291,  \"./source/OPTNvariantdatapol.csv\", \"./source/OPTN_alphpol.csv\") #> Error in fread(dbNSFP4.3a_final_file): File '../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr10' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_final_variant_file(\"./source/OPTN_alphpol.csv\",\"./source/OPTN_alphpol2.csv\") #> Error in fread(input_file_name): File './source/OPTN_alphpol.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA(\"./source/Q96CV9.fa\", \"OPTN\", \"./source/AF-Q96CV9-F1-model_v2.pdb\",\"./source/OPTN_alphpol2.csv\", \"./source/OPTNvariantdatapol.csv\") #> Warning: data set 'BLOSUM62' not found #> Warning: cannot open file './source/Q96CV9.fa': No such file or directory #> Error in file(con, \"r\"): cannot open the connection Com_CADD_MOVA(\"OPTN\", \"OPTN_Target_finalpredict.csv\", \"OPTN_Target_predict_orig.csv\", \"OPTN_Target_predict.csv\", alphscore = 1) #> Error in fread(MOVA_final_predict_file): File 'OPTN_Target_finalpredict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA_redraw(\"OPTN_Target_predict_orig.csv\",col=\"blue\") #> Error in fread(MOVA_predict_orig_file): File 'OPTN_Target_predict_orig.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' CADD_MOVA(\"OPTN_Target_predict.csv\", col=\"black\") #> Error in fread(file_name): File 'OPTN_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' CADD_AlphScore(\"OPTN_Target_predict.csv\", col=\"gray\") #> Error in fread(file_name): File 'OPTN_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA_redraw(\"OPTN_Target_predict_orig_CADDMOVA.csv\",col=\"red\", add=TRUE) #> Error in fread(MOVA_predict_orig_file): File 'OPTN_Target_predict_orig_CADDMOVA.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference'   ## The function is currently defined as function (file_name, phenotype = \"Target\", col = \"gray\")  {     df <- fread(file_name)     if (phenotype == \"Target\") {         df <- df[(df$Type == \"Target\") | (df$Type == \"Ctrl\"),              ]     }     df$predict <- df$glm_AlphCadd     if (phenotype == \"Target\") {         df$result <- df$Type2     }     else {         df$result <- df$Type3     }     pred <- prediction(df$predict, df$result)     perf <- performance(pred, \"tpr\", \"fpr\")     plot(perf, col = col, add = TRUE)     auc.tmp <- performance(pred, \"auc\")     auc <- as.numeric(auc.tmp@y.values)     return(auc)   } #> function (file_name, phenotype = \"Target\", col = \"gray\")  #> { #>     df <- fread(file_name) #>     if (phenotype == \"Target\") { #>         df <- df[(df$Type == \"Target\") | (df$Type == \"Ctrl\"),  #>             ] #>     } #>     df$predict <- df$glm_AlphCadd #>     if (phenotype == \"Target\") { #>         df$result <- df$Type2 #>     } #>     else { #>         df$result <- df$Type3 #>     } #>     pred <- prediction(df$predict, df$result) #>     perf <- performance(pred, \"tpr\", \"fpr\") #>     plot(perf, col = col, add = TRUE) #>     auc.tmp <- performance(pred, \"auc\") #>     auc <- as.numeric(auc.tmp@y.values) #>     return(auc) #>   } #> <environment: 0x0000011a8436f818>"},{"path":"/reference/CADD_MOVA.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to compare MOVA and CADD.\r\n — CADD_MOVA","title":"Function to compare MOVA and CADD.\r\n — CADD_MOVA","text":"function plots ROC curve CADD gene returns AUC.","code":""},{"path":"/reference/CADD_MOVA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to compare MOVA and CADD.\r\n — CADD_MOVA","text":"","code":"CADD_MOVA(file_name, phenotype = \"Target\", col = \"blue\")"},{"path":"/reference/CADD_MOVA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to compare MOVA and CADD.\r\n — CADD_MOVA","text":"file_name \"gene name_Target Pathogenic_predict.csv\" file output MOVA function phenotype Specify \"Target\" want positive variant Target variant , \"Pathogenic\" want include Pathogenic variant well. default \"Target\". col Specifies color ROC curve. Default blue.","code":""},{"path":[]},{"path":"/reference/CADD_MOVA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to compare MOVA and CADD.\r\n — CADD_MOVA","text":"Return AUC gene CADD.","code":""},{"path":[]},{"path":"/reference/CADD_MOVA.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function to compare MOVA and CADD.\r\n — CADD_MOVA","text":"Yuya Hatano","code":""},{"path":[]},{"path":[]},{"path":"/reference/CADD_MOVA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to compare MOVA and CADD.\r\n — CADD_MOVA","text":"","code":"Hgmd_divide(\"./source/TARDBP.csv\") #> Error in fread(hgmd_file_name): File './source/TARDBP.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_gnomAD_file(\"./source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv\", \"./source/TARDBP_gnomAD.csv\") #> Error in fread(input_file_name): File './source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_variant_data(\"../CADD_REVEL/AlphScore_final.tsv\", \"./source/TARDBP.csv\", \"./source/TARDBP_gnomAD.csv\", \"Q13148\", \"TARDBP\", \"./source/TARDBPvariantdata.csv\") #> Error in fread(AlphScore_final_file): File '../CADD_REVEL/AlphScore_final.tsv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_polyphen_data(\"../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1\",\"./source/TARDBPvariantdata.csv\", \"TARDBP_alph.csv\",  \"Q13148\",  11012654, 11025492 ,\"./source/TARDBPvariantdatapol.csv\", \"./source/TARDBP_alphpol.csv\") #> Error in fread(dbNSFP4.3a_final_file): File '../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_final_variant_file(\"./source/TARDBP_alphpol.csv\",\"./source/TARDBP_alphpol2.csv\") #> Error in fread(input_file_name): File './source/TARDBP_alphpol.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA(\"./source/Q13148.fa\", \"TARDBP\", \"./source/AF-Q13148-F1-model_v2.pdb\",\"./source/TARDBP_alphpol2.csv\", \"./source/TARDBPvariantdatapol.csv\") #> Warning: data set 'BLOSUM62' not found #> Warning: cannot open file './source/Q13148.fa': No such file or directory #> Error in file(con, \"r\"): cannot open the connection PolyPhen_MOVA(\"TARDBP_Target_predict.csv\") #> Error in fread(file_name): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' AlphScore_MOVA(\"TARDBP_Target_predict.csv\") #> Error in fread(file_name): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' CADD_MOVA(\"TARDBP_Target_predict.csv\") #> Error in fread(file_name): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' REVEL_MOVA(\"TARDBP_Target_predict.csv\") #> Error in fread(file_name): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' EVE_MOVA(\"TARDBP_Target_predict.csv\", \"../dementia/EVE_all_data/variant_files/TADBP_HUMAN.csv\") #> Error in fread(file_name): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference'  ## The function is currently defined as function (file_name, phenotype = \"Target\", col = \"blue\")  {     df <- fread(file_name)     if (phenotype == \"Target\") {         df <- df[(df$Type == \"Target\") | (df$Type == \"Ctrl\"),              ]     }     df$predict <- df$CADD_raw     if (phenotype == \"Target\") {         df$result <- df$Type2     }     else {         df$result <- df$Type3     }     pred <- prediction(df$predict, df$result)     perf <- performance(pred, \"tpr\", \"fpr\")     plot(perf, col = col, add = TRUE)     auc.tmp <- performance(pred, \"auc\")     auc <- as.numeric(auc.tmp@y.values)     return(auc)   } #> function (file_name, phenotype = \"Target\", col = \"blue\")  #> { #>     df <- fread(file_name) #>     if (phenotype == \"Target\") { #>         df <- df[(df$Type == \"Target\") | (df$Type == \"Ctrl\"),  #>             ] #>     } #>     df$predict <- df$CADD_raw #>     if (phenotype == \"Target\") { #>         df$result <- df$Type2 #>     } #>     else { #>         df$result <- df$Type3 #>     } #>     pred <- prediction(df$predict, df$result) #>     perf <- performance(pred, \"tpr\", \"fpr\") #>     plot(perf, col = col, add = TRUE) #>     auc.tmp <- performance(pred, \"auc\") #>     auc <- as.numeric(auc.tmp@y.values) #>     return(auc) #>   } #> <environment: 0x0000011a87025280>"},{"path":"/reference/Com_CADD_MOVA.html","id":null,"dir":"Reference","previous_headings":"","what":"Combining CADD and MOVA\r\n — Com_CADD_MOVA","title":"Combining CADD and MOVA\r\n — Com_CADD_MOVA","text":"MOVA combined CADD using logistic regression implemented R-function glm option family=binomial  evaluated using stratified 5-fold cross validation method. MOVA + CADD compared MOVA, CADD, CADD + AlphScore. function also outputs final MOVA + CADD predicted value.","code":""},{"path":"/reference/Com_CADD_MOVA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combining CADD and MOVA\r\n — Com_CADD_MOVA","text":"","code":"Com_CADD_MOVA(protein_name, MOVA_final_predict_file, MOVA_predict_orig_file, MOVA_predict_file, alphscore = 0, phenotype = \"Target\")"},{"path":"/reference/Com_CADD_MOVA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combining CADD and MOVA\r\n — Com_CADD_MOVA","text":"protein_name Name target protein/gene. Used name file generation. MOVA_final_predict_file \"gene name_Target Pathogenic_finalpredict.csv\" file output MOVA function. final MOVA + CADD predicted values file. MOVA_predict_orig_file \"gene name_Target Pathogenic_predict_orig.csv\" file output MOVA function. Used redraw ROC curve MOVA. MOVA_predict_file \"gene name_Target Pathogenic_predict.csv\" file output MOVA function. alphscore alphscore 1, CADD + alphscore drawn; alphscore 0, drawn. default 0. phenotype Specify \"Target\" want positive variant Target variant , \"Pathogenic\" want include Pathogenic variant well. default \"Target\".","code":""},{"path":"/reference/Com_CADD_MOVA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combining CADD and MOVA\r\n — Com_CADD_MOVA","text":"Draw ROC curve MOVA + CADD (red), MOVA (blue), CADD (black), (optional: CADD + AlphScore (gray)). MOVA, CADD, CADD + AlphScore use predetermined values. , necessary perform MOVA function advance. predicted value MOVA + CADD determined function. final MOVA + CADD predicted value added \"CADDMOVA\" column MOVA_final_predict_file. \"protein/gene name_Target Pathogenic_result_CADDMOVA.csv\" contains Cutoff value (Youden index) fold (Column: Cutoff), number positive variants gene used analysis (Column: positive_variant_num), number negative variants (Column: negative_variant_num), AUC fold MOVA + CADD (Column: AUC), cvAUC MOVA (Column: MOVA), AUC CADD (Column: CADD), AUC CADD + AlphScore (Column: com_Alph_CADD), cvAUC MOVA + CADD (Column: com_MOVA_CADD). file required redrawing redraw function MOVA + CADD output \"protein/gene name_Target Pathogenic_predict_orig_CADDMOVA.csv\".","code":""},{"path":"/reference/Com_CADD_MOVA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combining CADD and MOVA\r\n — Com_CADD_MOVA","text":"data.frame containing Cutoff value (Youden index) fold (Column: Cutoff), number positive variants gene used analysis (Column: positive_variant_num), number negative variants (Column: negative_variant_num), AUC fold MOVA + CADD (Column: AUC), cvAUC MOVA (Column: MOVA), AUC CADD (Column: CADD), AUC CADD + AlphScore (Column: com_Alph_CADD), cvAUC MOVA + CADD (Column: com_MOVA_CADD). data output \"protein/gene name_Target Pathogenic_result_CADDMOVA.csv\".","code":""},{"path":[]},{"path":"/reference/Com_CADD_MOVA.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Combining CADD and MOVA\r\n — Com_CADD_MOVA","text":"Yuya Hatano","code":""},{"path":[]},{"path":[]},{"path":"/reference/Com_CADD_MOVA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combining CADD and MOVA\r\n — Com_CADD_MOVA","text":"","code":"Hgmd_divide(\"./source/OPTN_hgmd.csv\") #> Error in fread(hgmd_file_name): File './source/OPTN_hgmd.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_gnomAD_file(\"./source/gnomAD_v3.1.2_ENST00000378748_2023_02_15_13_19_36.csv\", \"./source/OPTN_gnomAD.csv\") #> Error in fread(input_file_name): File './source/gnomAD_v3.1.2_ENST00000378748_2023_02_15_13_19_36.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_variant_data(\"../CADD_REVEL/AlphScore_final.tsv\", \"./source/OPTN_hgmd.csv\", \"./source/OPTN_gnomAD.csv\", \"Q96CV9\", \"OPTN\", \"./source/OPTNvariantdata.csv\") #> Error in fread(AlphScore_final_file): File '../CADD_REVEL/AlphScore_final.tsv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_polyphen_data(\"../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr10\",\"./source/OPTNvariantdata.csv\", \"OPTN_alph.csv\", \"Q96CV9\",13100173,13138291,  \"./source/OPTNvariantdatapol.csv\", \"./source/OPTN_alphpol.csv\") #> Error in fread(dbNSFP4.3a_final_file): File '../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr10' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_final_variant_file(\"./source/OPTN_alphpol.csv\",\"./source/OPTN_alphpol2.csv\") #> Error in fread(input_file_name): File './source/OPTN_alphpol.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA(\"./source/Q96CV9.fa\", \"OPTN\", \"./source/AF-Q96CV9-F1-model_v2.pdb\",\"./source/OPTN_alphpol2.csv\", \"./source/OPTNvariantdatapol.csv\") #> Warning: data set 'BLOSUM62' not found #> Warning: cannot open file './source/Q96CV9.fa': No such file or directory #> Error in file(con, \"r\"): cannot open the connection Com_CADD_MOVA(\"OPTN\", \"OPTN_Target_finalpredict.csv\", \"OPTN_Target_predict_orig.csv\", \"OPTN_Target_predict.csv\", alphscore = 1) #> Error in fread(MOVA_final_predict_file): File 'OPTN_Target_finalpredict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference'  ## The function is currently defined as function (protein_name, MOVA_final_predict_file, MOVA_predict_orig_file,      MOVA_predict_file, alphscore = 0, phenotype = \"Target\")  {     final_data <- fread(MOVA_final_predict_file)     df <- fread(MOVA_predict_orig_file)     out <- cvAUC(df$predict, df$result, label.ordering = NULL,          folds = df$iter3)     plot(out$perf, col = \"blue\", avg = \"vertical\")     auc_bind <- data.frame(MOVA = c(out$cvAUC))     df <- fread(MOVA_predict_file)     df$CADDMOVA_predict <- 0     df[, c(\"CADDMOVA_predict\")] <- list(NULL)     if (phenotype == \"Target\") {         df <- df[(df$Type == \"Target\") | (df$Type == \"Ctrl\"),              ]     }     if (phenotype == \"Target\") {         df$result <- df$Type2     }     else {         df$result <- df$Type3     }     df$predict <- df$CADD_raw     pred <- prediction(df$predict, df$result)     perf <- performance(pred, \"tpr\", \"fpr\")     plot(perf, col = \"black\", add = TRUE)     auc.tmp <- performance(pred, \"auc\")     auc <- as.numeric(auc.tmp@y.values)     auc_bind <- cbind(auc_bind, data.frame(CADD = c(auc)))     if (alphscore == 1) {         df$predict <- df$glm_AlphCadd         pred <- prediction(df$predict, df$result)         perf <- performance(pred, \"tpr\", \"fpr\")         plot(perf, col = \"gray\", add = TRUE)         auc.tmp <- performance(pred, \"auc\")         auc <- as.numeric(auc.tmp@y.values)         auc_bind <- cbind(auc_bind, data.frame(com_Alph_CADD = c(auc)))     }     D <- df     df <- data.frame(matrix(rep(NA, 6), nrow = 1))[numeric(0),          ]     colnames(df) <- c(\"ID\", \"result\", \"CADDMOVA\", \"change\", \"iter1\",          \"iter2\")     D$id2 <- 0     D[, c(\"id2\")] <- list(NULL)     oldw <- getOption(\"warn\")     options(warn = -1)     D <- rowid_to_column(D, var = \"id2\")     for (i2 in 1:5) {         D$id3 <- D$id2         j <- 5         dat1 <- D %>% stratified(., group = \"result\", size = 1/j)         dat1$iter <- 1         datzan <- D[-dat1$id2, ]         for (i in 2:j) {             datzan[, c(\"id2\")] <- list(NULL)             datzan <- rowid_to_column(datzan, var = \"id2\")             if (i != j) {                 dat2 <- datzan %>% stratified(., group = \"result\",                    size = 1/(j - i + 1))             }             else {                 dat2 <- datzan             }             dat2$iter <- i             datzan <- datzan[-dat2$id2, ]             dat1 <- rbind(dat1, dat2)         }         dat1[, c(\"id2\")] <- list(NULL)         dat1 <- rowid_to_column(dat1, var = \"id2\")         for (i in 1:j) {             val <- dat1[dat1$iter == i, ]             train.data <- dat1[-val$id2, ]             glmals <- glm(result ~ MOVA_predict + CADD_raw, data = train.data,                  family = binomial)             f <- data.frame(ID = val$ID, result = val$result,                  predict = predict(glmals, newdata = val), change = val$change,                  iter1 = i, iter2 = i2)             df <- rbind(df, f)         }     }     glmals <- glm(result ~ MOVA_predict + CADD_raw, data = D,          family = binomial)     f <- data.frame(ID = final_data$ID, CADDMOVA = predict(glmals,          newdata = final_data))     options(warn = oldw)     final_data <- merge(f, final_data)     fwrite(final_data, MOVA_final_predict_file)     df$iter3 <- df$iter1 + (df$iter2 * 5)     out <- cvAUC(df$predict, df$result, label.ordering = NULL,          folds = df$iter3)     plot(out$perf, col = \"red\", avg = \"vertical\", add = TRUE)     cvauc <- out$cvAUC     auc_bind <- cbind(auc_bind, data.frame(com_MOVA_CADD = c(cvauc)))     YI2 <- data.frame(matrix(rep(NA, 5), nrow = 1))[numeric(0),          ]     colnames(YI2) <- c(\"Cutoff\", \"positive_variant_num\", \"negative_variant_num\",          \"AUC\", \"cvauc\")     for (i in 6:30) {         pred <- prediction(df[df$iter3 == i, ]$predict, df[df$iter3 ==              i, ]$result)         auc.tmp <- performance(pred, \"auc\")         auc <- as.numeric(auc.tmp@y.values)         tab <- data.frame(Cutoff = unlist(pred@cutoffs), TP = unlist(pred@tp),              FP = unlist(pred@fp), FN = unlist(pred@fn), TN = unlist(pred@tn),              Sensitivity = unlist(pred@tp)/(unlist(pred@tp) +                  unlist(pred@fn)), Specificity = unlist(pred@tn)/(unlist(pred@fp) +                  unlist(pred@tn)), Accuracy = ((unlist(pred@tp) +                  unlist(pred@tn))/nrow(df)), Precision = (unlist(pred@tp)/(unlist(pred@tp) +                  unlist(pred@fp))))         tab$Youden <- tab$Sensitivity + tab$Specificity - 1         YI <- tab[order(tab$Youden, decreasing = T), ]         YI <- data.frame(Cutoff = YI$Cutoff[1], positive_variant_num = c(nrow(df[(df$result ==              1) & (df$iter2 == 1), ])), negative_variant_num = c(nrow(df[(df$result ==              0) & (df$iter2 == 1), ])), AUC = c(auc))         YI <- cbind(YI, auc_bind)         YI2 <- rbind(YI2, YI)     }     fwrite(YI2, paste(protein_name, phenotype, \"result_CADDMOVA.csv\",          sep = \"_\"))     df2 <- df %>% group_by(ID) %>% summarise(CADDMOVA_predict = mean(CADDMOVA))     D[, c(\"result\")] <- list(NULL)     fwrite(merge(D, df2), MOVA_predict_file)     fwrite(df, paste(protein_name, phenotype, \"predict_orig_CADDMOVA.csv\",          sep = \"_\"))     return(YI2)   } #> function (protein_name, MOVA_final_predict_file, MOVA_predict_orig_file,  #>     MOVA_predict_file, alphscore = 0, phenotype = \"Target\")  #> { #>     final_data <- fread(MOVA_final_predict_file) #>     df <- fread(MOVA_predict_orig_file) #>     out <- cvAUC(df$predict, df$result, label.ordering = NULL,  #>         folds = df$iter3) #>     plot(out$perf, col = \"blue\", avg = \"vertical\") #>     auc_bind <- data.frame(MOVA = c(out$cvAUC)) #>     df <- fread(MOVA_predict_file) #>     df$CADDMOVA_predict <- 0 #>     df[, c(\"CADDMOVA_predict\")] <- list(NULL) #>     if (phenotype == \"Target\") { #>         df <- df[(df$Type == \"Target\") | (df$Type == \"Ctrl\"),  #>             ] #>     } #>     if (phenotype == \"Target\") { #>         df$result <- df$Type2 #>     } #>     else { #>         df$result <- df$Type3 #>     } #>     df$predict <- df$CADD_raw #>     pred <- prediction(df$predict, df$result) #>     perf <- performance(pred, \"tpr\", \"fpr\") #>     plot(perf, col = \"black\", add = TRUE) #>     auc.tmp <- performance(pred, \"auc\") #>     auc <- as.numeric(auc.tmp@y.values) #>     auc_bind <- cbind(auc_bind, data.frame(CADD = c(auc))) #>     if (alphscore == 1) { #>         df$predict <- df$glm_AlphCadd #>         pred <- prediction(df$predict, df$result) #>         perf <- performance(pred, \"tpr\", \"fpr\") #>         plot(perf, col = \"gray\", add = TRUE) #>         auc.tmp <- performance(pred, \"auc\") #>         auc <- as.numeric(auc.tmp@y.values) #>         auc_bind <- cbind(auc_bind, data.frame(com_Alph_CADD = c(auc))) #>     } #>     D <- df #>     df <- data.frame(matrix(rep(NA, 6), nrow = 1))[numeric(0),  #>         ] #>     colnames(df) <- c(\"ID\", \"result\", \"CADDMOVA\", \"change\", \"iter1\",  #>         \"iter2\") #>     D$id2 <- 0 #>     D[, c(\"id2\")] <- list(NULL) #>     oldw <- getOption(\"warn\") #>     options(warn = -1) #>     D <- rowid_to_column(D, var = \"id2\") #>     for (i2 in 1:5) { #>         D$id3 <- D$id2 #>         j <- 5 #>         dat1 <- D %>% stratified(., group = \"result\", size = 1/j) #>         dat1$iter <- 1 #>         datzan <- D[-dat1$id2, ] #>         for (i in 2:j) { #>             datzan[, c(\"id2\")] <- list(NULL) #>             datzan <- rowid_to_column(datzan, var = \"id2\") #>             if (i != j) { #>                 dat2 <- datzan %>% stratified(., group = \"result\",  #>                   size = 1/(j - i + 1)) #>             } #>             else { #>                 dat2 <- datzan #>             } #>             dat2$iter <- i #>             datzan <- datzan[-dat2$id2, ] #>             dat1 <- rbind(dat1, dat2) #>         } #>         dat1[, c(\"id2\")] <- list(NULL) #>         dat1 <- rowid_to_column(dat1, var = \"id2\") #>         for (i in 1:j) { #>             val <- dat1[dat1$iter == i, ] #>             train.data <- dat1[-val$id2, ] #>             glmals <- glm(result ~ MOVA_predict + CADD_raw, data = train.data,  #>                 family = binomial) #>             f <- data.frame(ID = val$ID, result = val$result,  #>                 predict = predict(glmals, newdata = val), change = val$change,  #>                 iter1 = i, iter2 = i2) #>             df <- rbind(df, f) #>         } #>     } #>     glmals <- glm(result ~ MOVA_predict + CADD_raw, data = D,  #>         family = binomial) #>     f <- data.frame(ID = final_data$ID, CADDMOVA = predict(glmals,  #>         newdata = final_data)) #>     options(warn = oldw) #>     final_data <- merge(f, final_data) #>     fwrite(final_data, MOVA_final_predict_file) #>     df$iter3 <- df$iter1 + (df$iter2 * 5) #>     out <- cvAUC(df$predict, df$result, label.ordering = NULL,  #>         folds = df$iter3) #>     plot(out$perf, col = \"red\", avg = \"vertical\", add = TRUE) #>     cvauc <- out$cvAUC #>     auc_bind <- cbind(auc_bind, data.frame(com_MOVA_CADD = c(cvauc))) #>     YI2 <- data.frame(matrix(rep(NA, 5), nrow = 1))[numeric(0),  #>         ] #>     colnames(YI2) <- c(\"Cutoff\", \"positive_variant_num\", \"negative_variant_num\",  #>         \"AUC\", \"cvauc\") #>     for (i in 6:30) { #>         pred <- prediction(df[df$iter3 == i, ]$predict, df[df$iter3 ==  #>             i, ]$result) #>         auc.tmp <- performance(pred, \"auc\") #>         auc <- as.numeric(auc.tmp@y.values) #>         tab <- data.frame(Cutoff = unlist(pred@cutoffs), TP = unlist(pred@tp),  #>             FP = unlist(pred@fp), FN = unlist(pred@fn), TN = unlist(pred@tn),  #>             Sensitivity = unlist(pred@tp)/(unlist(pred@tp) +  #>                 unlist(pred@fn)), Specificity = unlist(pred@tn)/(unlist(pred@fp) +  #>                 unlist(pred@tn)), Accuracy = ((unlist(pred@tp) +  #>                 unlist(pred@tn))/nrow(df)), Precision = (unlist(pred@tp)/(unlist(pred@tp) +  #>                 unlist(pred@fp)))) #>         tab$Youden <- tab$Sensitivity + tab$Specificity - 1 #>         YI <- tab[order(tab$Youden, decreasing = T), ] #>         YI <- data.frame(Cutoff = YI$Cutoff[1], positive_variant_num = c(nrow(df[(df$result ==  #>             1) & (df$iter2 == 1), ])), negative_variant_num = c(nrow(df[(df$result ==  #>             0) & (df$iter2 == 1), ])), AUC = c(auc)) #>         YI <- cbind(YI, auc_bind) #>         YI2 <- rbind(YI2, YI) #>     } #>     fwrite(YI2, paste(protein_name, phenotype, \"result_CADDMOVA.csv\",  #>         sep = \"_\")) #>     df2 <- df %>% group_by(ID) %>% summarise(CADDMOVA_predict = mean(CADDMOVA)) #>     D[, c(\"result\")] <- list(NULL) #>     fwrite(merge(D, df2), MOVA_predict_file) #>     fwrite(df, paste(protein_name, phenotype, \"predict_orig_CADDMOVA.csv\",  #>         sep = \"_\")) #>     return(YI2) #>   } #> <environment: 0x0000011a8a8d8780>"},{"path":"/reference/Com_REVEL_MOVA.html","id":null,"dir":"Reference","previous_headings":"","what":"Combining REVEL and MOVA\r\n — Com_REVEL_MOVA","title":"Combining REVEL and MOVA\r\n — Com_REVEL_MOVA","text":"MOVA combined REVEL using logistic regression implemented R-function glm option family=binomial  evaluated using stratified 5-fold cross validation method. MOVA + REVEL compared MOVA, REVEL, REVEL + AlphScore. function also outputs final MOVA + REVEL predicted value.","code":""},{"path":"/reference/Com_REVEL_MOVA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combining REVEL and MOVA\r\n — Com_REVEL_MOVA","text":"","code":"Com_REVEL_MOVA(protein_name, MOVA_final_predict_file, MOVA_predict_orig_file, MOVA_predict_file, alphscore = 0, phenotype = \"Target\")"},{"path":"/reference/Com_REVEL_MOVA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combining REVEL and MOVA\r\n — Com_REVEL_MOVA","text":"protein_name Name target protein/gene. Used name file generation. MOVA_final_predict_file \"gene name_Target Pathogenic_finalpredict.csv\" file output MOVA function. final MOVA + REVEL predicted values file. MOVA_predict_orig_file \"gene name_Target Pathogenic_predict_orig.csv\" file output MOVA function. Used redraw ROC curve MOVA. MOVA_predict_file \"gene name_Target Pathogenic_predict.csv\" file output MOVA function. alphscore alphscore 1, REVEL + alphscore drawn; alphscore 0, drawn. default 0. phenotype Specify \"Target\" want positive variant Target variant , \"Pathogenic\" want include Pathogenic variant well. default \"Target\".","code":""},{"path":"/reference/Com_REVEL_MOVA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combining REVEL and MOVA\r\n — Com_REVEL_MOVA","text":"Draw ROC curve MOVA + REVEL (red), MOVA (blue), REVEL (black), (optional: REVEL + AlphScore (gray)). MOVA, REVEL, REVEL + AlphScore use predetermined values. , necessary perform MOVA function advance. predicted value MOVA + REVEL determined function. final MOVA + REVEL predicted value added \"REVELMOVA\" column MOVA_final_predict_file. \"protein/gene name_Target Pathogenic_result_REVELMOVA.csv\" contains Cutoff value (Youden index) fold (Column: Cutoff), number positive variants gene used analysis (Column: positive_variant_num), number negative variants (Column: negative_variant_num), AUC fold MOVA + REVEL (Column: AUC), cvAUC MOVA (Column: MOVA), AUC REVEL (Column: REVEL), AUC REVEL + AlphScore (Column: com_Alph_REVEL), cvAUC MOVA + REVEL (Column: com_MOVA_REVEL). file required redrawing redraw function MOVA + REVEL output \"protein/gene name_Target Pathogenic_predict_orig_REVELMOVA.csv\".","code":""},{"path":"/reference/Com_REVEL_MOVA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combining REVEL and MOVA\r\n — Com_REVEL_MOVA","text":"data.frame containing Cutoff value (Youden index) fold (Column: Cutoff), number positive variants gene used analysis (Column: positive_variant_num), number negative variants (Column: negative_variant_num), AUC fold MOVA + REVEL (Column: AUC), cvAUC MOVA (Column: MOVA), AUC REVEL (Column: REVEL), AUC REVEL + AlphScore (Column: com_Alph_REVEL), cvAUC MOVA + REVEL (Column: com_MOVA_REVEL). data output \"protein/gene name_Target Pathogenic_result_REVELMOVA.csv\".","code":""},{"path":[]},{"path":"/reference/Com_REVEL_MOVA.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Combining REVEL and MOVA\r\n — Com_REVEL_MOVA","text":"Yuya Hatano","code":""},{"path":[]},{"path":[]},{"path":"/reference/Com_REVEL_MOVA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combining REVEL and MOVA\r\n — Com_REVEL_MOVA","text":"","code":"Hgmd_divide(\"./source/TARDBP.csv\") #> Error in fread(hgmd_file_name): File './source/TARDBP.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_gnomAD_file(\"./source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv\", \"./source/TARDBP_gnomAD.csv\") #> Error in fread(input_file_name): File './source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_variant_data(\"../CADD_REVEL/AlphScore_final.tsv\", \"./source/TARDBP.csv\", \"./source/TARDBP_gnomAD.csv\", \"Q13148\", \"TARDBP\", \"./source/TARDBPvariantdata.csv\") #> Error in fread(AlphScore_final_file): File '../CADD_REVEL/AlphScore_final.tsv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_polyphen_data(\"../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1\",\"./source/TARDBPvariantdata.csv\", \"TARDBP_alph.csv\",  \"Q13148\",  11012654, 11025492 ,\"./source/TARDBPvariantdatapol.csv\", \"./source/TARDBP_alphpol.csv\") #> Error in fread(dbNSFP4.3a_final_file): File '../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_final_variant_file(\"./source/TARDBP_alphpol.csv\",\"./source/TARDBP_alphpol2.csv\") #> Error in fread(input_file_name): File './source/TARDBP_alphpol.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA(\"./source/Q13148.fa\", \"TARDBP\", \"./source/AF-Q13148-F1-model_v2.pdb\",\"./source/TARDBP_alphpol2.csv\", \"./source/TARDBPvariantdatapol.csv\") #> Warning: data set 'BLOSUM62' not found #> Warning: cannot open file './source/Q13148.fa': No such file or directory #> Error in file(con, \"r\"): cannot open the connection Com_REVEL_MOVA(\"TARDBP\", \"TARDBP_Target_finalpredict.csv\", \"TARDBP_Target_predict_orig.csv\", \"TARDBP_Target_predict.csv\", alphscore = 1) #> Error in fread(MOVA_final_predict_file): File 'TARDBP_Target_finalpredict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference'  ## The function is currently defined as function (protein_name, MOVA_final_predict_file, MOVA_predict_orig_file,      MOVA_predict_file, alphscore = 0, phenotype = \"Target\")  {     final_data <- fread(MOVA_final_predict_file)     df <- fread(MOVA_predict_orig_file)     out <- cvAUC(df$predict, df$result, label.ordering = NULL,          folds = df$iter3)     plot(out$perf, col = \"blue\", avg = \"vertical\")     auc_bind <- data.frame(MOVA = c(out$cvAUC))     df <- fread(MOVA_predict_file)     df$REVELMOVA_predict <- 0     df[, c(\"REVELMOVA_predict\")] <- list(NULL)     if (phenotype == \"Target\") {         df <- df[(df$Type == \"Target\") | (df$Type == \"Ctrl\"),              ]     }     if (phenotype == \"Target\") {         df$result <- df$Type2     }     else {         df$result <- df$Type3     }     df$predict <- df$REVEL_score     pred <- prediction(df$predict, df$result)     perf <- performance(pred, \"tpr\", \"fpr\")     plot(perf, col = \"black\", add = TRUE)     auc.tmp <- performance(pred, \"auc\")     auc <- as.numeric(auc.tmp@y.values)     auc_bind <- cbind(auc_bind, data.frame(REVEL = c(auc)))     if (alphscore == 1) {         df$predict <- df$glm_AlphRevel         pred <- prediction(df$predict, df$result)         perf <- performance(pred, \"tpr\", \"fpr\")         plot(perf, col = \"gray\", add = TRUE)         auc.tmp <- performance(pred, \"auc\")         auc <- as.numeric(auc.tmp@y.values)         auc_bind <- cbind(auc_bind, data.frame(com_Alph_REVEL = c(auc)))     }     D <- df     df <- data.frame(matrix(rep(NA, 6), nrow = 1))[numeric(0),          ]     colnames(df) <- c(\"ID\", \"result\", \"REVELMOVA\", \"change\",          \"iter1\", \"iter2\")     D$id2 <- 0     D[, c(\"id2\")] <- list(NULL)     oldw <- getOption(\"warn\")     options(warn = -1)     D <- rowid_to_column(D, var = \"id2\")     for (i2 in 1:5) {         D$id3 <- D$id2         j <- 5         dat1 <- D %>% stratified(., group = \"result\", size = 1/j)         dat1$iter <- 1         datzan <- D[-dat1$id2, ]         for (i in 2:j) {             datzan[, c(\"id2\")] <- list(NULL)             datzan <- rowid_to_column(datzan, var = \"id2\")             if (i != j) {                 dat2 <- datzan %>% stratified(., group = \"result\",                    size = 1/(j - i + 1))             }             else {                 dat2 <- datzan             }             dat2$iter <- i             datzan <- datzan[-dat2$id2, ]             dat1 <- rbind(dat1, dat2)         }         dat1[, c(\"id2\")] <- list(NULL)         dat1 <- rowid_to_column(dat1, var = \"id2\")         for (i in 1:j) {             val <- dat1[dat1$iter == i, ]             train.data <- dat1[-val$id2, ]             glmals <- glm(result ~ MOVA_predict + REVEL_score,                  data = train.data, family = binomial)             f <- data.frame(ID = val$ID, result = val$result,                  predict = predict(glmals, newdata = val), change = val$change,                  iter1 = i, iter2 = i2)             df <- rbind(df, f)         }     }     glmals <- glm(result ~ MOVA_predict + REVEL_score, data = D,          family = binomial)     f <- data.frame(ID = final_data$ID, REVELMOVA = predict(glmals,          newdata = final_data))     options(warn = oldw)     final_data <- merge(f, final_data)     fwrite(final_data, MOVA_final_predict_file)     df$iter3 <- df$iter1 + (df$iter2 * 5)     out <- cvAUC(df$predict, df$result, label.ordering = NULL,          folds = df$iter3)     plot(out$perf, col = \"red\", avg = \"vertical\", add = TRUE)     cvauc <- out$cvAUC     auc_bind <- cbind(auc_bind, data.frame(com_MOVA_REVEL = c(cvauc)))     YI2 <- data.frame(matrix(rep(NA, 5), nrow = 1))[numeric(0),          ]     colnames(YI2) <- c(\"Cutoff\", \"positive_variant_num\", \"negative_variant_num\",          \"AUC\", \"cvauc\")     for (i in 6:30) {         pred <- prediction(df[df$iter3 == i, ]$predict, df[df$iter3 ==              i, ]$result)         auc.tmp <- performance(pred, \"auc\")         auc <- as.numeric(auc.tmp@y.values)         tab <- data.frame(Cutoff = unlist(pred@cutoffs), TP = unlist(pred@tp),              FP = unlist(pred@fp), FN = unlist(pred@fn), TN = unlist(pred@tn),              Sensitivity = unlist(pred@tp)/(unlist(pred@tp) +                  unlist(pred@fn)), Specificity = unlist(pred@tn)/(unlist(pred@fp) +                  unlist(pred@tn)), Accuracy = ((unlist(pred@tp) +                  unlist(pred@tn))/nrow(df)), Precision = (unlist(pred@tp)/(unlist(pred@tp) +                  unlist(pred@fp))))         tab$Youden <- tab$Sensitivity + tab$Specificity - 1         YI <- tab[order(tab$Youden, decreasing = T), ]         YI <- data.frame(Cutoff = YI$Cutoff[1], positive_variant_num = c(nrow(df[(df$result ==              1) & (df$iter2 == 1), ])), negative_variant_num = c(nrow(df[(df$result ==              0) & (df$iter2 == 1), ])), AUC = c(auc))         YI <- cbind(YI, auc_bind)         YI2 <- rbind(YI2, YI)     }     fwrite(YI2, paste(protein_name, phenotype, \"result_REVELMOVA.csv\",          sep = \"_\"))     df2 <- df %>% group_by(ID) %>% summarise(REVELMOVA_predict = mean(REVELMOVA))     D[, c(\"result\")] <- list(NULL)     fwrite(merge(D, df2), MOVA_predict_file)     fwrite(df, paste(protein_name, phenotype, \"predict_orig_REVELMOVA.csv\",          sep = \"_\"))     return(YI2)   } #> function (protein_name, MOVA_final_predict_file, MOVA_predict_orig_file,  #>     MOVA_predict_file, alphscore = 0, phenotype = \"Target\")  #> { #>     final_data <- fread(MOVA_final_predict_file) #>     df <- fread(MOVA_predict_orig_file) #>     out <- cvAUC(df$predict, df$result, label.ordering = NULL,  #>         folds = df$iter3) #>     plot(out$perf, col = \"blue\", avg = \"vertical\") #>     auc_bind <- data.frame(MOVA = c(out$cvAUC)) #>     df <- fread(MOVA_predict_file) #>     df$REVELMOVA_predict <- 0 #>     df[, c(\"REVELMOVA_predict\")] <- list(NULL) #>     if (phenotype == \"Target\") { #>         df <- df[(df$Type == \"Target\") | (df$Type == \"Ctrl\"),  #>             ] #>     } #>     if (phenotype == \"Target\") { #>         df$result <- df$Type2 #>     } #>     else { #>         df$result <- df$Type3 #>     } #>     df$predict <- df$REVEL_score #>     pred <- prediction(df$predict, df$result) #>     perf <- performance(pred, \"tpr\", \"fpr\") #>     plot(perf, col = \"black\", add = TRUE) #>     auc.tmp <- performance(pred, \"auc\") #>     auc <- as.numeric(auc.tmp@y.values) #>     auc_bind <- cbind(auc_bind, data.frame(REVEL = c(auc))) #>     if (alphscore == 1) { #>         df$predict <- df$glm_AlphRevel #>         pred <- prediction(df$predict, df$result) #>         perf <- performance(pred, \"tpr\", \"fpr\") #>         plot(perf, col = \"gray\", add = TRUE) #>         auc.tmp <- performance(pred, \"auc\") #>         auc <- as.numeric(auc.tmp@y.values) #>         auc_bind <- cbind(auc_bind, data.frame(com_Alph_REVEL = c(auc))) #>     } #>     D <- df #>     df <- data.frame(matrix(rep(NA, 6), nrow = 1))[numeric(0),  #>         ] #>     colnames(df) <- c(\"ID\", \"result\", \"REVELMOVA\", \"change\",  #>         \"iter1\", \"iter2\") #>     D$id2 <- 0 #>     D[, c(\"id2\")] <- list(NULL) #>     oldw <- getOption(\"warn\") #>     options(warn = -1) #>     D <- rowid_to_column(D, var = \"id2\") #>     for (i2 in 1:5) { #>         D$id3 <- D$id2 #>         j <- 5 #>         dat1 <- D %>% stratified(., group = \"result\", size = 1/j) #>         dat1$iter <- 1 #>         datzan <- D[-dat1$id2, ] #>         for (i in 2:j) { #>             datzan[, c(\"id2\")] <- list(NULL) #>             datzan <- rowid_to_column(datzan, var = \"id2\") #>             if (i != j) { #>                 dat2 <- datzan %>% stratified(., group = \"result\",  #>                   size = 1/(j - i + 1)) #>             } #>             else { #>                 dat2 <- datzan #>             } #>             dat2$iter <- i #>             datzan <- datzan[-dat2$id2, ] #>             dat1 <- rbind(dat1, dat2) #>         } #>         dat1[, c(\"id2\")] <- list(NULL) #>         dat1 <- rowid_to_column(dat1, var = \"id2\") #>         for (i in 1:j) { #>             val <- dat1[dat1$iter == i, ] #>             train.data <- dat1[-val$id2, ] #>             glmals <- glm(result ~ MOVA_predict + REVEL_score,  #>                 data = train.data, family = binomial) #>             f <- data.frame(ID = val$ID, result = val$result,  #>                 predict = predict(glmals, newdata = val), change = val$change,  #>                 iter1 = i, iter2 = i2) #>             df <- rbind(df, f) #>         } #>     } #>     glmals <- glm(result ~ MOVA_predict + REVEL_score, data = D,  #>         family = binomial) #>     f <- data.frame(ID = final_data$ID, REVELMOVA = predict(glmals,  #>         newdata = final_data)) #>     options(warn = oldw) #>     final_data <- merge(f, final_data) #>     fwrite(final_data, MOVA_final_predict_file) #>     df$iter3 <- df$iter1 + (df$iter2 * 5) #>     out <- cvAUC(df$predict, df$result, label.ordering = NULL,  #>         folds = df$iter3) #>     plot(out$perf, col = \"red\", avg = \"vertical\", add = TRUE) #>     cvauc <- out$cvAUC #>     auc_bind <- cbind(auc_bind, data.frame(com_MOVA_REVEL = c(cvauc))) #>     YI2 <- data.frame(matrix(rep(NA, 5), nrow = 1))[numeric(0),  #>         ] #>     colnames(YI2) <- c(\"Cutoff\", \"positive_variant_num\", \"negative_variant_num\",  #>         \"AUC\", \"cvauc\") #>     for (i in 6:30) { #>         pred <- prediction(df[df$iter3 == i, ]$predict, df[df$iter3 ==  #>             i, ]$result) #>         auc.tmp <- performance(pred, \"auc\") #>         auc <- as.numeric(auc.tmp@y.values) #>         tab <- data.frame(Cutoff = unlist(pred@cutoffs), TP = unlist(pred@tp),  #>             FP = unlist(pred@fp), FN = unlist(pred@fn), TN = unlist(pred@tn),  #>             Sensitivity = unlist(pred@tp)/(unlist(pred@tp) +  #>                 unlist(pred@fn)), Specificity = unlist(pred@tn)/(unlist(pred@fp) +  #>                 unlist(pred@tn)), Accuracy = ((unlist(pred@tp) +  #>                 unlist(pred@tn))/nrow(df)), Precision = (unlist(pred@tp)/(unlist(pred@tp) +  #>                 unlist(pred@fp)))) #>         tab$Youden <- tab$Sensitivity + tab$Specificity - 1 #>         YI <- tab[order(tab$Youden, decreasing = T), ] #>         YI <- data.frame(Cutoff = YI$Cutoff[1], positive_variant_num = c(nrow(df[(df$result ==  #>             1) & (df$iter2 == 1), ])), negative_variant_num = c(nrow(df[(df$result ==  #>             0) & (df$iter2 == 1), ])), AUC = c(auc)) #>         YI <- cbind(YI, auc_bind) #>         YI2 <- rbind(YI2, YI) #>     } #>     fwrite(YI2, paste(protein_name, phenotype, \"result_REVELMOVA.csv\",  #>         sep = \"_\")) #>     df2 <- df %>% group_by(ID) %>% summarise(REVELMOVA_predict = mean(REVELMOVA)) #>     D[, c(\"result\")] <- list(NULL) #>     fwrite(merge(D, df2), MOVA_predict_file) #>     fwrite(df, paste(protein_name, phenotype, \"predict_orig_REVELMOVA.csv\",  #>         sep = \"_\")) #>     return(YI2) #>   } #> <environment: 0x0000011a8425a558>"},{"path":"/reference/Edit_final_variant_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Creating files for MOVA function input — Edit_final_variant_file","title":"Creating files for MOVA function input — Edit_final_variant_file","text":"Create necessary files MOVA function.","code":""},{"path":"/reference/Edit_final_variant_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creating files for MOVA function input — Edit_final_variant_file","text":"","code":"Edit_final_variant_file(input_file_name, export_file_name)"},{"path":"/reference/Edit_final_variant_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creating files for MOVA function input — Edit_final_variant_file","text":"input_file_name export_file_name2 output Edit_polyphen_data export_file_name File name exported","code":""},{"path":"/reference/Edit_final_variant_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creating files for MOVA function input — Edit_final_variant_file","text":"function adds ref, Pos, alt, change columns export_file_name2 output Edit_polyphen_data.","code":""},{"path":[]},{"path":[]},{"path":"/reference/Edit_final_variant_file.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Creating files for MOVA function input — Edit_final_variant_file","text":"Yuya Hatano","code":""},{"path":[]},{"path":[]},{"path":"/reference/Edit_final_variant_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creating files for MOVA function input — Edit_final_variant_file","text":"","code":"Hgmd_divide(\"./source/TARDBP.csv\") #> Error in fread(hgmd_file_name): File './source/TARDBP.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_gnomAD_file(\"./source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv\", \"./source/TARDBP_gnomAD.csv\") #> Error in fread(input_file_name): File './source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_variant_data(\"../CADD_REVEL/AlphScore_final.tsv\", \"./source/TARDBP.csv\", \"./source/TARDBP_gnomAD.csv\", \"Q13148\", \"TARDBP\", \"./source/TARDBPvariantdata.csv\") #> Error in fread(AlphScore_final_file): File '../CADD_REVEL/AlphScore_final.tsv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_polyphen_data(\"../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1\",\"./source/TARDBPvariantdata.csv\", \"TARDBP_alph.csv\",  \"Q13148\",  11012654, 11025492 ,\"./source/TARDBPvariantdatapol.csv\", \"./source/TARDBP_alphpol.csv\") #> Error in fread(dbNSFP4.3a_final_file): File '../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_final_variant_file(\"./source/TARDBP_alphpol.csv\",\"./source/TARDBP_alphpol2.csv\") #> Error in fread(input_file_name): File './source/TARDBP_alphpol.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA(\"./source/Q13148.fa\", \"TARDBP\", \"./source/AF-Q13148-F1-model_v2.pdb\",\"./source/TARDBP_alphpol2.csv\", \"./source/TARDBPvariantdatapol.csv\") #> Warning: data set 'BLOSUM62' not found #> Warning: cannot open file './source/Q13148.fa': No such file or directory #> Error in file(con, \"r\"): cannot open the connection  ## The function is currently defined as function (input_file_name, export_file_name)  {     amino_code1 <- c(\"A\", \"R\", \"N\", \"D\", \"C\", \"Q\", \"E\", \"G\",          \"I\", \"L\", \"K\", \"M\", \"F\", \"P\", \"S\", \"T\", \"W\", \"Y\", \"V\",          \"H\")     amino_code3 = c(\"Ala\", \"Arg\", \"Asn\", \"Asp\", \"Cys\", \"Gln\",          \"Glu\", \"Gly\", \"Ile\", \"Leu\", \"Lys\", \"Met\", \"Phe\", \"Pro\",          \"Ser\", \"Thr\", \"Trp\", \"Tyr\", \"Val\", \"His\")     names(amino_code1) <- amino_code3     x <- fread(input_file_name)     colnames(x)[10] <- \"Protein_Consequence\"     x$ref <- substr(x$HGVSp_VEP_split, 3, 5)     x$Pos <- substr(x$HGVSp_VEP_split, 6, nchar(x$HGVSp_VEP_split) -          3)     x$alt <- substr(x$HGVSp_VEP_split, nchar(x$HGVSp_VEP_split) -          2, nchar(x$HGVSp_VEP_split))     for (i in 1:nrow(x)) {         x$change[i] <- paste(amino_code1[x$ref[i]], x$Pos[i],              amino_code1[x$alt[i]], sep = \"\")     }     fwrite(x, export_file_name)   } #> function (input_file_name, export_file_name)  #> { #>     amino_code1 <- c(\"A\", \"R\", \"N\", \"D\", \"C\", \"Q\", \"E\", \"G\",  #>         \"I\", \"L\", \"K\", \"M\", \"F\", \"P\", \"S\", \"T\", \"W\", \"Y\", \"V\",  #>         \"H\") #>     amino_code3 = c(\"Ala\", \"Arg\", \"Asn\", \"Asp\", \"Cys\", \"Gln\",  #>         \"Glu\", \"Gly\", \"Ile\", \"Leu\", \"Lys\", \"Met\", \"Phe\", \"Pro\",  #>         \"Ser\", \"Thr\", \"Trp\", \"Tyr\", \"Val\", \"His\") #>     names(amino_code1) <- amino_code3 #>     x <- fread(input_file_name) #>     colnames(x)[10] <- \"Protein_Consequence\" #>     x$ref <- substr(x$HGVSp_VEP_split, 3, 5) #>     x$Pos <- substr(x$HGVSp_VEP_split, 6, nchar(x$HGVSp_VEP_split) -  #>         3) #>     x$alt <- substr(x$HGVSp_VEP_split, nchar(x$HGVSp_VEP_split) -  #>         2, nchar(x$HGVSp_VEP_split)) #>     for (i in 1:nrow(x)) { #>         x$change[i] <- paste(amino_code1[x$ref[i]], x$Pos[i],  #>             amino_code1[x$alt[i]], sep = \"\") #>     } #>     fwrite(x, export_file_name) #>   } #> <environment: 0x0000011a8824a338>"},{"path":"/reference/Edit_gnomAD_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to retrieve the required information from the downloaded gnomAD file\r\n — Edit_gnomAD_file","title":"Function to retrieve the required information from the downloaded gnomAD file\r\n — Edit_gnomAD_file","text":"Function retrieve required information downloaded gnomAD file. applying function, sure check contents file delete missense mutations.","code":""},{"path":"/reference/Edit_gnomAD_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to retrieve the required information from the downloaded gnomAD file\r\n — Edit_gnomAD_file","text":"","code":"Edit_gnomAD_file(input_file_name, export_file_name)"},{"path":"/reference/Edit_gnomAD_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to retrieve the required information from the downloaded gnomAD file\r\n — Edit_gnomAD_file","text":"input_file_name name downloaded gnomAD file export_file_name Output file name","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"/reference/Edit_gnomAD_file.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function to retrieve the required information from the downloaded gnomAD file\r\n — Edit_gnomAD_file","text":"Yuya Hatano","code":""},{"path":[]},{"path":[]},{"path":"/reference/Edit_gnomAD_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to retrieve the required information from the downloaded gnomAD file\r\n — Edit_gnomAD_file","text":"","code":"Hgmd_divide(\"./source/TARDBP.csv\") #> Error in fread(hgmd_file_name): File './source/TARDBP.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_gnomAD_file(\"./source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv\", \"./source/TARDBP_gnomAD.csv\") #> Error in fread(input_file_name): File './source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_variant_data(\"../CADD_REVEL/AlphScore_final.tsv\", \"./source/TARDBP.csv\", \"./source/TARDBP_gnomAD.csv\", \"Q13148\", \"TARDBP\", \"./source/TARDBPvariantdata.csv\") #> Error in fread(AlphScore_final_file): File '../CADD_REVEL/AlphScore_final.tsv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_polyphen_data(\"../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1\",\"./source/TARDBPvariantdata.csv\", \"TARDBP_alph.csv\",  \"Q13148\",  11012654, 11025492 ,\"./source/TARDBPvariantdatapol.csv\", \"./source/TARDBP_alphpol.csv\") #> Error in fread(dbNSFP4.3a_final_file): File '../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_final_variant_file(\"./source/TARDBP_alphpol.csv\",\"./source/TARDBP_alphpol2.csv\") #> Error in fread(input_file_name): File './source/TARDBP_alphpol.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA(\"./source/Q13148.fa\", \"TARDBP\", \"./source/AF-Q13148-F1-model_v2.pdb\",\"./source/TARDBP_alphpol2.csv\", \"./source/TARDBPvariantdatapol.csv\") #> Warning: data set 'BLOSUM62' not found #> Warning: cannot open file './source/Q13148.fa': No such file or directory #> Error in file(con, \"r\"): cannot open the connection  ## The function is currently defined as function (input_file_name, export_file_name)  {     amino_code1 <- c(\"A\", \"R\", \"N\", \"D\", \"C\", \"Q\", \"E\", \"G\",          \"I\", \"L\", \"K\", \"M\", \"F\", \"P\", \"S\", \"T\", \"W\", \"Y\", \"V\",          \"H\")     amino_code3 = c(\"Ala\", \"Arg\", \"Asn\", \"Asp\", \"Cys\", \"Gln\",          \"Glu\", \"Gly\", \"Ile\", \"Leu\", \"Lys\", \"Met\", \"Phe\", \"Pro\",          \"Ser\", \"Thr\", \"Trp\", \"Tyr\", \"Val\", \"His\")     names(amino_code1) <- amino_code3     x <- fread(input_file_name)     colnames(x)[10] <- \"Protein_Consequence\"     x$ref <- substr(x$Protein_Consequence, 3, 5)     x$Pos <- substr(x$Protein_Consequence, 6, nchar(x$Protein_Consequence) -          3)     x$alt <- substr(x$Protein_Consequence, nchar(x$Protein_Consequence) -          2, nchar(x$Protein_Consequence))     for (i in 1:nrow(x)) {         x$change[i] <- paste(amino_code1[x$ref[i]], x$Pos[i],              amino_code1[x$alt[i]], sep = \"\")     }     y <- data.frame(Chromosome = x$Chromosome, Position = x$Position,          Reference = x$Reference, Alternate = x$Alternate, change = x$change)     fwrite(y, export_file_name)   } #> function (input_file_name, export_file_name)  #> { #>     amino_code1 <- c(\"A\", \"R\", \"N\", \"D\", \"C\", \"Q\", \"E\", \"G\",  #>         \"I\", \"L\", \"K\", \"M\", \"F\", \"P\", \"S\", \"T\", \"W\", \"Y\", \"V\",  #>         \"H\") #>     amino_code3 = c(\"Ala\", \"Arg\", \"Asn\", \"Asp\", \"Cys\", \"Gln\",  #>         \"Glu\", \"Gly\", \"Ile\", \"Leu\", \"Lys\", \"Met\", \"Phe\", \"Pro\",  #>         \"Ser\", \"Thr\", \"Trp\", \"Tyr\", \"Val\", \"His\") #>     names(amino_code1) <- amino_code3 #>     x <- fread(input_file_name) #>     colnames(x)[10] <- \"Protein_Consequence\" #>     x$ref <- substr(x$Protein_Consequence, 3, 5) #>     x$Pos <- substr(x$Protein_Consequence, 6, nchar(x$Protein_Consequence) -  #>         3) #>     x$alt <- substr(x$Protein_Consequence, nchar(x$Protein_Consequence) -  #>         2, nchar(x$Protein_Consequence)) #>     for (i in 1:nrow(x)) { #>         x$change[i] <- paste(amino_code1[x$ref[i]], x$Pos[i],  #>             amino_code1[x$alt[i]], sep = \"\") #>     } #>     y <- data.frame(Chromosome = x$Chromosome, Position = x$Position,  #>         Reference = x$Reference, Alternate = x$Alternate, change = x$change) #>     fwrite(y, export_file_name) #>   } #> <environment: 0x0000011a8b40ada0>"},{"path":"/reference/Edit_polyphen_data.html","id":null,"dir":"Reference","previous_headings":"","what":"This function adds PolyPhen-2 predictions to the MOVA input file.\r\n — Edit_polyphen_data","title":"This function adds PolyPhen-2 predictions to the MOVA input file.\r\n — Edit_polyphen_data","text":"function adds PolyPhen-2 predictions MOVA input file. function required create input files needed MOVA functions.","code":""},{"path":"/reference/Edit_polyphen_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function adds PolyPhen-2 predictions to the MOVA input file.\r\n — Edit_polyphen_data","text":"","code":"Edit_polyphen_data(dbNSFP4.3a_final_file, input_file_name1, input_file_name2, uniprot_name, position1, position2, export_file_name1, export_file_name2)"},{"path":"/reference/Edit_polyphen_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function adds PolyPhen-2 predictions to the MOVA input file.\r\n — Edit_polyphen_data","text":"dbNSFP4.3a_final_file Path dbNSFP4.3a_variant file Chromosome gene resides. input_file_name1 Path export_file_name output Edit_variant_data function. input_file_name2 Path \"gene name_alph.csv\" output Edit_variant_data function. uniprot_name uniprot name target protein position1 Lower limit position targeted gene (hg38) position2 Upper limit position targeted gene (hg38) export_file_name1 Name output file 1 export_file_name2 Name output file 2","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"/reference/Edit_polyphen_data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"This function adds PolyPhen-2 predictions to the MOVA input file.\r\n — Edit_polyphen_data","text":"Yuya Hatano","code":""},{"path":[]},{"path":[]},{"path":"/reference/Edit_polyphen_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This function adds PolyPhen-2 predictions to the MOVA input file.\r\n — Edit_polyphen_data","text":"","code":"Hgmd_divide(\"./source/TARDBP.csv\") #> Error in fread(hgmd_file_name): File './source/TARDBP.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_gnomAD_file(\"./source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv\", \"./source/TARDBP_gnomAD.csv\") #> Error in fread(input_file_name): File './source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_variant_data(\"../CADD_REVEL/AlphScore_final.tsv\", \"./source/TARDBP.csv\", \"./source/TARDBP_gnomAD.csv\", \"Q13148\", \"TARDBP\", \"./source/TARDBPvariantdata.csv\") #> Error in fread(AlphScore_final_file): File '../CADD_REVEL/AlphScore_final.tsv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_polyphen_data(\"../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1\",\"./source/TARDBPvariantdata.csv\", \"TARDBP_alph.csv\",  \"Q13148\",  11012654, 11025492 ,\"./source/TARDBPvariantdatapol.csv\", \"./source/TARDBP_alphpol.csv\") #> Error in fread(dbNSFP4.3a_final_file): File '../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_final_variant_file(\"./source/TARDBP_alphpol.csv\",\"./source/TARDBP_alphpol2.csv\") #> Error in fread(input_file_name): File './source/TARDBP_alphpol.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA(\"./source/Q13148.fa\", \"TARDBP\", \"./source/AF-Q13148-F1-model_v2.pdb\",\"./source/TARDBP_alphpol2.csv\", \"./source/TARDBPvariantdatapol.csv\") #> Warning: data set 'BLOSUM62' not found #> Warning: cannot open file './source/Q13148.fa': No such file or directory #> Error in file(con, \"r\"): cannot open the connection  ## The function is currently defined as function (dbNSFP4.3a_final_file, input_file_name1, input_file_name2,      uniprot_name, position1, position2, export_file_name1, export_file_name2)  {     D <- fread(dbNSFP4.3a_final_file)     head(D)     colnames(D)[1] <- \"Chromosome\"     colnames(D)[2] <- \"Position\"     colnames(D)[3] <- \"Reference\"     colnames(D)[4] <- \"Alternate\"     dren <- D[(D$Position <= position2) & (D$Position >= position1),          ]     dt <- data.table(Chromosome = dren$Chromosome, Position = dren$Position,          Reference = dren$Reference, Alternate = dren$Alternate,          Uniprot_acc = dren$Uniprot_acc, Polyphen_prob = dren$Polyphen2_HDIV_score)     Uniplot_v <- str_split(dt$Uniprot_acc, pattern = \";\", simplify = TRUE)     Polyphen2_HDIV_v <- str_split(dt$Polyphen_prob, pattern = \";\",          simplify = TRUE)     dt$pph_prob <- \"\"     i <- 1     while (i < nrow(dt)) {         CHm <- match(uniprot_name, Uniplot_v[i, ])         if (is.na(CHm) == FALSE) {             dt$pph_prob[i] <- Polyphen2_HDIV_v[i, CHm]             i <- i + 1         }         else {             dt <- dt[-i, ]             Uniplot_v <- Uniplot_v[-i, ]             Polyphen2_HDIV_v <- Polyphen2_HDIV_v[-i, ]         }     }     dt[, `:=`(Uniprot_acc, NULL)]     dt[, `:=`(Polyphen_prob, NULL)]     dat <- fread(input_file_name1)     pph_data <- merge(dat, dt)     fwrite(pph_data, export_file_name1)     dat <- fread(input_file_name2)     pph_data <- merge(dat, dt)     fwrite(pph_data, export_file_name2)   } #> function (dbNSFP4.3a_final_file, input_file_name1, input_file_name2,  #>     uniprot_name, position1, position2, export_file_name1, export_file_name2)  #> { #>     D <- fread(dbNSFP4.3a_final_file) #>     head(D) #>     colnames(D)[1] <- \"Chromosome\" #>     colnames(D)[2] <- \"Position\" #>     colnames(D)[3] <- \"Reference\" #>     colnames(D)[4] <- \"Alternate\" #>     dren <- D[(D$Position <= position2) & (D$Position >= position1),  #>         ] #>     dt <- data.table(Chromosome = dren$Chromosome, Position = dren$Position,  #>         Reference = dren$Reference, Alternate = dren$Alternate,  #>         Uniprot_acc = dren$Uniprot_acc, Polyphen_prob = dren$Polyphen2_HDIV_score) #>     Uniplot_v <- str_split(dt$Uniprot_acc, pattern = \";\", simplify = TRUE) #>     Polyphen2_HDIV_v <- str_split(dt$Polyphen_prob, pattern = \";\",  #>         simplify = TRUE) #>     dt$pph_prob <- \"\" #>     i <- 1 #>     while (i < nrow(dt)) { #>         CHm <- match(uniprot_name, Uniplot_v[i, ]) #>         if (is.na(CHm) == FALSE) { #>             dt$pph_prob[i] <- Polyphen2_HDIV_v[i, CHm] #>             i <- i + 1 #>         } #>         else { #>             dt <- dt[-i, ] #>             Uniplot_v <- Uniplot_v[-i, ] #>             Polyphen2_HDIV_v <- Polyphen2_HDIV_v[-i, ] #>         } #>     } #>     dt[, `:=`(Uniprot_acc, NULL)] #>     dt[, `:=`(Polyphen_prob, NULL)] #>     dat <- fread(input_file_name1) #>     pph_data <- merge(dat, dt) #>     fwrite(pph_data, export_file_name1) #>     dat <- fread(input_file_name2) #>     pph_data <- merge(dat, dt) #>     fwrite(pph_data, export_file_name2) #>   } #> <environment: 0x0000011a811a2f00>"},{"path":"/reference/Edit_variant_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Integrate HGMD file and gnomAD file.  \r\n — Edit_variant_data","title":"Integrate HGMD file and gnomAD file.  \r\n — Edit_variant_data","text":"Integrate HGMD file processed Hgmd_divide function gnomAD file processed Edit_gnomAD_file function. addition, function also adds information predictions obtained existing silico algorithms PolyPhen-2, necessary step MOVA execution.","code":""},{"path":"/reference/Edit_variant_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integrate HGMD file and gnomAD file.  \r\n — Edit_variant_data","text":"","code":"Edit_variant_data(AlphScore_final_file, hgmd_file_name, gnomad_file_name, uniprot_name, gene_name, export_file_name)"},{"path":"/reference/Edit_variant_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integrate HGMD file and gnomAD file.  \r\n — Edit_variant_data","text":"AlphScore_final_file Path AlphScore_final.tsv. AlphScore_final.tsv available https://zenodo.org/record/6288139#.ZA1Zo3bP3rc. hgmd_file_name HGMD file processed Hgmd_divide function gnomad_file_name gnomAD file processed Edit_gnomAD_file function uniprot_name Target protein uniprot name gene_name Target gene name export_file_name Name file exported.","code":""},{"path":"/reference/Edit_variant_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Integrate HGMD file and gnomAD file.  \r\n — Edit_variant_data","text":"addition main output file (export_file_name), \"gene name_alph.csv\" also output. edit_polyphen_data function must applied output file Edit_variant_data function. main output file specified argument: input_file_name1, \"gene name_alph.csv\" argument: input_file_name2.","code":""},{"path":[]},{"path":[]},{"path":"/reference/Edit_variant_data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Integrate HGMD file and gnomAD file.  \r\n — Edit_variant_data","text":"Yuya Hatano","code":""},{"path":[]},{"path":[]},{"path":"/reference/Edit_variant_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integrate HGMD file and gnomAD file.  \r\n — Edit_variant_data","text":"","code":"Hgmd_divide(\"./source/TARDBP.csv\") #> Error in fread(hgmd_file_name): File './source/TARDBP.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_gnomAD_file(\"./source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv\", \"./source/TARDBP_gnomAD.csv\") #> Error in fread(input_file_name): File './source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_variant_data(\"../CADD_REVEL/AlphScore_final.tsv\", \"./source/TARDBP.csv\", \"./source/TARDBP_gnomAD.csv\", \"Q13148\", \"TARDBP\", \"./source/TARDBPvariantdata.csv\") #> Error in fread(AlphScore_final_file): File '../CADD_REVEL/AlphScore_final.tsv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_polyphen_data(\"../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1\",\"./source/TARDBPvariantdata.csv\", \"TARDBP_alph.csv\",  \"Q13148\",  11012654, 11025492 ,\"./source/TARDBPvariantdatapol.csv\", \"./source/TARDBP_alphpol.csv\") #> Error in fread(dbNSFP4.3a_final_file): File '../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_final_variant_file(\"./source/TARDBP_alphpol.csv\",\"./source/TARDBP_alphpol2.csv\") #> Error in fread(input_file_name): File './source/TARDBP_alphpol.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA(\"./source/Q13148.fa\", \"TARDBP\", \"./source/AF-Q13148-F1-model_v2.pdb\",\"./source/TARDBP_alphpol2.csv\", \"./source/TARDBPvariantdatapol.csv\") #> Warning: data set 'BLOSUM62' not found #> Warning: cannot open file './source/Q13148.fa': No such file or directory #> Error in file(con, \"r\"): cannot open the connection ## The function is currently defined as function (AlphScore_final_file, hgmd_file_name, gnomad_file_name,      uniprot_name, gene_name, export_file_name)  {     x <- fread(AlphScore_final_file)     x <- x[x$Uniprot_acc_split == uniprot_name, ]     colnames(x)[1] <- \"Chromosome\"     colnames(x)[2] <- \"Position\"     colnames(x)[3] <- \"Reference\"     colnames(x)[4] <- \"Alternate\"     x[, `:=`(DEOGEN2_score, NULL)]     x[, `:=`(b_factor, NULL)]     x[, `:=`(SOLVENT_ACCESSIBILITY_core, NULL)]     x[, `:=`(in_gnomad_train, NULL)]     x[, `:=`(in_clinvar_ds, NULL)]     x[, `:=`(glm_AlphCaddDeogen, NULL)]     x[, `:=`(glm_AlphDeogenRevel, NULL)]     x[, `:=`(glm_DeogenRevel, NULL)]     x[, `:=`(glm_CaddDeogen, NULL)]     x[, `:=`(glm_AlphDeogen, NULL)]     x[, `:=`(glm_AlphRevelCadd, NULL)]     x[, `:=`(glm_CaddDeogenRevel, NULL)]     fwrite(x, paste(gene_name, \"_alph.csv\", sep = \"\"))     x <- fread(hgmd_file_name)     y <- fread(gnomad_file_name)     D <- merge(x, y, all = T)     D <- D[(D$possible != \"DMp\") | (is.na(D$possible)), ]     D$Type <- replace(D$Type, which(is.na(D$Type)), \"Ctrl\")     for (i in 1:nrow(D)) {         D$change[i] <- replace(D$change[i], which(is.na(D$change[i])),              D$HGVSprotein[i])     }     D[, `:=`(HGVSprotein, NULL)]     fwrite(D, paste(gene_name, \"_variant.csv\", sep = \"\"))     x <- fread(paste(gene_name, \"_alph.csv\", sep = \"\"))     y <- fread(paste(gene_name, \"_variant.csv\", sep = \"\"))     D <- merge(x, y)     D$Type2 <- 0     D$Type3 <- 1     D[D$Type == \"Target\", ]$Type2 <- 1     D[D$Type == \"Target\", ]$Type3 <- 1     D[D$Type == \"Ctrl\", ]$Type2 <- 0     D[D$Type == \"Ctrl\", ]$Type3 <- 0     fwrite(D, export_file_name)   } #> function (AlphScore_final_file, hgmd_file_name, gnomad_file_name,  #>     uniprot_name, gene_name, export_file_name)  #> { #>     x <- fread(AlphScore_final_file) #>     x <- x[x$Uniprot_acc_split == uniprot_name, ] #>     colnames(x)[1] <- \"Chromosome\" #>     colnames(x)[2] <- \"Position\" #>     colnames(x)[3] <- \"Reference\" #>     colnames(x)[4] <- \"Alternate\" #>     x[, `:=`(DEOGEN2_score, NULL)] #>     x[, `:=`(b_factor, NULL)] #>     x[, `:=`(SOLVENT_ACCESSIBILITY_core, NULL)] #>     x[, `:=`(in_gnomad_train, NULL)] #>     x[, `:=`(in_clinvar_ds, NULL)] #>     x[, `:=`(glm_AlphCaddDeogen, NULL)] #>     x[, `:=`(glm_AlphDeogenRevel, NULL)] #>     x[, `:=`(glm_DeogenRevel, NULL)] #>     x[, `:=`(glm_CaddDeogen, NULL)] #>     x[, `:=`(glm_AlphDeogen, NULL)] #>     x[, `:=`(glm_AlphRevelCadd, NULL)] #>     x[, `:=`(glm_CaddDeogenRevel, NULL)] #>     fwrite(x, paste(gene_name, \"_alph.csv\", sep = \"\")) #>     x <- fread(hgmd_file_name) #>     y <- fread(gnomad_file_name) #>     D <- merge(x, y, all = T) #>     D <- D[(D$possible != \"DMp\") | (is.na(D$possible)), ] #>     D$Type <- replace(D$Type, which(is.na(D$Type)), \"Ctrl\") #>     for (i in 1:nrow(D)) { #>         D$change[i] <- replace(D$change[i], which(is.na(D$change[i])),  #>             D$HGVSprotein[i]) #>     } #>     D[, `:=`(HGVSprotein, NULL)] #>     fwrite(D, paste(gene_name, \"_variant.csv\", sep = \"\")) #>     x <- fread(paste(gene_name, \"_alph.csv\", sep = \"\")) #>     y <- fread(paste(gene_name, \"_variant.csv\", sep = \"\")) #>     D <- merge(x, y) #>     D$Type2 <- 0 #>     D$Type3 <- 1 #>     D[D$Type == \"Target\", ]$Type2 <- 1 #>     D[D$Type == \"Target\", ]$Type3 <- 1 #>     D[D$Type == \"Ctrl\", ]$Type2 <- 0 #>     D[D$Type == \"Ctrl\", ]$Type3 <- 0 #>     fwrite(D, export_file_name) #>   } #> <environment: 0x0000011a87ecf910>"},{"path":"/reference/EVE_Final.html","id":null,"dir":"Reference","previous_headings":"","what":"Add the predicted value of EVE for each variant.\r\n — EVE_Final","title":"Add the predicted value of EVE for each variant.\r\n — EVE_Final","text":"Add predicted value EVE variant \"gene name_Target Pathogenic_finalpredict.csv\".","code":""},{"path":"/reference/EVE_Final.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add the predicted value of EVE for each variant.\r\n — EVE_Final","text":"","code":"EVE_Final(file_name, EVE_file_name)"},{"path":"/reference/EVE_Final.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add the predicted value of EVE for each variant.\r\n — EVE_Final","text":"file_name Path \"gene name_Target Pathogenic_finalpredict.csv\" file output MOVA function EVE_file_name EVE variant files targeted genes. files available https://evemodel.org/.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"/reference/EVE_Final.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add the predicted value of EVE for each variant.\r\n — EVE_Final","text":"Yuya Hatano","code":""},{"path":[]},{"path":[]},{"path":"/reference/EVE_Final.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add the predicted value of EVE for each variant.\r\n — EVE_Final","text":"","code":"Hgmd_divide(\"./source/TARDBP.csv\") #> Error in fread(hgmd_file_name): File './source/TARDBP.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_gnomAD_file(\"./source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv\", \"./source/TARDBP_gnomAD.csv\") #> Error in fread(input_file_name): File './source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_variant_data(\"../CADD_REVEL/AlphScore_final.tsv\", \"./source/TARDBP.csv\", \"./source/TARDBP_gnomAD.csv\", \"Q13148\", \"TARDBP\", \"./source/TARDBPvariantdata.csv\") #> Error in fread(AlphScore_final_file): File '../CADD_REVEL/AlphScore_final.tsv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_polyphen_data(\"../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1\",\"./source/TARDBPvariantdata.csv\", \"TARDBP_alph.csv\",  \"Q13148\",  11012654, 11025492 ,\"./source/TARDBPvariantdatapol.csv\", \"./source/TARDBP_alphpol.csv\") #> Error in fread(dbNSFP4.3a_final_file): File '../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_final_variant_file(\"./source/TARDBP_alphpol.csv\",\"./source/TARDBP_alphpol2.csv\") #> Error in fread(input_file_name): File './source/TARDBP_alphpol.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA(\"./source/Q13148.fa\", \"TARDBP\", \"./source/AF-Q13148-F1-model_v2.pdb\",\"./source/TARDBP_alphpol2.csv\", \"./source/TARDBPvariantdatapol.csv\") #> Warning: data set 'BLOSUM62' not found #> Warning: cannot open file './source/Q13148.fa': No such file or directory #> Error in file(con, \"r\"): cannot open the connection EVE_Final(\"TARDBP_Target_finalpredict.csv\", \"../dementia/EVE_all_data/variant_files/TADBP_HUMAN.csv\") #> Error in fread(file_name): File 'TARDBP_Target_finalpredict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference'  ## The function is currently defined as function (file_name, EVE_file_name)  {     df <- fread(file_name)     y <- fread(EVE_file_name)     df[, `:=`(EVE, NA)]     df[, `:=`(EVE_class, NA)]     df$Pos <- as.integer(substr(df$change, 2, nchar(df$change) -          1))     for (i in 1:nrow(df)) {         df$EVE[i] <- y[(y$position == df$Pos[i]) & (y$mt_aa ==              df$aaalt[i])]$EVE_scores_ASM         df$EVE_class[i] <- y[(y$position == df$Pos[i]) & (y$mt_aa ==              df$aaalt[i])]$EVE_classes_75_pct_retained_ASM     }     fwrite(df, file_name)   } #> function (file_name, EVE_file_name)  #> { #>     df <- fread(file_name) #>     y <- fread(EVE_file_name) #>     df[, `:=`(EVE, NA)] #>     df[, `:=`(EVE_class, NA)] #>     df$Pos <- as.integer(substr(df$change, 2, nchar(df$change) -  #>         1)) #>     for (i in 1:nrow(df)) { #>         df$EVE[i] <- y[(y$position == df$Pos[i]) & (y$mt_aa ==  #>             df$aaalt[i])]$EVE_scores_ASM #>         df$EVE_class[i] <- y[(y$position == df$Pos[i]) & (y$mt_aa ==  #>             df$aaalt[i])]$EVE_classes_75_pct_retained_ASM #>     } #>     fwrite(df, file_name) #>   } #> <environment: 0x0000011a8b791880>"},{"path":"/reference/EVE_MOVA.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to compare MOVA and EVE.\r\n — EVE_MOVA","title":"Function to compare MOVA and EVE.\r\n — EVE_MOVA","text":"function plots ROC curve EVE gene returns AUC.","code":""},{"path":"/reference/EVE_MOVA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to compare MOVA and EVE.\r\n — EVE_MOVA","text":"","code":"EVE_MOVA(file_name, EVE_file_name, phenotype = \"Target\")"},{"path":"/reference/EVE_MOVA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to compare MOVA and EVE.\r\n — EVE_MOVA","text":"file_name \"gene name_Target Pathogenic_predict.csv\" file output MOVA function EVE_file_name EVE variant files targeted genes. files available https://evemodel.org/. phenotype Specify \"Target\" want positive variant Target variant , \"Pathogenic\" want include Pathogenic variant well. default \"Target\".","code":""},{"path":[]},{"path":"/reference/EVE_MOVA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to compare MOVA and EVE.\r\n — EVE_MOVA","text":"Return AUC gene EVE.","code":""},{"path":[]},{"path":"/reference/EVE_MOVA.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function to compare MOVA and EVE.\r\n — EVE_MOVA","text":"Yuya Hatano","code":""},{"path":[]},{"path":[]},{"path":"/reference/EVE_MOVA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to compare MOVA and EVE.\r\n — EVE_MOVA","text":"","code":"Hgmd_divide(\"./source/TARDBP.csv\") #> Error in fread(hgmd_file_name): File './source/TARDBP.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_gnomAD_file(\"./source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv\", \"./source/TARDBP_gnomAD.csv\") #> Error in fread(input_file_name): File './source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_variant_data(\"../CADD_REVEL/AlphScore_final.tsv\", \"./source/TARDBP.csv\", \"./source/TARDBP_gnomAD.csv\", \"Q13148\", \"TARDBP\", \"./source/TARDBPvariantdata.csv\") #> Error in fread(AlphScore_final_file): File '../CADD_REVEL/AlphScore_final.tsv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_polyphen_data(\"../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1\",\"./source/TARDBPvariantdata.csv\", \"TARDBP_alph.csv\",  \"Q13148\",  11012654, 11025492 ,\"./source/TARDBPvariantdatapol.csv\", \"./source/TARDBP_alphpol.csv\") #> Error in fread(dbNSFP4.3a_final_file): File '../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_final_variant_file(\"./source/TARDBP_alphpol.csv\",\"./source/TARDBP_alphpol2.csv\") #> Error in fread(input_file_name): File './source/TARDBP_alphpol.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA(\"./source/Q13148.fa\", \"TARDBP\", \"./source/AF-Q13148-F1-model_v2.pdb\",\"./source/TARDBP_alphpol2.csv\", \"./source/TARDBPvariantdatapol.csv\") #> Warning: data set 'BLOSUM62' not found #> Warning: cannot open file './source/Q13148.fa': No such file or directory #> Error in file(con, \"r\"): cannot open the connection PolyPhen_MOVA(\"TARDBP_Target_predict.csv\") #> Error in fread(file_name): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' AlphScore_MOVA(\"TARDBP_Target_predict.csv\") #> Error in fread(file_name): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' CADD_MOVA(\"TARDBP_Target_predict.csv\") #> Error in fread(file_name): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' REVEL_MOVA(\"TARDBP_Target_predict.csv\") #> Error in fread(file_name): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' EVE_MOVA(\"TARDBP_Target_predict.csv\", \"../dementia/EVE_all_data/variant_files/TADBP_HUMAN.csv\") #> Error in fread(file_name): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference'  ## The function is currently defined as function (file_name, EVE_file_name, phenotype = \"Target\")  {     df <- fread(file_name)     y <- fread(EVE_file_name)     if (phenotype == \"Target\") {         df <- df[(df$Type == \"Target\") | (df$Type == \"Ctrl\"),              ]     }     df[, `:=`(EVE, NA)]     df[, `:=`(EVE_class, NA)]     df$Pos <- as.integer(substr(df$change, 2, nchar(df$change) -          1))     for (i in 1:nrow(df)) {         df$EVE[i] <- y[(y$position == df$Pos[i]) & (y$mt_aa ==              df$aaalt[i])]$EVE_scores_ASM         df$EVE_class[i] <- y[(y$position == df$Pos[i]) & (y$mt_aa ==              df$aaalt[i])]$EVE_classes_75_pct_retained_ASM     }     fwrite(df, file_name)     df$predict <- df$EVE     if (phenotype == \"Target\") {         df$result <- df$Type2     }     else {         df$result <- df$Type3     }     df <- subset(df, !(is.na(df$predict)))     pred <- prediction(df$predict, df$result)     perf <- performance(pred, \"tpr\", \"fpr\")     plot(perf, col = \"gray\", add = TRUE)     auc.tmp <- performance(pred, \"auc\")     auc <- as.numeric(auc.tmp@y.values)     return(auc)   } #> function (file_name, EVE_file_name, phenotype = \"Target\")  #> { #>     df <- fread(file_name) #>     y <- fread(EVE_file_name) #>     if (phenotype == \"Target\") { #>         df <- df[(df$Type == \"Target\") | (df$Type == \"Ctrl\"),  #>             ] #>     } #>     df[, `:=`(EVE, NA)] #>     df[, `:=`(EVE_class, NA)] #>     df$Pos <- as.integer(substr(df$change, 2, nchar(df$change) -  #>         1)) #>     for (i in 1:nrow(df)) { #>         df$EVE[i] <- y[(y$position == df$Pos[i]) & (y$mt_aa ==  #>             df$aaalt[i])]$EVE_scores_ASM #>         df$EVE_class[i] <- y[(y$position == df$Pos[i]) & (y$mt_aa ==  #>             df$aaalt[i])]$EVE_classes_75_pct_retained_ASM #>     } #>     fwrite(df, file_name) #>     df$predict <- df$EVE #>     if (phenotype == \"Target\") { #>         df$result <- df$Type2 #>     } #>     else { #>         df$result <- df$Type3 #>     } #>     df <- subset(df, !(is.na(df$predict))) #>     pred <- prediction(df$predict, df$result) #>     perf <- performance(pred, \"tpr\", \"fpr\") #>     plot(perf, col = \"gray\", add = TRUE) #>     auc.tmp <- performance(pred, \"auc\") #>     auc <- as.numeric(auc.tmp@y.values) #>     return(auc) #>   } #> <environment: 0x0000011a8f093d50>"},{"path":"/reference/Hgmd_divide.html","id":null,"dir":"Reference","previous_headings":"","what":"Creation of Hgmd files\r\n — Hgmd_divide","title":"Creation of Hgmd files\r\n — Hgmd_divide","text":"Create positive variant file Hgmd data.","code":""},{"path":"/reference/Hgmd_divide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creation of Hgmd files\r\n — Hgmd_divide","text":"","code":"Hgmd_divide(hgmd_file_name)"},{"path":"/reference/Hgmd_divide.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creation of Hgmd files\r\n — Hgmd_divide","text":"hgmd_file_name Path hgmd file name","code":""},{"path":"/reference/Hgmd_divide.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creation of Hgmd files\r\n — Hgmd_divide","text":"Based HGMD data, list amino acid changes (column: HGVSprotein), VCF (column: VCF), DM DM HGMD, DMp  DM? (column: possible), Pathogenic pathogenic target phenotype, Target target phenotype(column: Type) variant save . processed Hgmd_divide can processed Edit_variant_data.","code":""},{"path":[]},{"path":[]},{"path":"/reference/Hgmd_divide.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Creation of Hgmd files\r\n — Hgmd_divide","text":"Yuya Hatano","code":""},{"path":[]},{"path":[]},{"path":"/reference/Hgmd_divide.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creation of Hgmd files\r\n — Hgmd_divide","text":"","code":"Hgmd_divide(\"./source/TARDBP.csv\") #> Error in fread(hgmd_file_name): File './source/TARDBP.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_gnomAD_file(\"./source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv\", \"./source/TARDBP_gnomAD.csv\") #> Error in fread(input_file_name): File './source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_variant_data(\"../CADD_REVEL/AlphScore_final.tsv\", \"./source/TARDBP.csv\", \"./source/TARDBP_gnomAD.csv\", \"Q13148\", \"TARDBP\", \"./source/TARDBPvariantdata.csv\") #> Error in fread(AlphScore_final_file): File '../CADD_REVEL/AlphScore_final.tsv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_polyphen_data(\"../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1\",\"./source/TARDBPvariantdata.csv\", \"TARDBP_alph.csv\",  \"Q13148\",  11012654, 11025492 ,\"./source/TARDBPvariantdatapol.csv\", \"./source/TARDBP_alphpol.csv\") #> Error in fread(dbNSFP4.3a_final_file): File '../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_final_variant_file(\"./source/TARDBP_alphpol.csv\",\"./source/TARDBP_alphpol2.csv\") #> Error in fread(input_file_name): File './source/TARDBP_alphpol.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA(\"./source/Q13148.fa\", \"TARDBP\", \"./source/AF-Q13148-F1-model_v2.pdb\",\"./source/TARDBP_alphpol2.csv\", \"./source/TARDBPvariantdatapol.csv\") #> Warning: data set 'BLOSUM62' not found #> Warning: cannot open file './source/Q13148.fa': No such file or directory #> Error in file(con, \"r\"): cannot open the connection  ## The function is currently defined as function (hgmd_file_name)  {     x <- fread(hgmd_file_name)     x <- x %>% separate(VCF, c(\"buf1\", \"buf2\"), sep = \":\")     x <- x %>% separate(buf2, c(\"buf3\", \"Alternate\"), sep = \"/\")     x$Chromosome <- str_sub(x$buf1, 4, -1)     x$Position <- str_sub(x$buf3, 1, -2)     x$Reference <- str_sub(x$buf3, -1, -1)     x[, `:=`(buf1, NULL)]     x[, `:=`(buf3, NULL)]     fwrite(x, hgmd_file_name)   } #> function (hgmd_file_name)  #> { #>     x <- fread(hgmd_file_name) #>     x <- x %>% separate(VCF, c(\"buf1\", \"buf2\"), sep = \":\") #>     x <- x %>% separate(buf2, c(\"buf3\", \"Alternate\"), sep = \"/\") #>     x$Chromosome <- str_sub(x$buf1, 4, -1) #>     x$Position <- str_sub(x$buf3, 1, -2) #>     x$Reference <- str_sub(x$buf3, -1, -1) #>     x[, `:=`(buf1, NULL)] #>     x[, `:=`(buf3, NULL)] #>     fwrite(x, hgmd_file_name) #>   } #> <environment: 0x0000011a816a0900>"},{"path":"/reference/MOVA-package.html","id":null,"dir":"Reference","previous_headings":"","what":"a method for evaluating the pathogenicity of missense variants using AlphaFold2\r\na method for evaluating the pathogenicity of missense variants using AlphaFold2 — MOVA-package","title":"a method for evaluating the pathogenicity of missense variants using AlphaFold2\r\na method for evaluating the pathogenicity of missense variants using AlphaFold2 — MOVA-package","text":"(maybe one line)","code":""},{"path":"/reference/MOVA-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"a method for evaluating the pathogenicity of missense variants using AlphaFold2\r\na method for evaluating the pathogenicity of missense variants using AlphaFold2 — MOVA-package","text":"DESCRIPTION file: package yet installed build time.   Index:  package yet installed build time.  ~~ overview use package, including important ~~ ~~ functions ~~","code":""},{"path":"/reference/MOVA-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"a method for evaluating the pathogenicity of missense variants using AlphaFold2\r\na method for evaluating the pathogenicity of missense variants using AlphaFold2 — MOVA-package","text":"NA Maintainer: Yuya Hatano <hatanoyuya@gmail.com>","code":""},{"path":"/reference/MOVA-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"a method for evaluating the pathogenicity of missense variants using AlphaFold2\r\na method for evaluating the pathogenicity of missense variants using AlphaFold2 — MOVA-package","text":"~~ Literature references background information ~~","code":""},{"path":[]},{"path":[]},{"path":"/reference/MOVA.html","id":null,"dir":"Reference","previous_headings":"","what":"Derivation of predictions and ROC curves by MOVA\r\n — MOVA","title":"Derivation of predictions and ROC curves by MOVA\r\n — MOVA","text":"Conduct MOVA. training performed random forest, evaluation performed using Stratified 5-fold cross validation method, repeated five times reduce variability one execution another. ROC curve used evaluate results. addition, final predictions calculated possible nonsynonymous variants.","code":""},{"path":"/reference/MOVA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derivation of predictions and ROC curves by MOVA\r\n — MOVA","text":"","code":"MOVA(fasta_file_name, protein_name, pdb_file_name, final_predict_input_file, variant_file, phenotype = \"Target\")"},{"path":"/reference/MOVA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derivation of predictions and ROC curves by MOVA\r\n — MOVA","text":"fasta_file_name fasta file records amino acid sequence information target protein. first line describe >Protein, amino acid sequence begin second line. protein_name Name target protein/gene. Used name file exported. pdb_file_name AlphaFold2 prediction results pdb file target protein. use data AlphaFold2 Protein Structure Database. (https://alphafold.ebi.ac.uk/) final_predict_input_file File output Edit_final_variant_file function variant_file export_file_name1 Edit_polyphen_data function phenotype Specify \"Target\" want positive variant Target variant , \"Pathogenic\" want include Pathogenic variant well. default \"Target\".","code":""},{"path":"/reference/MOVA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Derivation of predictions and ROC curves by MOVA\r\n — MOVA","text":"Draw ROC curve MOVA (red). MOVA evaluated using Stratified 5-fold cross validation method, model repeated five times. average predicted values (5F-MV value: 5-fold MOVA value) added \"MOVA_predict\" column \"gene name_Target Pathogenic_predict.csv\" file. final MOVA predicted value (MOVA value) added \"MOVA_predict\" column \"protein/gene name_Target Pathogenic_finalpredict.csv\". \"protein/gene name_Target Pathogenic_result.csv\" contains Cutoff value (Youden index) fold (Column: Cutoff), number positive variants gene used analysis (Column: positive_variant_num), number negative variants (Column: negative_variant_num), AUC fold MOVA (Column: AUC), cvAUC MOVA (Column: cvauc). file required redrawing MOVA_redraw function MOVA output \"protein/gene name_Target Pathogenic_predict_orig.csv\".","code":""},{"path":"/reference/MOVA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derivation of predictions and ROC curves by MOVA\r\n — MOVA","text":"data.frame containing Cutoff value (Youden index) fold (Column: Cutoff), number positive variants gene used analysis (Column: positive_variant_num), number negative variants (Column: negative_variant_num), AUC fold MOVA (Column: AUC), cvAUC MOVA (Column: cvauc). data output \"protein/gene name_Target Pathogenic_result.csv\".","code":""},{"path":[]},{"path":"/reference/MOVA.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Derivation of predictions and ROC curves by MOVA\r\n — MOVA","text":"Yuya Hatano","code":""},{"path":[]},{"path":[]},{"path":"/reference/MOVA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Derivation of predictions and ROC curves by MOVA\r\n — MOVA","text":"","code":"Hgmd_divide(\"./source/TARDBP.csv\") #> Error in fread(hgmd_file_name): File './source/TARDBP.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_gnomAD_file(\"./source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv\", \"./source/TARDBP_gnomAD.csv\") #> Error in fread(input_file_name): File './source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_variant_data(\"../CADD_REVEL/AlphScore_final.tsv\", \"./source/TARDBP.csv\", \"./source/TARDBP_gnomAD.csv\", \"Q13148\", \"TARDBP\", \"./source/TARDBPvariantdata.csv\") #> Error in fread(AlphScore_final_file): File '../CADD_REVEL/AlphScore_final.tsv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_polyphen_data(\"../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1\",\"./source/TARDBPvariantdata.csv\", \"TARDBP_alph.csv\",  \"Q13148\",  11012654, 11025492 ,\"./source/TARDBPvariantdatapol.csv\", \"./source/TARDBP_alphpol.csv\") #> Error in fread(dbNSFP4.3a_final_file): File '../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_final_variant_file(\"./source/TARDBP_alphpol.csv\",\"./source/TARDBP_alphpol2.csv\") #> Error in fread(input_file_name): File './source/TARDBP_alphpol.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA(\"./source/Q13148.fa\", \"TARDBP\", \"./source/AF-Q13148-F1-model_v2.pdb\",\"./source/TARDBP_alphpol2.csv\", \"./source/TARDBPvariantdatapol.csv\") #> Warning: data set 'BLOSUM62' not found #> Warning: cannot open file './source/Q13148.fa': No such file or directory #> Error in file(con, \"r\"): cannot open the connection  ## The function is currently defined as function (fasta_file_name, protein_name, pdb_file_name, final_predict_input_file,      variant_file, phenotype = \"Target\")  {     data(\"BLOSUM62\")     amino_code1 <- c(\"A\", \"R\", \"N\", \"D\", \"C\", \"Q\", \"E\", \"G\",          \"I\", \"L\", \"K\", \"M\", \"F\", \"P\", \"S\", \"T\", \"W\", \"Y\", \"V\",          \"H\")     Protein <- read.fasta(file = fasta_file_name, seqtype = \"AA\")     Proteinr <- Protein$Protein[1:length(Protein$Protein)]     Protein3D <- read.pdb(pdb_file_name)     Protein3Dr <- as.data.frame(Protein3D$atom)     Protein3Dp <- Protein3Dr %>% group_by(resno) %>% summarise(x = mean(x),          y = mean(y), z = mean(z), b = mean(b))     D <- fread(variant_file)     D$ID <- paste(D$Chromosome, D$Position, D$Reference, D$Alternate,          sep = \":\")     D <- D[(D$possible != \"DMp\") | (is.na(D$possible)), ]     if (phenotype == \"Target\") {         D <- D[(D$Type == \"Target\") | (D$Type == \"Ctrl\"), ]     }     D[, `:=`(possible, NULL)]     D$Pos <- as.integer(substr(D$change, 2, nchar(D$change) -          1))     D$ss <- substr(D$change, nchar(D$change), nchar(D$change))     fpredict <- data.frame(matrix(rep(NA, 3), nrow = 1))[numeric(0),          ]     colnames(fpredict) <- c(\"change\", \"predict\", \"n\")     imp.rfa <- data.frame(matrix(rep(NA, 3), nrow = 1))[numeric(0),          ]     colnames(imp.rfa) <- c(\"name\", \"IncNodePurity\", \"n\")     for (i in 1:nrow(D)) {         D$con[i] <- BLOSUM62[Proteinr[D$Pos[i]], Proteinr[D$Pos[i]]] -              BLOSUM62[Proteinr[D$Pos[i]], D$ss[i]]         D$x[i] <- Protein3Dp$x[D$Pos[i]]         D$y[i] <- Protein3Dp$y[D$Pos[i]]         D$z[i] <- Protein3Dp$z[D$Pos[i]]         D$b[i] <- Protein3Dp$b[D$Pos[i]]     }     final_data <- fread(final_predict_input_file)     final_data$ID <- paste(final_data$Chromosome, final_data$Position,          final_data$Reference, final_data$Alternate, final_data$aaref,          final_data$Pos, final_data$aaalt, sep = \":\")     for (i in 1:nrow(final_data)) {         final_data$con[i] <- BLOSUM62[Proteinr[final_data$Pos[i]],              Proteinr[final_data$Pos[i]]] - BLOSUM62[Proteinr[final_data$Pos[i]],              final_data$aaalt[i]]         final_data$x[i] <- Protein3Dp$x[final_data$Pos[i]]         final_data$y[i] <- Protein3Dp$y[final_data$Pos[i]]         final_data$z[i] <- Protein3Dp$z[final_data$Pos[i]]         final_data$b[i] <- Protein3Dp$b[final_data$Pos[i]]     }     df <- data.frame(matrix(rep(NA, 6), nrow = 1))[numeric(0),          ]     colnames(df) <- c(\"ID\", \"result\", \"predict\", \"change\", \"iter1\",          \"iter2\")     if (phenotype == \"Target\") {         D$result <- D$Type2     }     else {         D$result <- D$Type3     }     oldw <- getOption(\"warn\")     options(warn = -1)     D <- rowid_to_column(D, var = \"id2\")     for (i2 in 1:5) {         D$id3 <- D$id2         j <- 5         dat1 <- D %>% stratified(., group = \"result\", size = 1/j)         dat1$iter <- 1         datzan <- D[-dat1$id2, ]         for (i in 2:j) {             datzan[, c(\"id2\")] <- list(NULL)             datzan <- rowid_to_column(datzan, var = \"id2\")             if (i != j) {                 dat2 <- datzan %>% stratified(., group = \"result\",                    size = 1/(j - i + 1))             }             else {                 dat2 <- datzan             }             dat2$iter <- i             datzan <- datzan[-dat2$id2, ]             dat1 <- rbind(dat1, dat2)         }         dat1[, c(\"id2\")] <- list(NULL)         dat1 <- rowid_to_column(dat1, var = \"id2\")         for (i in 1:j) {             val <- dat1[dat1$iter == i, ]             train.data <- dat1[-val$id2, ]             rf <- randomForest(result ~ con + x + y + z + b,                  train.data, importance = TRUE)             imp.rf <- importance(rf)             f <- data.frame(ID = val$ID, result = val$result,                  predict = predict(rf, val), change = val$change,                  iter1 = i, iter2 = i2)             df <- rbind(df, f)             f <- data.frame(name = rownames(imp.rf), IncNodePurity = imp.rf,                  n = i)             imp.rfa <- rbind(imp.rfa, f)         }     }     for (i in 1:30) {         rf <- randomForest(result ~ con + x + y + z + b, D)         f <- data.frame(ID = final_data$ID, predict = predict(rf,              final_data), n = i)         fpredict <- rbind(fpredict, f)     }     options(warn = oldw)     fpredictb <- fpredict %>% group_by(ID) %>% summarise(MOVA_predict = mean(predict))     imp.rfb <- imp.rfa %>% group_by(name) %>% summarise(IncMSE = mean(IncNodePurity..IncMSE),          IncNodePurity = mean(IncNodePurity.IncNodePurity))     ID <- str_split(fpredictb$ID, pattern = \":\", simplify = TRUE)     for (i in 1:nrow(fpredictb)) {         if (ID[i, 5] == ID[i, 7]) {             fpredictb$predict[i] = 0         }     }     final_data <- merge(fpredictb, final_data)     fwrite(final_data, paste(protein_name, phenotype, \"finalpredict.csv\",          sep = \"_\"))     fwrite(imp.rfb, paste(protein_name, phenotype, \"importance.csv\",          sep = \"_\"))     df$iter3 <- df$iter1 + (df$iter2 * 5)     out <- cvAUC(df$predict, df$result, label.ordering = NULL,          folds = df$iter3)     plot(out$perf, col = \"red\", avg = \"vertical\")     cvauc <- out$cvAUC     YI2 <- data.frame(matrix(rep(NA, 5), nrow = 1))[numeric(0),          ]     colnames(YI2) <- c(\"Cutoff\", \"positive_variant_num\", \"negative_variant_num\",          \"AUC\", \"cvauc\")     for (i in 6:30) {         pred <- prediction(df[df$iter3 == i, ]$predict, df[df$iter3 ==              i, ]$result)         auc.tmp <- performance(pred, \"auc\")         auc <- as.numeric(auc.tmp@y.values)         tab <- data.frame(Cutoff = unlist(pred@cutoffs), TP = unlist(pred@tp),              FP = unlist(pred@fp), FN = unlist(pred@fn), TN = unlist(pred@tn),              Sensitivity = unlist(pred@tp)/(unlist(pred@tp) +                  unlist(pred@fn)), Specificity = unlist(pred@tn)/(unlist(pred@fp) +                  unlist(pred@tn)), Accuracy = ((unlist(pred@tp) +                  unlist(pred@tn))/nrow(df)), Precision = (unlist(pred@tp)/(unlist(pred@tp) +                  unlist(pred@fp))))         tab$Youden <- tab$Sensitivity + tab$Specificity - 1         YI <- tab[order(tab$Youden, decreasing = T), ]         YI <- data.frame(Cutoff = YI$Cutoff[1], positive_variant_num = c(nrow(df[(df$result ==              1) & (df$iter2 == 1), ])), negative_variant_num = c(nrow(df[(df$result ==              0) & (df$iter2 == 1), ])), AUC = c(auc), cvauc = c(cvauc))         YI2 <- rbind(YI2, YI)     }     fwrite(YI2, paste(protein_name, phenotype, \"result.csv\",          sep = \"_\"))     df2 <- df %>% group_by(ID) %>% summarise(MOVA_predict = mean(predict))     D[, c(\"result\")] <- list(NULL)     fwrite(merge(D, df2), paste(protein_name, phenotype, \"predict.csv\",          sep = \"_\"))     fwrite(df, paste(protein_name, phenotype, \"predict_orig.csv\",          sep = \"_\"))     return(YI2)   } #> function (fasta_file_name, protein_name, pdb_file_name, final_predict_input_file,  #>     variant_file, phenotype = \"Target\")  #> { #>     data(\"BLOSUM62\") #>     amino_code1 <- c(\"A\", \"R\", \"N\", \"D\", \"C\", \"Q\", \"E\", \"G\",  #>         \"I\", \"L\", \"K\", \"M\", \"F\", \"P\", \"S\", \"T\", \"W\", \"Y\", \"V\",  #>         \"H\") #>     Protein <- read.fasta(file = fasta_file_name, seqtype = \"AA\") #>     Proteinr <- Protein$Protein[1:length(Protein$Protein)] #>     Protein3D <- read.pdb(pdb_file_name) #>     Protein3Dr <- as.data.frame(Protein3D$atom) #>     Protein3Dp <- Protein3Dr %>% group_by(resno) %>% summarise(x = mean(x),  #>         y = mean(y), z = mean(z), b = mean(b)) #>     D <- fread(variant_file) #>     D$ID <- paste(D$Chromosome, D$Position, D$Reference, D$Alternate,  #>         sep = \":\") #>     D <- D[(D$possible != \"DMp\") | (is.na(D$possible)), ] #>     if (phenotype == \"Target\") { #>         D <- D[(D$Type == \"Target\") | (D$Type == \"Ctrl\"), ] #>     } #>     D[, `:=`(possible, NULL)] #>     D$Pos <- as.integer(substr(D$change, 2, nchar(D$change) -  #>         1)) #>     D$ss <- substr(D$change, nchar(D$change), nchar(D$change)) #>     fpredict <- data.frame(matrix(rep(NA, 3), nrow = 1))[numeric(0),  #>         ] #>     colnames(fpredict) <- c(\"change\", \"predict\", \"n\") #>     imp.rfa <- data.frame(matrix(rep(NA, 3), nrow = 1))[numeric(0),  #>         ] #>     colnames(imp.rfa) <- c(\"name\", \"IncNodePurity\", \"n\") #>     for (i in 1:nrow(D)) { #>         D$con[i] <- BLOSUM62[Proteinr[D$Pos[i]], Proteinr[D$Pos[i]]] -  #>             BLOSUM62[Proteinr[D$Pos[i]], D$ss[i]] #>         D$x[i] <- Protein3Dp$x[D$Pos[i]] #>         D$y[i] <- Protein3Dp$y[D$Pos[i]] #>         D$z[i] <- Protein3Dp$z[D$Pos[i]] #>         D$b[i] <- Protein3Dp$b[D$Pos[i]] #>     } #>     final_data <- fread(final_predict_input_file) #>     final_data$ID <- paste(final_data$Chromosome, final_data$Position,  #>         final_data$Reference, final_data$Alternate, final_data$aaref,  #>         final_data$Pos, final_data$aaalt, sep = \":\") #>     for (i in 1:nrow(final_data)) { #>         final_data$con[i] <- BLOSUM62[Proteinr[final_data$Pos[i]],  #>             Proteinr[final_data$Pos[i]]] - BLOSUM62[Proteinr[final_data$Pos[i]],  #>             final_data$aaalt[i]] #>         final_data$x[i] <- Protein3Dp$x[final_data$Pos[i]] #>         final_data$y[i] <- Protein3Dp$y[final_data$Pos[i]] #>         final_data$z[i] <- Protein3Dp$z[final_data$Pos[i]] #>         final_data$b[i] <- Protein3Dp$b[final_data$Pos[i]] #>     } #>     df <- data.frame(matrix(rep(NA, 6), nrow = 1))[numeric(0),  #>         ] #>     colnames(df) <- c(\"ID\", \"result\", \"predict\", \"change\", \"iter1\",  #>         \"iter2\") #>     if (phenotype == \"Target\") { #>         D$result <- D$Type2 #>     } #>     else { #>         D$result <- D$Type3 #>     } #>     oldw <- getOption(\"warn\") #>     options(warn = -1) #>     D <- rowid_to_column(D, var = \"id2\") #>     for (i2 in 1:5) { #>         D$id3 <- D$id2 #>         j <- 5 #>         dat1 <- D %>% stratified(., group = \"result\", size = 1/j) #>         dat1$iter <- 1 #>         datzan <- D[-dat1$id2, ] #>         for (i in 2:j) { #>             datzan[, c(\"id2\")] <- list(NULL) #>             datzan <- rowid_to_column(datzan, var = \"id2\") #>             if (i != j) { #>                 dat2 <- datzan %>% stratified(., group = \"result\",  #>                   size = 1/(j - i + 1)) #>             } #>             else { #>                 dat2 <- datzan #>             } #>             dat2$iter <- i #>             datzan <- datzan[-dat2$id2, ] #>             dat1 <- rbind(dat1, dat2) #>         } #>         dat1[, c(\"id2\")] <- list(NULL) #>         dat1 <- rowid_to_column(dat1, var = \"id2\") #>         for (i in 1:j) { #>             val <- dat1[dat1$iter == i, ] #>             train.data <- dat1[-val$id2, ] #>             rf <- randomForest(result ~ con + x + y + z + b,  #>                 train.data, importance = TRUE) #>             imp.rf <- importance(rf) #>             f <- data.frame(ID = val$ID, result = val$result,  #>                 predict = predict(rf, val), change = val$change,  #>                 iter1 = i, iter2 = i2) #>             df <- rbind(df, f) #>             f <- data.frame(name = rownames(imp.rf), IncNodePurity = imp.rf,  #>                 n = i) #>             imp.rfa <- rbind(imp.rfa, f) #>         } #>     } #>     for (i in 1:30) { #>         rf <- randomForest(result ~ con + x + y + z + b, D) #>         f <- data.frame(ID = final_data$ID, predict = predict(rf,  #>             final_data), n = i) #>         fpredict <- rbind(fpredict, f) #>     } #>     options(warn = oldw) #>     fpredictb <- fpredict %>% group_by(ID) %>% summarise(MOVA_predict = mean(predict)) #>     imp.rfb <- imp.rfa %>% group_by(name) %>% summarise(IncMSE = mean(IncNodePurity..IncMSE),  #>         IncNodePurity = mean(IncNodePurity.IncNodePurity)) #>     ID <- str_split(fpredictb$ID, pattern = \":\", simplify = TRUE) #>     for (i in 1:nrow(fpredictb)) { #>         if (ID[i, 5] == ID[i, 7]) { #>             fpredictb$predict[i] = 0 #>         } #>     } #>     final_data <- merge(fpredictb, final_data) #>     fwrite(final_data, paste(protein_name, phenotype, \"finalpredict.csv\",  #>         sep = \"_\")) #>     fwrite(imp.rfb, paste(protein_name, phenotype, \"importance.csv\",  #>         sep = \"_\")) #>     df$iter3 <- df$iter1 + (df$iter2 * 5) #>     out <- cvAUC(df$predict, df$result, label.ordering = NULL,  #>         folds = df$iter3) #>     plot(out$perf, col = \"red\", avg = \"vertical\") #>     cvauc <- out$cvAUC #>     YI2 <- data.frame(matrix(rep(NA, 5), nrow = 1))[numeric(0),  #>         ] #>     colnames(YI2) <- c(\"Cutoff\", \"positive_variant_num\", \"negative_variant_num\",  #>         \"AUC\", \"cvauc\") #>     for (i in 6:30) { #>         pred <- prediction(df[df$iter3 == i, ]$predict, df[df$iter3 ==  #>             i, ]$result) #>         auc.tmp <- performance(pred, \"auc\") #>         auc <- as.numeric(auc.tmp@y.values) #>         tab <- data.frame(Cutoff = unlist(pred@cutoffs), TP = unlist(pred@tp),  #>             FP = unlist(pred@fp), FN = unlist(pred@fn), TN = unlist(pred@tn),  #>             Sensitivity = unlist(pred@tp)/(unlist(pred@tp) +  #>                 unlist(pred@fn)), Specificity = unlist(pred@tn)/(unlist(pred@fp) +  #>                 unlist(pred@tn)), Accuracy = ((unlist(pred@tp) +  #>                 unlist(pred@tn))/nrow(df)), Precision = (unlist(pred@tp)/(unlist(pred@tp) +  #>                 unlist(pred@fp)))) #>         tab$Youden <- tab$Sensitivity + tab$Specificity - 1 #>         YI <- tab[order(tab$Youden, decreasing = T), ] #>         YI <- data.frame(Cutoff = YI$Cutoff[1], positive_variant_num = c(nrow(df[(df$result ==  #>             1) & (df$iter2 == 1), ])), negative_variant_num = c(nrow(df[(df$result ==  #>             0) & (df$iter2 == 1), ])), AUC = c(auc), cvauc = c(cvauc)) #>         YI2 <- rbind(YI2, YI) #>     } #>     fwrite(YI2, paste(protein_name, phenotype, \"result.csv\",  #>         sep = \"_\")) #>     df2 <- df %>% group_by(ID) %>% summarise(MOVA_predict = mean(predict)) #>     D[, c(\"result\")] <- list(NULL) #>     fwrite(merge(D, df2), paste(protein_name, phenotype, \"predict.csv\",  #>         sep = \"_\")) #>     fwrite(df, paste(protein_name, phenotype, \"predict_orig.csv\",  #>         sep = \"_\")) #>     return(YI2) #>   } #> <environment: 0x0000011a8918dcf0>"},{"path":"/reference/MOVA_3d_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"MOVA with 'distance to the known pathogenic variant' learned instead of position coordinates\r\n — MOVA_3d_distance","title":"MOVA with 'distance to the known pathogenic variant' learned instead of position coordinates\r\n — MOVA_3d_distance","text":"MOVA 'distance known pathogenic variant' learned instead position coordinates. MOVA_predistance function must performed function.","code":""},{"path":"/reference/MOVA_3d_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MOVA with 'distance to the known pathogenic variant' learned instead of position coordinates\r\n — MOVA_3d_distance","text":"","code":"MOVA_3d_distance(protein_name, MOVA_final_predict_file, MOVA_predict_file, phenotype = \"Target\")"},{"path":"/reference/MOVA_3d_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MOVA with 'distance to the known pathogenic variant' learned instead of position coordinates\r\n — MOVA_3d_distance","text":"protein_name Name target protein/gene. Used name file exported. MOVA_final_predict_file \"gene name_Target Pathogenic_finalpredict.csv\" file output MOVA function. final MOVA_3d_distance predicted values file. MOVA_predict_file \"gene name_Target Pathogenic_predict.csv\" file output MOVA function. phenotype Specify \"Target\" want positive variant Target variant , \"Pathogenic\" want include Pathogenic variant well. default \"Target\".","code":""},{"path":"/reference/MOVA_3d_distance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MOVA with 'distance to the known pathogenic variant' learned instead of position coordinates\r\n — MOVA_3d_distance","text":"Draw ROC curve MOVA_3d_distance (blue). MOVA_3d_distance MOVA features minus location information plus 'distance known pathogenic variant'. MOVA_3d_distance evaluated using Stratified 5-fold cross validation method, model repeated five times. average predicted values added \"MOVA_3d_distance_predict\" column MOVA_predict_file. final MOVA_3d_distance predicted value added \"MOVA_3d_distance_predict\" column MOVA_final_predict_file. \"protein/gene name_Target Pathogenic_result_3d_distance.csv\" contains Cutoff value (Youden index) fold (Column: Cutoff), number positive variants gene used analysis (Column: positive_variant_num), number negative variants (Column: negative_variant_num), AUC fold MOVA_3d_distance (Column: AUC), cvAUC MOVA_3d_distance (Column: cvauc). file required redrawing MOVA_redraw function MOVA_3d_distance output \"protein/gene name_Target Pathogenic_predict_orig_3d_distance.csv\".","code":""},{"path":"/reference/MOVA_3d_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MOVA with 'distance to the known pathogenic variant' learned instead of position coordinates\r\n — MOVA_3d_distance","text":"data.frame containing Cutoff value (Youden index) fold (Column: Cutoff), number positive variants gene used analysis (Column: positive_variant_num), number negative variants (Column: negative_variant_num), AUC fold MOVA_3d_distance (Column: AUC), cvAUC MOVA_3d_distance (Column: cvauc). data output \"protein/gene name_Target Pathogenic_result_3d_distance.csv\".","code":""},{"path":[]},{"path":"/reference/MOVA_3d_distance.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"MOVA with 'distance to the known pathogenic variant' learned instead of position coordinates\r\n — MOVA_3d_distance","text":"Yuya Hatano","code":""},{"path":[]},{"path":[]},{"path":"/reference/MOVA_3d_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MOVA with 'distance to the known pathogenic variant' learned instead of position coordinates\r\n — MOVA_3d_distance","text":"","code":"Hgmd_divide(\"./source/TARDBP.csv\") #> Error in fread(hgmd_file_name): File './source/TARDBP.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_gnomAD_file(\"./source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv\", \"./source/TARDBP_gnomAD.csv\") #> Error in fread(input_file_name): File './source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_variant_data(\"../CADD_REVEL/AlphScore_final.tsv\", \"./source/TARDBP.csv\", \"./source/TARDBP_gnomAD.csv\", \"Q13148\", \"TARDBP\", \"./source/TARDBPvariantdata.csv\") #> Error in fread(AlphScore_final_file): File '../CADD_REVEL/AlphScore_final.tsv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_polyphen_data(\"../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1\",\"./source/TARDBPvariantdata.csv\", \"TARDBP_alph.csv\",  \"Q13148\",  11012654, 11025492 ,\"./source/TARDBPvariantdatapol.csv\", \"./source/TARDBP_alphpol.csv\") #> Error in fread(dbNSFP4.3a_final_file): File '../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_final_variant_file(\"./source/TARDBP_alphpol.csv\",\"./source/TARDBP_alphpol2.csv\") #> Error in fread(input_file_name): File './source/TARDBP_alphpol.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA(\"./source/Q13148.fa\", \"TARDBP\", \"./source/AF-Q13148-F1-model_v2.pdb\",\"./source/TARDBP_alphpol2.csv\", \"./source/TARDBPvariantdatapol.csv\") #> Warning: data set 'BLOSUM62' not found #> Warning: cannot open file './source/Q13148.fa': No such file or directory #> Error in file(con, \"r\"): cannot open the connection MOVA_predistance(\"TARDBP\", \"TARDBP_Target_finalpredict.csv\",\"TARDBP_Target_predict.csv\") #> Error in fread(MOVA_predict_file): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA_3d_distance(\"TARDBP\", \"TARDBP_Target_finalpredict.csv\",\"TARDBP_Target_predict.csv\") #> Error in fread(MOVA_predict_file): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference'  ## The function is currently defined as function (protein_name, MOVA_final_predict_file, MOVA_predict_file,      phenotype = \"Target\")  {     D <- fread(MOVA_predict_file)     D$MOVA_3d_distance_predict <- 0     D[, c(\"MOVA_3d_distance_predict\")] <- list(NULL)     if (phenotype == \"Target\") {         D <- D[(D$Type == \"Target\") | (D$Type == \"Ctrl\"), ]     }     fpredict <- data.frame(matrix(rep(NA, 3), nrow = 1))[numeric(0),          ]     colnames(fpredict) <- c(\"change\", \"predict\", \"n\")     imp.rfa <- data.frame(matrix(rep(NA, 3), nrow = 1))[numeric(0),          ]     colnames(imp.rfa) <- c(\"name\", \"IncNodePurity\", \"n\")     final_data <- fread(MOVA_final_predict_file)     final_data$MOVA_3d_distance_predict <- 0     final_data[, c(\"MOVA_3d_distance_predict\")] <- list(NULL)     df <- data.frame(matrix(rep(NA, 6), nrow = 1))[numeric(0),          ]     colnames(df) <- c(\"ID\", \"re_result\", \"distance\", \"change\",          \"iter1\", \"iter2\")     D$id2 <- 0     D[, c(\"id2\")] <- list(NULL)     if (phenotype == \"Target\") {         D$result <- D$Type2     }     else {         D$result <- D$Type3     }     oldw <- getOption(\"warn\")     options(warn = -1)     D <- rowid_to_column(D, var = \"id2\")     for (i2 in 1:5) {         D$id3 <- D$id2         j <- 5         dat1 <- D %>% stratified(., group = \"result\", size = 1/j)         dat1$iter <- 1         datzan <- D[-dat1$id2, ]         for (i in 2:j) {             datzan[, c(\"id2\")] <- list(NULL)             datzan <- rowid_to_column(datzan, var = \"id2\")             if (i != j) {                 dat2 <- datzan %>% stratified(., group = \"result\",                    size = 1/(j - i + 1))             }             else {                 dat2 <- datzan             }             dat2$iter <- i             datzan <- datzan[-dat2$id2, ]             dat1 <- rbind(dat1, dat2)         }         dat1[, c(\"id2\")] <- list(NULL)         dat1 <- rowid_to_column(dat1, var = \"id2\")         for (i in 1:j) {             val <- dat1[dat1$iter == i, ]             train.data <- dat1[-val$id2, ]             x <- train.data[train.data$result == 1, ]$x             y <- train.data[train.data$result == 1, ]$y             z <- train.data[train.data$result == 1, ]$z             train.data$t_distance <- 0             for (i3 in 1:nrow(train.data)) {                 t_distance <- sqrt((x - train.data[i3]$x) * (x -                    train.data[i3]$x) + (y - train.data[i3]$y) *                    (y - train.data[i3]$y) + (z - train.data[i3]$z) *                    (z - train.data[i3]$z))                 t_distance <- sort(t_distance, decreasing = F)                 if (train.data[i3]$result == 1) {                   train.data[i3]$t_distance <- t_distance[2]                 }                 else {                   train.data[i3]$t_distance <- t_distance[1]                 }             }             rf <- randomForest(result ~ con + t_distance + b,                  train.data, importance = TRUE)             imp.rf <- importance(rf)             x <- train.data[train.data$result == 1, ]$x             y <- train.data[train.data$result == 1, ]$y             z <- train.data[train.data$result == 1, ]$z             val$t_distance <- 0             for (i3 in 1:nrow(val)) {                 val[i3]$t_distance <- min(sqrt((x - val[i3]$x) *                    (x - val[i3]$x) + (y - val[i3]$y) * (y - val[i3]$y) +                    (z - val[i3]$z) * (z - val[i3]$z)))             }             f <- data.frame(ID = val$ID, result = val$result,                  predict = predict(rf, val), change = val$change,                  iter1 = i, iter2 = i2)             df <- rbind(df, f)         }     }     f <- data.frame(name = rownames(imp.rf), IncNodePurity = imp.rf,          n = i)     imp.rfa <- rbind(imp.rfa, f)     x <- D[D$result == 1, ]$x     y <- D[D$result == 1, ]$y     z <- D[D$result == 1, ]$z     D$t_distance <- 0     for (i3 in 1:nrow(D)) {         t_distance <- sqrt((x - D[i3]$x) * (x - D[i3]$x) + (y -              D[i3]$y) * (y - D[i3]$y) + (z - D[i3]$z) * (z - D[i3]$z))         t_distance <- sort(t_distance, decreasing = F)         if (D[i3]$result == 1) {             D[i3]$t_distance <- t_distance[2]         }         else {             D[i3]$t_distance <- t_distance[1]         }     }     for (i in 1:30) {         rf <- randomForest(result ~ con + t_distance + b, D)         f <- data.frame(ID = final_data$ID, predict = predict(rf,              final_data), n = i)         fpredict <- rbind(fpredict, f)     }     options(warn = oldw)     fpredictb <- fpredict %>% group_by(ID) %>% summarise(MOVA_3d_distance_predict = mean(predict))     imp.rfb <- imp.rfa %>% group_by(name) %>% summarise(IncMSE = mean(IncNodePurity..IncMSE),          IncNodePurity = mean(IncNodePurity.IncNodePurity))     final_data <- merge(fpredictb, final_data)     fwrite(final_data, MOVA_final_predict_file)     fwrite(imp.rfb, paste(protein_name, phenotype, \"importance_3d_distance.csv\",          sep = \"_\"))     df$iter3 <- df$iter1 + (df$iter2 * 5)     out <- cvAUC(df$predict, df$result, label.ordering = NULL,          folds = df$iter3)     plot(out$perf, col = \"blue\", avg = \"vertical\", add = TRUE)     cvauc <- out$cvAUC     YI2 <- data.frame(matrix(rep(NA, 5), nrow = 1))[numeric(0),          ]     colnames(YI2) <- c(\"Cutoff\", \"positive_variant_num\", \"negative_variant_num\",          \"AUC\", \"cvauc\")     for (i in 6:30) {         pred <- prediction(df[df$iter3 == i, ]$predict, df[df$iter3 ==              i, ]$result)         auc.tmp <- performance(pred, \"auc\")         auc <- as.numeric(auc.tmp@y.values)         tab <- data.frame(Cutoff = unlist(pred@cutoffs), TP = unlist(pred@tp),              FP = unlist(pred@fp), FN = unlist(pred@fn), TN = unlist(pred@tn),              Sensitivity = unlist(pred@tp)/(unlist(pred@tp) +                  unlist(pred@fn)), Specificity = unlist(pred@tn)/(unlist(pred@fp) +                  unlist(pred@tn)), Accuracy = ((unlist(pred@tp) +                  unlist(pred@tn))/nrow(df)), Precision = (unlist(pred@tp)/(unlist(pred@tp) +                  unlist(pred@fp))))         tab$Youden <- tab$Sensitivity + tab$Specificity - 1         YI <- tab[order(tab$Youden, decreasing = T), ]         YI <- data.frame(Cutoff = YI$Cutoff[1], positive_variant_num = c(nrow(df[(df$result ==              1) & (df$iter2 == 1), ])), negative_variant_num = c(nrow(df[(df$result ==              0) & (df$iter2 == 1), ])), AUC = c(auc), cvauc = c(cvauc))         YI2 <- rbind(YI2, YI)     }     fwrite(YI2, paste(protein_name, phenotype, \"result_3d_distance.csv\",          sep = \"_\"))     df2 <- df %>% group_by(ID) %>% summarise(MOVA_3d_distance_predict = mean(predict))     D[, c(\"result\")] <- list(NULL)     fwrite(merge(D, df2), MOVA_predict_file)     fwrite(df, paste(protein_name, phenotype, \"predict_orig_3d_distance.csv\",          sep = \"_\"))     return(YI2)   } #> function (protein_name, MOVA_final_predict_file, MOVA_predict_file,  #>     phenotype = \"Target\")  #> { #>     D <- fread(MOVA_predict_file) #>     D$MOVA_3d_distance_predict <- 0 #>     D[, c(\"MOVA_3d_distance_predict\")] <- list(NULL) #>     if (phenotype == \"Target\") { #>         D <- D[(D$Type == \"Target\") | (D$Type == \"Ctrl\"), ] #>     } #>     fpredict <- data.frame(matrix(rep(NA, 3), nrow = 1))[numeric(0),  #>         ] #>     colnames(fpredict) <- c(\"change\", \"predict\", \"n\") #>     imp.rfa <- data.frame(matrix(rep(NA, 3), nrow = 1))[numeric(0),  #>         ] #>     colnames(imp.rfa) <- c(\"name\", \"IncNodePurity\", \"n\") #>     final_data <- fread(MOVA_final_predict_file) #>     final_data$MOVA_3d_distance_predict <- 0 #>     final_data[, c(\"MOVA_3d_distance_predict\")] <- list(NULL) #>     df <- data.frame(matrix(rep(NA, 6), nrow = 1))[numeric(0),  #>         ] #>     colnames(df) <- c(\"ID\", \"re_result\", \"distance\", \"change\",  #>         \"iter1\", \"iter2\") #>     D$id2 <- 0 #>     D[, c(\"id2\")] <- list(NULL) #>     if (phenotype == \"Target\") { #>         D$result <- D$Type2 #>     } #>     else { #>         D$result <- D$Type3 #>     } #>     oldw <- getOption(\"warn\") #>     options(warn = -1) #>     D <- rowid_to_column(D, var = \"id2\") #>     for (i2 in 1:5) { #>         D$id3 <- D$id2 #>         j <- 5 #>         dat1 <- D %>% stratified(., group = \"result\", size = 1/j) #>         dat1$iter <- 1 #>         datzan <- D[-dat1$id2, ] #>         for (i in 2:j) { #>             datzan[, c(\"id2\")] <- list(NULL) #>             datzan <- rowid_to_column(datzan, var = \"id2\") #>             if (i != j) { #>                 dat2 <- datzan %>% stratified(., group = \"result\",  #>                   size = 1/(j - i + 1)) #>             } #>             else { #>                 dat2 <- datzan #>             } #>             dat2$iter <- i #>             datzan <- datzan[-dat2$id2, ] #>             dat1 <- rbind(dat1, dat2) #>         } #>         dat1[, c(\"id2\")] <- list(NULL) #>         dat1 <- rowid_to_column(dat1, var = \"id2\") #>         for (i in 1:j) { #>             val <- dat1[dat1$iter == i, ] #>             train.data <- dat1[-val$id2, ] #>             x <- train.data[train.data$result == 1, ]$x #>             y <- train.data[train.data$result == 1, ]$y #>             z <- train.data[train.data$result == 1, ]$z #>             train.data$t_distance <- 0 #>             for (i3 in 1:nrow(train.data)) { #>                 t_distance <- sqrt((x - train.data[i3]$x) * (x -  #>                   train.data[i3]$x) + (y - train.data[i3]$y) *  #>                   (y - train.data[i3]$y) + (z - train.data[i3]$z) *  #>                   (z - train.data[i3]$z)) #>                 t_distance <- sort(t_distance, decreasing = F) #>                 if (train.data[i3]$result == 1) { #>                   train.data[i3]$t_distance <- t_distance[2] #>                 } #>                 else { #>                   train.data[i3]$t_distance <- t_distance[1] #>                 } #>             } #>             rf <- randomForest(result ~ con + t_distance + b,  #>                 train.data, importance = TRUE) #>             imp.rf <- importance(rf) #>             x <- train.data[train.data$result == 1, ]$x #>             y <- train.data[train.data$result == 1, ]$y #>             z <- train.data[train.data$result == 1, ]$z #>             val$t_distance <- 0 #>             for (i3 in 1:nrow(val)) { #>                 val[i3]$t_distance <- min(sqrt((x - val[i3]$x) *  #>                   (x - val[i3]$x) + (y - val[i3]$y) * (y - val[i3]$y) +  #>                   (z - val[i3]$z) * (z - val[i3]$z))) #>             } #>             f <- data.frame(ID = val$ID, result = val$result,  #>                 predict = predict(rf, val), change = val$change,  #>                 iter1 = i, iter2 = i2) #>             df <- rbind(df, f) #>         } #>     } #>     f <- data.frame(name = rownames(imp.rf), IncNodePurity = imp.rf,  #>         n = i) #>     imp.rfa <- rbind(imp.rfa, f) #>     x <- D[D$result == 1, ]$x #>     y <- D[D$result == 1, ]$y #>     z <- D[D$result == 1, ]$z #>     D$t_distance <- 0 #>     for (i3 in 1:nrow(D)) { #>         t_distance <- sqrt((x - D[i3]$x) * (x - D[i3]$x) + (y -  #>             D[i3]$y) * (y - D[i3]$y) + (z - D[i3]$z) * (z - D[i3]$z)) #>         t_distance <- sort(t_distance, decreasing = F) #>         if (D[i3]$result == 1) { #>             D[i3]$t_distance <- t_distance[2] #>         } #>         else { #>             D[i3]$t_distance <- t_distance[1] #>         } #>     } #>     for (i in 1:30) { #>         rf <- randomForest(result ~ con + t_distance + b, D) #>         f <- data.frame(ID = final_data$ID, predict = predict(rf,  #>             final_data), n = i) #>         fpredict <- rbind(fpredict, f) #>     } #>     options(warn = oldw) #>     fpredictb <- fpredict %>% group_by(ID) %>% summarise(MOVA_3d_distance_predict = mean(predict)) #>     imp.rfb <- imp.rfa %>% group_by(name) %>% summarise(IncMSE = mean(IncNodePurity..IncMSE),  #>         IncNodePurity = mean(IncNodePurity.IncNodePurity)) #>     final_data <- merge(fpredictb, final_data) #>     fwrite(final_data, MOVA_final_predict_file) #>     fwrite(imp.rfb, paste(protein_name, phenotype, \"importance_3d_distance.csv\",  #>         sep = \"_\")) #>     df$iter3 <- df$iter1 + (df$iter2 * 5) #>     out <- cvAUC(df$predict, df$result, label.ordering = NULL,  #>         folds = df$iter3) #>     plot(out$perf, col = \"blue\", avg = \"vertical\", add = TRUE) #>     cvauc <- out$cvAUC #>     YI2 <- data.frame(matrix(rep(NA, 5), nrow = 1))[numeric(0),  #>         ] #>     colnames(YI2) <- c(\"Cutoff\", \"positive_variant_num\", \"negative_variant_num\",  #>         \"AUC\", \"cvauc\") #>     for (i in 6:30) { #>         pred <- prediction(df[df$iter3 == i, ]$predict, df[df$iter3 ==  #>             i, ]$result) #>         auc.tmp <- performance(pred, \"auc\") #>         auc <- as.numeric(auc.tmp@y.values) #>         tab <- data.frame(Cutoff = unlist(pred@cutoffs), TP = unlist(pred@tp),  #>             FP = unlist(pred@fp), FN = unlist(pred@fn), TN = unlist(pred@tn),  #>             Sensitivity = unlist(pred@tp)/(unlist(pred@tp) +  #>                 unlist(pred@fn)), Specificity = unlist(pred@tn)/(unlist(pred@fp) +  #>                 unlist(pred@tn)), Accuracy = ((unlist(pred@tp) +  #>                 unlist(pred@tn))/nrow(df)), Precision = (unlist(pred@tp)/(unlist(pred@tp) +  #>                 unlist(pred@fp)))) #>         tab$Youden <- tab$Sensitivity + tab$Specificity - 1 #>         YI <- tab[order(tab$Youden, decreasing = T), ] #>         YI <- data.frame(Cutoff = YI$Cutoff[1], positive_variant_num = c(nrow(df[(df$result ==  #>             1) & (df$iter2 == 1), ])), negative_variant_num = c(nrow(df[(df$result ==  #>             0) & (df$iter2 == 1), ])), AUC = c(auc), cvauc = c(cvauc)) #>         YI2 <- rbind(YI2, YI) #>     } #>     fwrite(YI2, paste(protein_name, phenotype, \"result_3d_distance.csv\",  #>         sep = \"_\")) #>     df2 <- df %>% group_by(ID) %>% summarise(MOVA_3d_distance_predict = mean(predict)) #>     D[, c(\"result\")] <- list(NULL) #>     fwrite(merge(D, df2), MOVA_predict_file) #>     fwrite(df, paste(protein_name, phenotype, \"predict_orig_3d_distance.csv\",  #>         sep = \"_\")) #>     return(YI2) #>   } #> <environment: 0x0000011afe46be28>"},{"path":"/reference/MOVA_3d_distance_log.html","id":null,"dir":"Reference","previous_headings":"","what":"logistic analysis with 'distance to the known pathogenic variant' learned instead of position coordinates\r\n — MOVA_3d_distance_log","title":"logistic analysis with 'distance to the known pathogenic variant' learned instead of position coordinates\r\n — MOVA_3d_distance_log","text":"Test whether three factors ('distance known pathogenic variant', ΔBLOSUM62, pLDDT) can predict pathogenicity performing logistic regression analysis. MOVA_predistance function must performed function.","code":""},{"path":"/reference/MOVA_3d_distance_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"logistic analysis with 'distance to the known pathogenic variant' learned instead of position coordinates\r\n — MOVA_3d_distance_log","text":"","code":"MOVA_3d_distance_log(protein_name, MOVA_final_predict_file, MOVA_predict_file, phenotype = \"Target\")"},{"path":"/reference/MOVA_3d_distance_log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"logistic analysis with 'distance to the known pathogenic variant' learned instead of position coordinates\r\n — MOVA_3d_distance_log","text":"protein_name Name target protein/gene. Used name file exported. MOVA_final_predict_file \"gene name_Target Pathogenic_finalpredict.csv\" file output MOVA function. final MOVA_3d_distance predicted values file. MOVA_predict_file \"gene name_Target Pathogenic_predict.csv\" file output MOVA function. phenotype Specify \"Target\" want positive variant Target variant , \"Pathogenic\" want include Pathogenic variant well. default \"Target\".","code":""},{"path":"/reference/MOVA_3d_distance_log.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"logistic analysis with 'distance to the known pathogenic variant' learned instead of position coordinates\r\n — MOVA_3d_distance_log","text":"Draw ROC curve MOVA_3d_distance_log (blue). MOVA_3d_distance_log logistic regression analysis 'distance known pathogenic variant', ΔBLOSUM62,pLDDT explanatory variables pathogenicity variant objective variable. MOVA_3d_distance_log evaluated using Stratified 5-fold cross validation method, model repeated five times. average predicted values added \"MOVA_3d_distance_log_predict\" column MOVA_predict_file. final MOVA_3d_distance_log predicted value added \"MOVA_3d_distance_log_predict\" column MOVA_final_predict_file. \"protein/gene name_Target Pathogenic_result_3d_distance_log.csv\" contains Cutoff value (Youden index) fold (Column: Cutoff), number positive variants gene used analysis (Column: positive_variant_num), number negative variants (Column: negative_variant_num), AUC fold MOVA_3d_distance_log (Column: AUC), cvAUC MOVA_3d_distance_log (Column: cvauc). file required redrawing MOVA_redraw function MOVA_3d_distance_log output \"protein/gene name_Target Pathogenic_predict_orig_3d_distance_log.csv\".","code":""},{"path":"/reference/MOVA_3d_distance_log.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"logistic analysis with 'distance to the known pathogenic variant' learned instead of position coordinates\r\n — MOVA_3d_distance_log","text":"data.frame containing Cutoff value (Youden index) fold (Column: Cutoff), number positive variants gene used analysis (Column: positive_variant_num), number negative variants (Column: negative_variant_num), AUC fold MOVA_3d_distance_log (Column: AUC), cvAUC MOVA_3d_distance_log (Column: cvauc). data output \"protein/gene name_Target Pathogenic_result_3d_distance_log.csv\".","code":""},{"path":[]},{"path":"/reference/MOVA_3d_distance_log.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"logistic analysis with 'distance to the known pathogenic variant' learned instead of position coordinates\r\n — MOVA_3d_distance_log","text":"Yuya Hatano","code":""},{"path":[]},{"path":[]},{"path":"/reference/MOVA_3d_distance_log.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"logistic analysis with 'distance to the known pathogenic variant' learned instead of position coordinates\r\n — MOVA_3d_distance_log","text":"","code":"Hgmd_divide(\"./source/TARDBP.csv\") #> Error in fread(hgmd_file_name): File './source/TARDBP.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_gnomAD_file(\"./source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv\", \"./source/TARDBP_gnomAD.csv\") #> Error in fread(input_file_name): File './source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_variant_data(\"../CADD_REVEL/AlphScore_final.tsv\", \"./source/TARDBP.csv\", \"./source/TARDBP_gnomAD.csv\", \"Q13148\", \"TARDBP\", \"./source/TARDBPvariantdata.csv\") #> Error in fread(AlphScore_final_file): File '../CADD_REVEL/AlphScore_final.tsv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_polyphen_data(\"../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1\",\"./source/TARDBPvariantdata.csv\", \"TARDBP_alph.csv\",  \"Q13148\",  11012654, 11025492 ,\"./source/TARDBPvariantdatapol.csv\", \"./source/TARDBP_alphpol.csv\") #> Error in fread(dbNSFP4.3a_final_file): File '../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_final_variant_file(\"./source/TARDBP_alphpol.csv\",\"./source/TARDBP_alphpol2.csv\") #> Error in fread(input_file_name): File './source/TARDBP_alphpol.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA(\"./source/Q13148.fa\", \"TARDBP\", \"./source/AF-Q13148-F1-model_v2.pdb\",\"./source/TARDBP_alphpol2.csv\", \"./source/TARDBPvariantdatapol.csv\") #> Warning: data set 'BLOSUM62' not found #> Warning: cannot open file './source/Q13148.fa': No such file or directory #> Error in file(con, \"r\"): cannot open the connection MOVA_predistance(\"TARDBP\", \"TARDBP_Target_finalpredict.csv\",\"TARDBP_Target_predict.csv\") #> Error in fread(MOVA_predict_file): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA_3d_distance_log(\"TARDBP\", \"TARDBP_Target_finalpredict.csv\",\"TARDBP_Target_predict.csv\") #> Error in fread(MOVA_predict_file): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference'  ## The function is currently defined as function (protein_name, MOVA_final_predict_file, MOVA_predict_file,      phenotype = \"Target\")  {     D <- fread(MOVA_predict_file)     D$MOVA_3d_distance_log_predict <- 0     D[, c(\"MOVA_3d_distance_log_predict\")] <- list(NULL)     if (phenotype == \"Target\") {         D <- D[(D$Type == \"Target\") | (D$Type == \"Ctrl\"), ]     }     fpredict <- data.frame(matrix(rep(NA, 3), nrow = 1))[numeric(0),          ]     colnames(fpredict) <- c(\"change\", \"predict\", \"n\")     imp.rfa <- data.frame(matrix(rep(NA, 3), nrow = 1))[numeric(0),          ]     colnames(imp.rfa) <- c(\"name\", \"IncNodePurity\", \"n\")     final_data <- fread(MOVA_final_predict_file)     final_data$MOVA_3d_distance_log_predict <- 0     final_data[, c(\"MOVA_3d_distance_log_predict\")] <- list(NULL)     df <- data.frame(matrix(rep(NA, 6), nrow = 1))[numeric(0),          ]     colnames(df) <- c(\"ID\", \"re_result\", \"distance\", \"change\",          \"iter1\", \"iter2\")     D$id2 <- 0     D[, c(\"id2\")] <- list(NULL)     if (phenotype == \"Target\") {         D$result <- D$Type2     }     else {         D$result <- D$Type3     }     oldw <- getOption(\"warn\")     options(warn = -1)     D <- rowid_to_column(D, var = \"id2\")     for (i2 in 1:5) {         D$id3 <- D$id2         j <- 5         dat1 <- D %>% stratified(., group = \"result\", size = 1/j)         dat1$iter <- 1         datzan <- D[-dat1$id2, ]         for (i in 2:j) {             datzan[, c(\"id2\")] <- list(NULL)             datzan <- rowid_to_column(datzan, var = \"id2\")             if (i != j) {                 dat2 <- datzan %>% stratified(., group = \"result\",                    size = 1/(j - i + 1))             }             else {                 dat2 <- datzan             }             dat2$iter <- i             datzan <- datzan[-dat2$id2, ]             dat1 <- rbind(dat1, dat2)         }         dat1[, c(\"id2\")] <- list(NULL)         dat1 <- rowid_to_column(dat1, var = \"id2\")         for (i in 1:j) {             val <- dat1[dat1$iter == i, ]             train.data <- dat1[-val$id2, ]             x <- train.data[train.data$result == 1, ]$x             y <- train.data[train.data$result == 1, ]$y             z <- train.data[train.data$result == 1, ]$z             train.data$t_distance <- 0             for (i3 in 1:nrow(train.data)) {                 t_distance <- sqrt((x - train.data[i3]$x) * (x -                    train.data[i3]$x) + (y - train.data[i3]$y) *                    (y - train.data[i3]$y) + (z - train.data[i3]$z) *                    (z - train.data[i3]$z))                 t_distance <- sort(t_distance, decreasing = F)                 if (train.data[i3]$result == 1) {                   train.data[i3]$t_distance <- t_distance[2]                 }                 else {                   train.data[i3]$t_distance <- t_distance[1]                 }             }             glm <- glm(result ~ con + t_distance + b, train.data,                  family = \"binomial\")             x <- train.data[train.data$result == 1, ]$x             y <- train.data[train.data$result == 1, ]$y             z <- train.data[train.data$result == 1, ]$z             val$t_distance <- 0             for (i3 in 1:nrow(val)) {                 val[i3]$t_distance <- min(sqrt((x - val[i3]$x) *                    (x - val[i3]$x) + (y - val[i3]$y) * (y - val[i3]$y) +                    (z - val[i3]$z) * (z - val[i3]$z)))             }             f <- data.frame(ID = val$ID, result = val$result,                  predict = predict(glm, newdata = val, type = \"response\"),                  change = val$change, iter1 = i, iter2 = i2)             df <- rbind(df, f)         }     }     x <- D[D$result == 1, ]$x     y <- D[D$result == 1, ]$y     z <- D[D$result == 1, ]$z     D$t_distance <- 0     for (i3 in 1:nrow(D)) {         t_distance <- sqrt((x - D[i3]$x) * (x - D[i3]$x) + (y -              D[i3]$y) * (y - D[i3]$y) + (z - D[i3]$z) * (z - D[i3]$z))         t_distance <- sort(t_distance, decreasing = F)         if (D[i3]$result == 1) {             D[i3]$t_distance <- t_distance[2]         }         else {             D[i3]$t_distance <- t_distance[1]         }     }     for (i in 1:30) {         glm <- glm(result ~ con + t_distance + b, D, family = \"binomial\")         f <- data.frame(ID = final_data$ID, predict = predict(glm,              newdata = final_data, type = \"response\"), n = i)         fpredict <- rbind(fpredict, f)     }     options(warn = oldw)     fpredictb <- fpredict %>% group_by(ID) %>% summarise(MOVA_3d_distance_log_predict = mean(predict))     final_data <- merge(fpredictb, final_data)     fwrite(final_data, MOVA_final_predict_file)     df$iter3 <- df$iter1 + (df$iter2 * 5)     out <- cvAUC(df$predict, df$result, label.ordering = NULL,          folds = df$iter3)     plot(out$perf, col = \"blue\", avg = \"vertical\", add = TRUE)     cvauc <- out$cvAUC     YI2 <- data.frame(matrix(rep(NA, 5), nrow = 1))[numeric(0),          ]     colnames(YI2) <- c(\"Cutoff\", \"positive_variant_num\", \"negative_variant_num\",          \"AUC\", \"cvauc\")     for (i in 6:30) {         pred <- prediction(df[df$iter3 == i, ]$predict, df[df$iter3 ==              i, ]$result)         auc.tmp <- performance(pred, \"auc\")         auc <- as.numeric(auc.tmp@y.values)         tab <- data.frame(Cutoff = unlist(pred@cutoffs), TP = unlist(pred@tp),              FP = unlist(pred@fp), FN = unlist(pred@fn), TN = unlist(pred@tn),              Sensitivity = unlist(pred@tp)/(unlist(pred@tp) +                  unlist(pred@fn)), Specificity = unlist(pred@tn)/(unlist(pred@fp) +                  unlist(pred@tn)), Accuracy = ((unlist(pred@tp) +                  unlist(pred@tn))/nrow(df)), Precision = (unlist(pred@tp)/(unlist(pred@tp) +                  unlist(pred@fp))))         tab$Youden <- tab$Sensitivity + tab$Specificity - 1         YI <- tab[order(tab$Youden, decreasing = T), ]         YI <- data.frame(Cutoff = YI$Cutoff[1], positive_variant_num = c(nrow(df[(df$result ==              1) & (df$iter2 == 1), ])), negative_variant_num = c(nrow(df[(df$result ==              0) & (df$iter2 == 1), ])), AUC = c(auc), cvauc = c(cvauc))         YI2 <- rbind(YI2, YI)     }     fwrite(YI2, paste(protein_name, phenotype, \"result_3d_distance_log.csv\",          sep = \"_\"))     df2 <- df %>% group_by(ID) %>% summarise(MOVA_3d_distance_log_predict = mean(predict))     D[, c(\"result\")] <- list(NULL)     fwrite(merge(D, df2), MOVA_predict_file)     fwrite(df, paste(protein_name, phenotype, \"predict_orig_3d_distance_log.csv\",          sep = \"_\"))     return(YI2)   } #> function (protein_name, MOVA_final_predict_file, MOVA_predict_file,  #>     phenotype = \"Target\")  #> { #>     D <- fread(MOVA_predict_file) #>     D$MOVA_3d_distance_log_predict <- 0 #>     D[, c(\"MOVA_3d_distance_log_predict\")] <- list(NULL) #>     if (phenotype == \"Target\") { #>         D <- D[(D$Type == \"Target\") | (D$Type == \"Ctrl\"), ] #>     } #>     fpredict <- data.frame(matrix(rep(NA, 3), nrow = 1))[numeric(0),  #>         ] #>     colnames(fpredict) <- c(\"change\", \"predict\", \"n\") #>     imp.rfa <- data.frame(matrix(rep(NA, 3), nrow = 1))[numeric(0),  #>         ] #>     colnames(imp.rfa) <- c(\"name\", \"IncNodePurity\", \"n\") #>     final_data <- fread(MOVA_final_predict_file) #>     final_data$MOVA_3d_distance_log_predict <- 0 #>     final_data[, c(\"MOVA_3d_distance_log_predict\")] <- list(NULL) #>     df <- data.frame(matrix(rep(NA, 6), nrow = 1))[numeric(0),  #>         ] #>     colnames(df) <- c(\"ID\", \"re_result\", \"distance\", \"change\",  #>         \"iter1\", \"iter2\") #>     D$id2 <- 0 #>     D[, c(\"id2\")] <- list(NULL) #>     if (phenotype == \"Target\") { #>         D$result <- D$Type2 #>     } #>     else { #>         D$result <- D$Type3 #>     } #>     oldw <- getOption(\"warn\") #>     options(warn = -1) #>     D <- rowid_to_column(D, var = \"id2\") #>     for (i2 in 1:5) { #>         D$id3 <- D$id2 #>         j <- 5 #>         dat1 <- D %>% stratified(., group = \"result\", size = 1/j) #>         dat1$iter <- 1 #>         datzan <- D[-dat1$id2, ] #>         for (i in 2:j) { #>             datzan[, c(\"id2\")] <- list(NULL) #>             datzan <- rowid_to_column(datzan, var = \"id2\") #>             if (i != j) { #>                 dat2 <- datzan %>% stratified(., group = \"result\",  #>                   size = 1/(j - i + 1)) #>             } #>             else { #>                 dat2 <- datzan #>             } #>             dat2$iter <- i #>             datzan <- datzan[-dat2$id2, ] #>             dat1 <- rbind(dat1, dat2) #>         } #>         dat1[, c(\"id2\")] <- list(NULL) #>         dat1 <- rowid_to_column(dat1, var = \"id2\") #>         for (i in 1:j) { #>             val <- dat1[dat1$iter == i, ] #>             train.data <- dat1[-val$id2, ] #>             x <- train.data[train.data$result == 1, ]$x #>             y <- train.data[train.data$result == 1, ]$y #>             z <- train.data[train.data$result == 1, ]$z #>             train.data$t_distance <- 0 #>             for (i3 in 1:nrow(train.data)) { #>                 t_distance <- sqrt((x - train.data[i3]$x) * (x -  #>                   train.data[i3]$x) + (y - train.data[i3]$y) *  #>                   (y - train.data[i3]$y) + (z - train.data[i3]$z) *  #>                   (z - train.data[i3]$z)) #>                 t_distance <- sort(t_distance, decreasing = F) #>                 if (train.data[i3]$result == 1) { #>                   train.data[i3]$t_distance <- t_distance[2] #>                 } #>                 else { #>                   train.data[i3]$t_distance <- t_distance[1] #>                 } #>             } #>             glm <- glm(result ~ con + t_distance + b, train.data,  #>                 family = \"binomial\") #>             x <- train.data[train.data$result == 1, ]$x #>             y <- train.data[train.data$result == 1, ]$y #>             z <- train.data[train.data$result == 1, ]$z #>             val$t_distance <- 0 #>             for (i3 in 1:nrow(val)) { #>                 val[i3]$t_distance <- min(sqrt((x - val[i3]$x) *  #>                   (x - val[i3]$x) + (y - val[i3]$y) * (y - val[i3]$y) +  #>                   (z - val[i3]$z) * (z - val[i3]$z))) #>             } #>             f <- data.frame(ID = val$ID, result = val$result,  #>                 predict = predict(glm, newdata = val, type = \"response\"),  #>                 change = val$change, iter1 = i, iter2 = i2) #>             df <- rbind(df, f) #>         } #>     } #>     x <- D[D$result == 1, ]$x #>     y <- D[D$result == 1, ]$y #>     z <- D[D$result == 1, ]$z #>     D$t_distance <- 0 #>     for (i3 in 1:nrow(D)) { #>         t_distance <- sqrt((x - D[i3]$x) * (x - D[i3]$x) + (y -  #>             D[i3]$y) * (y - D[i3]$y) + (z - D[i3]$z) * (z - D[i3]$z)) #>         t_distance <- sort(t_distance, decreasing = F) #>         if (D[i3]$result == 1) { #>             D[i3]$t_distance <- t_distance[2] #>         } #>         else { #>             D[i3]$t_distance <- t_distance[1] #>         } #>     } #>     for (i in 1:30) { #>         glm <- glm(result ~ con + t_distance + b, D, family = \"binomial\") #>         f <- data.frame(ID = final_data$ID, predict = predict(glm,  #>             newdata = final_data, type = \"response\"), n = i) #>         fpredict <- rbind(fpredict, f) #>     } #>     options(warn = oldw) #>     fpredictb <- fpredict %>% group_by(ID) %>% summarise(MOVA_3d_distance_log_predict = mean(predict)) #>     final_data <- merge(fpredictb, final_data) #>     fwrite(final_data, MOVA_final_predict_file) #>     df$iter3 <- df$iter1 + (df$iter2 * 5) #>     out <- cvAUC(df$predict, df$result, label.ordering = NULL,  #>         folds = df$iter3) #>     plot(out$perf, col = \"blue\", avg = \"vertical\", add = TRUE) #>     cvauc <- out$cvAUC #>     YI2 <- data.frame(matrix(rep(NA, 5), nrow = 1))[numeric(0),  #>         ] #>     colnames(YI2) <- c(\"Cutoff\", \"positive_variant_num\", \"negative_variant_num\",  #>         \"AUC\", \"cvauc\") #>     for (i in 6:30) { #>         pred <- prediction(df[df$iter3 == i, ]$predict, df[df$iter3 ==  #>             i, ]$result) #>         auc.tmp <- performance(pred, \"auc\") #>         auc <- as.numeric(auc.tmp@y.values) #>         tab <- data.frame(Cutoff = unlist(pred@cutoffs), TP = unlist(pred@tp),  #>             FP = unlist(pred@fp), FN = unlist(pred@fn), TN = unlist(pred@tn),  #>             Sensitivity = unlist(pred@tp)/(unlist(pred@tp) +  #>                 unlist(pred@fn)), Specificity = unlist(pred@tn)/(unlist(pred@fp) +  #>                 unlist(pred@tn)), Accuracy = ((unlist(pred@tp) +  #>                 unlist(pred@tn))/nrow(df)), Precision = (unlist(pred@tp)/(unlist(pred@tp) +  #>                 unlist(pred@fp)))) #>         tab$Youden <- tab$Sensitivity + tab$Specificity - 1 #>         YI <- tab[order(tab$Youden, decreasing = T), ] #>         YI <- data.frame(Cutoff = YI$Cutoff[1], positive_variant_num = c(nrow(df[(df$result ==  #>             1) & (df$iter2 == 1), ])), negative_variant_num = c(nrow(df[(df$result ==  #>             0) & (df$iter2 == 1), ])), AUC = c(auc), cvauc = c(cvauc)) #>         YI2 <- rbind(YI2, YI) #>     } #>     fwrite(YI2, paste(protein_name, phenotype, \"result_3d_distance_log.csv\",  #>         sep = \"_\")) #>     df2 <- df %>% group_by(ID) %>% summarise(MOVA_3d_distance_log_predict = mean(predict)) #>     D[, c(\"result\")] <- list(NULL) #>     fwrite(merge(D, df2), MOVA_predict_file) #>     fwrite(df, paste(protein_name, phenotype, \"predict_orig_3d_distance_log.csv\",  #>         sep = \"_\")) #>     return(YI2) #>   } #> <environment: 0x0000011a80a560d0>"},{"path":"/reference/MOVA_LOPOV.html","id":null,"dir":"Reference","previous_headings":"","what":"do a leave one protein out validation (using 11 proteins' variations for training, 1 protein's for testing)\r\n — MOVA_LOPOV","title":"do a leave one protein out validation (using 11 proteins' variations for training, 1 protein's for testing)\r\n — MOVA_LOPOV","text":"Random forest analysis 'distance known pathogenic variant', ΔBLOSUM62,pLDDT explanatory variables pathogenicity variant objective variable.   study trained 11 genes, one 12 ALS-related genes (TARDBP, FUS, SETX, TBK1, OPTN, SOD1, VCP, SQSTM1, ANG, UBQLN2, DCTN1, CCNF), validated remaining one gene. process repeated different validation genes ensure genes validated. MOVA_predistance function must performed function.","code":""},{"path":"/reference/MOVA_LOPOV.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"do a leave one protein out validation (using 11 proteins' variations for training, 1 protein's for testing)\r\n — MOVA_LOPOV","text":"","code":"MOVA_LOPOV(phenotype = \"Target\")"},{"path":"/reference/MOVA_LOPOV.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"do a leave one protein out validation (using 11 proteins' variations for training, 1 protein's for testing)\r\n — MOVA_LOPOV","text":"phenotype Specify \"Target\" want positive variant Target variant , \"Pathogenic\" want include Pathogenic variant well. default \"Target\".","code":""},{"path":"/reference/MOVA_LOPOV.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"do a leave one protein out validation (using 11 proteins' variations for training, 1 protein's for testing)\r\n — MOVA_LOPOV","text":"perform function, MOVA fuction must performed genes TARDBP, FUS, SETX, TBK1, OPTN, SOD1, VCP, SQSTM1, ANG, UBQLN2, DCTN1, CCNF. MOVA_LOPOV random forest analysis 'distance known pathogenic variant', ΔBLOSUM62, pLDDT explanatory variables pathogenicity variant objective variable. MOVA_LOPOV evaluated using leave one protein validation. MOVA_LOPOV predicted value added \"MOVA_LOPOV_predict\" column \"LOPOV_Target Pathogenic_finalpredict.csv\". \"LOPOV_Target Pathogenic_result.csv\" contains Cutoff value (Youden index) gene (Column: Cutoff), number positive variants gene used analysis (Column: positive_variant_num), number negative variants (Column: negative_variant_num), AUC gene MOVA_LOPOV (Column: AUC), cvAUC MOVA_LOPOV (Column: cvauc). file required redrawing redraw function MOVA_LOPOV output \"LOPOV_Target Pathogenic_predict_orig.csv\".","code":""},{"path":"/reference/MOVA_LOPOV.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"do a leave one protein out validation (using 11 proteins' variations for training, 1 protein's for testing)\r\n — MOVA_LOPOV","text":"data.frame containing Cutoff value (Youden index) gene (Column: Cutoff), number positive variants gene used analysis (Column: positive_variant_num), number negative variants (Column: negative_variant_num), AUC gene MOVA_LOPOV (Column: AUC), cvAUC MOVA_LOPOV (Column: cvauc). data output \"LOPOV_Target Pathogenic_result.csv\".","code":""},{"path":[]},{"path":"/reference/MOVA_LOPOV.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"do a leave one protein out validation (using 11 proteins' variations for training, 1 protein's for testing)\r\n — MOVA_LOPOV","text":"Yuya Hatano","code":""},{"path":[]},{"path":[]},{"path":"/reference/MOVA_LOPOV.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"do a leave one protein out validation (using 11 proteins' variations for training, 1 protein's for testing)\r\n — MOVA_LOPOV","text":"","code":"MOVA_LOPOV() #> Error in fread(paste(read_name[1], phenotype, \"predict.csv\", sep = \"_\")): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference'  ## The function is currently defined as function (phenotype = \"Target\")  {     read_name <- c(\"TARDBP\", \"FUS\", \"SETX\", \"TBK1\", \"OPTN\", \"SOD1\",          \"VCP\", \"SQSTM1\", \"ANG\", \"UBQLN2\", \"DCTN1\", \"CCNF\")     D <- fread(paste(read_name[1], phenotype, \"predict.csv\",          sep = \"_\"))     final_data <- fread(paste(read_name[1], phenotype, \"finalpredict.csv\",          sep = \"_\"))     D$gene <- read_name[1]     D$gene_number <- 1     D$glm_CaddDeogenRevel <- 0     D[, `:=`(glm_CaddDeogenRevel, NULL)]     final_data$gene <- read_name[1]     final_data$gene_number <- 1     final_data$glm_CaddDeogenRevel <- 0     final_data[, `:=`(glm_CaddDeogenRevel, NULL)]     D$t_distance <- 0     if (phenotype == \"Target\") {         D$result <- D$Type2     }     else {         D$result <- D$Type3     }     x <- D[D$result == 1, ]$x     y <- D[D$result == 1, ]$y     z <- D[D$result == 1, ]$z     for (i3 in 1:nrow(D)) {         t_distance <- sqrt((x - D[i3]$x) * (x - D[i3]$x) + (y -              D[i3]$y) * (y - D[i3]$y) + (z - D[i3]$z) * (z - D[i3]$z))         t_distance <- sort(t_distance, decreasing = F)         if (D[i3]$result == 1) {             D[i3]$t_distance <- t_distance[2]         }         else {             D[i3]$t_distance <- t_distance[1]         }     }     for (i in 2:12) {         df2 <- fread(paste(read_name[i], phenotype, \"predict.csv\",              sep = \"_\"))         final_data2 <- fread(paste(read_name[i], phenotype, \"finalpredict.csv\",              sep = \"_\"))         df2$gene <- read_name[i]         df2$gene_number <- i         df2$glm_CaddDeogenRevel <- 0         df2[, `:=`(glm_CaddDeogenRevel, NULL)]         if (phenotype == \"Target\") {             df2$result <- df2$Type2         }         else {             df2$result <- df2$Type3         }         df2$t_distance <- 0         x <- df2[df2$result == 1, ]$x         y <- df2[df2$result == 1, ]$y         z <- df2[df2$result == 1, ]$z         for (i3 in 1:nrow(df2)) {             t_distance <- sqrt((x - df2[i3]$x) * (x - df2[i3]$x) +                  (y - df2[i3]$y) * (y - df2[i3]$y) + (z - df2[i3]$z) *                  (z - df2[i3]$z))             t_distance <- sort(t_distance, decreasing = F)             if (df2[i3]$result == 1) {                 df2[i3]$t_distance <- t_distance[2]             }             else {                 df2[i3]$t_distance <- t_distance[1]             }         }         D <- rbind(D, df2)         final_data2$gene <- read_name[i]         final_data2$gene_number <- i         final_data2$glm_CaddDeogenRevel <- 0         final_data2[, `:=`(glm_CaddDeogenRevel, NULL)]         final_data <- rbind(final_data, final_data2)     }     df <- data.frame(matrix(rep(NA, 6), nrow = 1))[numeric(0),          ]     colnames(df) <- c(\"ID\", \"result\", \"predict\", \"change\", \"gene_number\",          \"gene\")     fpredict <- data.frame(matrix(rep(NA, 3), nrow = 1))[numeric(0),          ]     colnames(fpredict) <- c(\"change\", \"predict\", \"n\")     imp.rfa <- data.frame(matrix(rep(NA, 3), nrow = 1))[numeric(0),          ]     colnames(imp.rfa) <- c(\"name\", \"IncNodePurity\", \"n\")     oldw <- getOption(\"warn\")     options(warn = -1)     for (i in 1:12) {         val <- D[D$gene_number == i, ]         train.data <- D[D$gene_number != i, ]         rf <- randomForest(result ~ con + t_distance + b, train.data,              importance = TRUE)         imp.rf <- importance(rf)         f <- data.frame(ID = val$ID, result = val$result, predict = predict(rf,              val), change = val$change, gene_number = i, gene = val$gene)         df <- rbind(df, f)         f <- data.frame(ID = final_data[final_data$gene_number ==              i, ]$ID, MOVA_LOPOV_predict = predict(rf, final_data[final_data$gene_number ==              i, ]), gene_number = i)         fpredict <- rbind(fpredict, f)         f <- data.frame(name = rownames(imp.rf), IncNodePurity = imp.rf,              n = i)         imp.rfa <- rbind(imp.rfa, f)     }     options(warn = oldw)     fpredictb <- fpredict     imp.rfb <- imp.rfa %>% group_by(name) %>% summarise(IncMSE = mean(IncNodePurity..IncMSE),          IncNodePurity = mean(IncNodePurity.IncNodePurity))     final_data <- merge(fpredictb, final_data)     fwrite(final_data, paste(\"LOPOV\", phenotype, \"finalpredict.csv\",          sep = \"_\"))     fwrite(imp.rfb, paste(\"LOPOV\", phenotype, \"importance.csv\",          sep = \"_\"))     out <- cvAUC(df$predict, df$result, label.ordering = NULL,          folds = df$gene_number)     plot(out$perf, col = \"red\", avg = \"vertical\")     cvauc <- out$cvAUC     YI2 <- data.frame(matrix(rep(NA, 5), nrow = 1))[numeric(0),          ]     colnames(YI2) <- c(\"Cutoff\", \"positive_variant_num\", \"negative_variant_num\",          \"AUC\", \"cvauc\")     for (i in 1:12) {         pred <- prediction(df[df$gene_number == i, ]$predict,              df[df$gene_number == i, ]$result)         auc.tmp <- performance(pred, \"auc\")         auc <- as.numeric(auc.tmp@y.values)         tab <- data.frame(Cutoff = unlist(pred@cutoffs), TP = unlist(pred@tp),              FP = unlist(pred@fp), FN = unlist(pred@fn), TN = unlist(pred@tn),              Sensitivity = unlist(pred@tp)/(unlist(pred@tp) +                  unlist(pred@fn)), Specificity = unlist(pred@tn)/(unlist(pred@fp) +                  unlist(pred@tn)), Accuracy = ((unlist(pred@tp) +                  unlist(pred@tn))/nrow(df)), Precision = (unlist(pred@tp)/(unlist(pred@tp) +                  unlist(pred@fp))))         tab$Youden <- tab$Sensitivity + tab$Specificity - 1         YI <- tab[order(tab$Youden, decreasing = T), ]         YI <- data.frame(Cutoff = YI$Cutoff[1], positive_variant_num = c(nrow(df[(df$result ==              1) & (df$gene_number == 1), ])), negative_variant_num = c(nrow(df[(df$result ==              0) & (df$gene_number == 1), ])), AUC = c(auc), cvauc = c(cvauc),              gene = c(read_name[i]))         YI2 <- rbind(YI2, YI)     }     fwrite(YI2, paste(\"LOPOV\", phenotype, \"result.csv\", sep = \"_\"))     df2 <- df %>% group_by(ID) %>% summarise(MOVA_LOPOV_predict = mean(predict))     fwrite(merge(D, df2), paste(\"LOPOV\", phenotype, \"predict.csv\",          sep = \"_\"))     fwrite(df, paste(\"LOPOV\", phenotype, \"predict_orig.csv\",          sep = \"_\"))     return(YI2)   } #> function (phenotype = \"Target\")  #> { #>     read_name <- c(\"TARDBP\", \"FUS\", \"SETX\", \"TBK1\", \"OPTN\", \"SOD1\",  #>         \"VCP\", \"SQSTM1\", \"ANG\", \"UBQLN2\", \"DCTN1\", \"CCNF\") #>     D <- fread(paste(read_name[1], phenotype, \"predict.csv\",  #>         sep = \"_\")) #>     final_data <- fread(paste(read_name[1], phenotype, \"finalpredict.csv\",  #>         sep = \"_\")) #>     D$gene <- read_name[1] #>     D$gene_number <- 1 #>     D$glm_CaddDeogenRevel <- 0 #>     D[, `:=`(glm_CaddDeogenRevel, NULL)] #>     final_data$gene <- read_name[1] #>     final_data$gene_number <- 1 #>     final_data$glm_CaddDeogenRevel <- 0 #>     final_data[, `:=`(glm_CaddDeogenRevel, NULL)] #>     D$t_distance <- 0 #>     if (phenotype == \"Target\") { #>         D$result <- D$Type2 #>     } #>     else { #>         D$result <- D$Type3 #>     } #>     x <- D[D$result == 1, ]$x #>     y <- D[D$result == 1, ]$y #>     z <- D[D$result == 1, ]$z #>     for (i3 in 1:nrow(D)) { #>         t_distance <- sqrt((x - D[i3]$x) * (x - D[i3]$x) + (y -  #>             D[i3]$y) * (y - D[i3]$y) + (z - D[i3]$z) * (z - D[i3]$z)) #>         t_distance <- sort(t_distance, decreasing = F) #>         if (D[i3]$result == 1) { #>             D[i3]$t_distance <- t_distance[2] #>         } #>         else { #>             D[i3]$t_distance <- t_distance[1] #>         } #>     } #>     for (i in 2:12) { #>         df2 <- fread(paste(read_name[i], phenotype, \"predict.csv\",  #>             sep = \"_\")) #>         final_data2 <- fread(paste(read_name[i], phenotype, \"finalpredict.csv\",  #>             sep = \"_\")) #>         df2$gene <- read_name[i] #>         df2$gene_number <- i #>         df2$glm_CaddDeogenRevel <- 0 #>         df2[, `:=`(glm_CaddDeogenRevel, NULL)] #>         if (phenotype == \"Target\") { #>             df2$result <- df2$Type2 #>         } #>         else { #>             df2$result <- df2$Type3 #>         } #>         df2$t_distance <- 0 #>         x <- df2[df2$result == 1, ]$x #>         y <- df2[df2$result == 1, ]$y #>         z <- df2[df2$result == 1, ]$z #>         for (i3 in 1:nrow(df2)) { #>             t_distance <- sqrt((x - df2[i3]$x) * (x - df2[i3]$x) +  #>                 (y - df2[i3]$y) * (y - df2[i3]$y) + (z - df2[i3]$z) *  #>                 (z - df2[i3]$z)) #>             t_distance <- sort(t_distance, decreasing = F) #>             if (df2[i3]$result == 1) { #>                 df2[i3]$t_distance <- t_distance[2] #>             } #>             else { #>                 df2[i3]$t_distance <- t_distance[1] #>             } #>         } #>         D <- rbind(D, df2) #>         final_data2$gene <- read_name[i] #>         final_data2$gene_number <- i #>         final_data2$glm_CaddDeogenRevel <- 0 #>         final_data2[, `:=`(glm_CaddDeogenRevel, NULL)] #>         final_data <- rbind(final_data, final_data2) #>     } #>     df <- data.frame(matrix(rep(NA, 6), nrow = 1))[numeric(0),  #>         ] #>     colnames(df) <- c(\"ID\", \"result\", \"predict\", \"change\", \"gene_number\",  #>         \"gene\") #>     fpredict <- data.frame(matrix(rep(NA, 3), nrow = 1))[numeric(0),  #>         ] #>     colnames(fpredict) <- c(\"change\", \"predict\", \"n\") #>     imp.rfa <- data.frame(matrix(rep(NA, 3), nrow = 1))[numeric(0),  #>         ] #>     colnames(imp.rfa) <- c(\"name\", \"IncNodePurity\", \"n\") #>     oldw <- getOption(\"warn\") #>     options(warn = -1) #>     for (i in 1:12) { #>         val <- D[D$gene_number == i, ] #>         train.data <- D[D$gene_number != i, ] #>         rf <- randomForest(result ~ con + t_distance + b, train.data,  #>             importance = TRUE) #>         imp.rf <- importance(rf) #>         f <- data.frame(ID = val$ID, result = val$result, predict = predict(rf,  #>             val), change = val$change, gene_number = i, gene = val$gene) #>         df <- rbind(df, f) #>         f <- data.frame(ID = final_data[final_data$gene_number ==  #>             i, ]$ID, MOVA_LOPOV_predict = predict(rf, final_data[final_data$gene_number ==  #>             i, ]), gene_number = i) #>         fpredict <- rbind(fpredict, f) #>         f <- data.frame(name = rownames(imp.rf), IncNodePurity = imp.rf,  #>             n = i) #>         imp.rfa <- rbind(imp.rfa, f) #>     } #>     options(warn = oldw) #>     fpredictb <- fpredict #>     imp.rfb <- imp.rfa %>% group_by(name) %>% summarise(IncMSE = mean(IncNodePurity..IncMSE),  #>         IncNodePurity = mean(IncNodePurity.IncNodePurity)) #>     final_data <- merge(fpredictb, final_data) #>     fwrite(final_data, paste(\"LOPOV\", phenotype, \"finalpredict.csv\",  #>         sep = \"_\")) #>     fwrite(imp.rfb, paste(\"LOPOV\", phenotype, \"importance.csv\",  #>         sep = \"_\")) #>     out <- cvAUC(df$predict, df$result, label.ordering = NULL,  #>         folds = df$gene_number) #>     plot(out$perf, col = \"red\", avg = \"vertical\") #>     cvauc <- out$cvAUC #>     YI2 <- data.frame(matrix(rep(NA, 5), nrow = 1))[numeric(0),  #>         ] #>     colnames(YI2) <- c(\"Cutoff\", \"positive_variant_num\", \"negative_variant_num\",  #>         \"AUC\", \"cvauc\") #>     for (i in 1:12) { #>         pred <- prediction(df[df$gene_number == i, ]$predict,  #>             df[df$gene_number == i, ]$result) #>         auc.tmp <- performance(pred, \"auc\") #>         auc <- as.numeric(auc.tmp@y.values) #>         tab <- data.frame(Cutoff = unlist(pred@cutoffs), TP = unlist(pred@tp),  #>             FP = unlist(pred@fp), FN = unlist(pred@fn), TN = unlist(pred@tn),  #>             Sensitivity = unlist(pred@tp)/(unlist(pred@tp) +  #>                 unlist(pred@fn)), Specificity = unlist(pred@tn)/(unlist(pred@fp) +  #>                 unlist(pred@tn)), Accuracy = ((unlist(pred@tp) +  #>                 unlist(pred@tn))/nrow(df)), Precision = (unlist(pred@tp)/(unlist(pred@tp) +  #>                 unlist(pred@fp)))) #>         tab$Youden <- tab$Sensitivity + tab$Specificity - 1 #>         YI <- tab[order(tab$Youden, decreasing = T), ] #>         YI <- data.frame(Cutoff = YI$Cutoff[1], positive_variant_num = c(nrow(df[(df$result ==  #>             1) & (df$gene_number == 1), ])), negative_variant_num = c(nrow(df[(df$result ==  #>             0) & (df$gene_number == 1), ])), AUC = c(auc), cvauc = c(cvauc),  #>             gene = c(read_name[i])) #>         YI2 <- rbind(YI2, YI) #>     } #>     fwrite(YI2, paste(\"LOPOV\", phenotype, \"result.csv\", sep = \"_\")) #>     df2 <- df %>% group_by(ID) %>% summarise(MOVA_LOPOV_predict = mean(predict)) #>     fwrite(merge(D, df2), paste(\"LOPOV\", phenotype, \"predict.csv\",  #>         sep = \"_\")) #>     fwrite(df, paste(\"LOPOV\", phenotype, \"predict_orig.csv\",  #>         sep = \"_\")) #>     return(YI2) #>   } #> <environment: 0x0000011a80e6fa68>"},{"path":"/reference/MOVA_only_3d_coordinates.html","id":null,"dir":"Reference","previous_headings":"","what":"MOVA with only 3D coordinates as explanatory variable\r\n — MOVA_only_3d_coordinates","title":"MOVA with only 3D coordinates as explanatory variable\r\n — MOVA_only_3d_coordinates","text":"Random forest performed 3D coordinates explanatory variable pathogenicity variants objective variable.","code":""},{"path":"/reference/MOVA_only_3d_coordinates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MOVA with only 3D coordinates as explanatory variable\r\n — MOVA_only_3d_coordinates","text":"","code":"MOVA_only_3d_coordinates(protein_name, MOVA_final_predict_file, MOVA_predict_file, phenotype = \"Target\")"},{"path":"/reference/MOVA_only_3d_coordinates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MOVA with only 3D coordinates as explanatory variable\r\n — MOVA_only_3d_coordinates","text":"protein_name Name target protein/gene. Used name file exported. MOVA_final_predict_file \"gene name_Target Pathogenic_finalpredict.csv\" file output MOVA function. final MOVA_only_3d_coordinates predicted values file. MOVA_predict_file \"gene name_Target Pathogenic_predict.csv\" file output MOVA function. phenotype Specify \"Target\" want positive variant Target variant , \"Pathogenic\" want include Pathogenic variant well. default \"Target\".","code":""},{"path":"/reference/MOVA_only_3d_coordinates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MOVA with only 3D coordinates as explanatory variable\r\n — MOVA_only_3d_coordinates","text":"Draw ROC curve MOVA_only_3d_coordinates (green). MOVA_only_3d_coordinates evaluated using Stratified 5-fold cross validation method, model repeated five times. average predicted values added \"only_3d_coordinates_predict\" column MOVA_predict_file. final MOVA_only_3d_coordinates predicted value added \"only_3d_coordinates_predict\" column MOVA_final_predict_file. \"protein/gene name_Target Pathogenic_result_only_3d_coordinates.csv\" contains Cutoff value (Youden index) fold (Column: Cutoff), number positive variants gene used analysis (Column: positive_variant_num), number negative variants (Column: negative_variant_num), AUC fold MOVA_only_3d_coordinates (Column: AUC), cvAUC MOVA_only_3d_coordinates (Column: cvauc). file required redrawing MOVA_redraw function MOVA_only_3d_coordinates output \"protein/gene name_Target Pathogenic_predict_orig_only_3d_coordinates.csv\".","code":""},{"path":"/reference/MOVA_only_3d_coordinates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MOVA with only 3D coordinates as explanatory variable\r\n — MOVA_only_3d_coordinates","text":"data.frame containing Cutoff value (Youden index) fold (Column: Cutoff), number positive variants gene used analysis (Column: positive_variant_num), number negative variants (Column: negative_variant_num), AUC fold MOVA_only_3d_coordinates (Column: AUC), cvAUC MOVA_only_3d_coordinates (Column: cvauc). data output \"protein/gene name_Target Pathogenic_result_only_3d_coordinates.csv\".","code":""},{"path":[]},{"path":"/reference/MOVA_only_3d_coordinates.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"MOVA with only 3D coordinates as explanatory variable\r\n — MOVA_only_3d_coordinates","text":"Yuya Hatano","code":""},{"path":[]},{"path":[]},{"path":"/reference/MOVA_only_3d_coordinates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MOVA with only 3D coordinates as explanatory variable\r\n — MOVA_only_3d_coordinates","text":"","code":"##---- Should be DIRECTLY executable !! ---- ##-- ==>  Define data, use random, ##--  or do  help(data=index)  for the standard data sets.  ## The function is currently defined as function (protein_name, MOVA_final_predict_file, MOVA_predict_file,      phenotype = \"Target\")  {     D <- fread(MOVA_predict_file)     D$only_3d_coordinates_predict <- 0     D[, c(\"only_3d_coordinates_predict\")] <- list(NULL)     if (phenotype == \"Target\") {         D <- D[(D$Type == \"Target\") | (D$Type == \"Ctrl\"), ]     }     fpredict <- data.frame(matrix(rep(NA, 3), nrow = 1))[numeric(0),          ]     colnames(fpredict) <- c(\"change\", \"predict\", \"n\")     final_data <- fread(MOVA_final_predict_file)     final_data$only_3d_coordinates_predict <- 0     final_data[, c(\"only_3d_coordinates_predict\")] <- list(NULL)     df <- data.frame(matrix(rep(NA, 6), nrow = 1))[numeric(0),          ]     colnames(df) <- c(\"ID\", \"result\", \"predict\", \"change\", \"iter1\",          \"iter2\")     D$id2 <- 0     D[, c(\"id2\")] <- list(NULL)     if (phenotype == \"Target\") {         D$result <- D$Type2     }     else {         D$result <- D$Type3     }     oldw <- getOption(\"warn\")     options(warn = -1)     D <- rowid_to_column(D, var = \"id2\")     for (i2 in 1:5) {         D$id3 <- D$id2         j <- 5         dat1 <- D %>% stratified(., group = \"result\", size = 1/j)         dat1$iter <- 1         datzan <- D[-dat1$id2, ]         for (i in 2:j) {             datzan[, c(\"id2\")] <- list(NULL)             datzan <- rowid_to_column(datzan, var = \"id2\")             if (i != j) {                 dat2 <- datzan %>% stratified(., group = \"result\",                    size = 1/(j - i + 1))             }             else {                 dat2 <- datzan             }             dat2$iter <- i             datzan <- datzan[-dat2$id2, ]             dat1 <- rbind(dat1, dat2)         }         dat1[, c(\"id2\")] <- list(NULL)         dat1 <- rowid_to_column(dat1, var = \"id2\")         for (i in 1:j) {             val <- dat1[dat1$iter == i, ]             train.data <- dat1[-val$id2, ]             rf <- randomForest(result ~ x + y + z, train.data,                  importance = TRUE)             f <- data.frame(ID = val$ID, result = val$result,                  predict = predict(rf, val), change = val$change,                  iter1 = i, iter2 = i2)             df <- rbind(df, f)         }     }     for (i in 1:30) {         rf <- randomForest(result ~ x + y + z, D)         f <- data.frame(ID = final_data$ID, predict = predict(rf,              final_data), n = i)         fpredict <- rbind(fpredict, f)     }     options(warn = oldw)     fpredictb <- fpredict %>% group_by(ID) %>% summarise(only_3d_coordinates_predict = mean(predict))     ID <- str_split(fpredictb$ID, pattern = \":\", simplify = TRUE)     for (i in 1:nrow(fpredictb)) {         if (ID[i, 5] == ID[i, 7]) {             fpredictb$predict[i] = 0         }     }     final_data <- merge(fpredictb, final_data)     fwrite(final_data, MOVA_final_predict_file)     df$iter3 <- df$iter1 + (df$iter2 * 5)     out <- cvAUC(df$predict, df$result, label.ordering = NULL,          folds = df$iter3)     plot(out$perf, col = \"green\", avg = \"vertical\", add = TRUE)     cvauc <- out$cvAUC     YI2 <- data.frame(matrix(rep(NA, 5), nrow = 1))[numeric(0),          ]     colnames(YI2) <- c(\"Cutoff\", \"positive_variant_num\", \"negative_variant_num\",          \"AUC\", \"cvauc\")     for (i in 6:30) {         pred <- prediction(df[df$iter3 == i, ]$predict, df[df$iter3 ==              i, ]$result)         auc.tmp <- performance(pred, \"auc\")         auc <- as.numeric(auc.tmp@y.values)         tab <- data.frame(Cutoff = unlist(pred@cutoffs), TP = unlist(pred@tp),              FP = unlist(pred@fp), FN = unlist(pred@fn), TN = unlist(pred@tn),              Sensitivity = unlist(pred@tp)/(unlist(pred@tp) +                  unlist(pred@fn)), Specificity = unlist(pred@tn)/(unlist(pred@fp) +                  unlist(pred@tn)), Accuracy = ((unlist(pred@tp) +                  unlist(pred@tn))/nrow(df)), Precision = (unlist(pred@tp)/(unlist(pred@tp) +                  unlist(pred@fp))))         tab$Youden <- tab$Sensitivity + tab$Specificity - 1         YI <- tab[order(tab$Youden, decreasing = T), ]         YI <- data.frame(Cutoff = YI$Cutoff[1], positive_variant_num = c(nrow(df[(df$result ==              1) & (df$iter2 == 1), ])), negative_variant_num = c(nrow(df[(df$result ==              0) & (df$iter2 == 1), ])), AUC = c(auc), cvauc = c(cvauc))         YI2 <- rbind(YI2, YI)     }     fwrite(YI2, paste(protein_name, phenotype, \"result_only_3d_coordinates.csv\",          sep = \"_\"))     df2 <- df %>% group_by(ID) %>% summarise(only_3d_coordinates_predict = mean(predict))     D[, c(\"result\")] <- list(NULL)     fwrite(merge(D, df2), MOVA_predict_file)     fwrite(df, paste(protein_name, phenotype, \"predict_orig_only_3d_coordinates.csv\",          sep = \"_\"))     return(YI2)   } #> function (protein_name, MOVA_final_predict_file, MOVA_predict_file,  #>     phenotype = \"Target\")  #> { #>     D <- fread(MOVA_predict_file) #>     D$only_3d_coordinates_predict <- 0 #>     D[, c(\"only_3d_coordinates_predict\")] <- list(NULL) #>     if (phenotype == \"Target\") { #>         D <- D[(D$Type == \"Target\") | (D$Type == \"Ctrl\"), ] #>     } #>     fpredict <- data.frame(matrix(rep(NA, 3), nrow = 1))[numeric(0),  #>         ] #>     colnames(fpredict) <- c(\"change\", \"predict\", \"n\") #>     final_data <- fread(MOVA_final_predict_file) #>     final_data$only_3d_coordinates_predict <- 0 #>     final_data[, c(\"only_3d_coordinates_predict\")] <- list(NULL) #>     df <- data.frame(matrix(rep(NA, 6), nrow = 1))[numeric(0),  #>         ] #>     colnames(df) <- c(\"ID\", \"result\", \"predict\", \"change\", \"iter1\",  #>         \"iter2\") #>     D$id2 <- 0 #>     D[, c(\"id2\")] <- list(NULL) #>     if (phenotype == \"Target\") { #>         D$result <- D$Type2 #>     } #>     else { #>         D$result <- D$Type3 #>     } #>     oldw <- getOption(\"warn\") #>     options(warn = -1) #>     D <- rowid_to_column(D, var = \"id2\") #>     for (i2 in 1:5) { #>         D$id3 <- D$id2 #>         j <- 5 #>         dat1 <- D %>% stratified(., group = \"result\", size = 1/j) #>         dat1$iter <- 1 #>         datzan <- D[-dat1$id2, ] #>         for (i in 2:j) { #>             datzan[, c(\"id2\")] <- list(NULL) #>             datzan <- rowid_to_column(datzan, var = \"id2\") #>             if (i != j) { #>                 dat2 <- datzan %>% stratified(., group = \"result\",  #>                   size = 1/(j - i + 1)) #>             } #>             else { #>                 dat2 <- datzan #>             } #>             dat2$iter <- i #>             datzan <- datzan[-dat2$id2, ] #>             dat1 <- rbind(dat1, dat2) #>         } #>         dat1[, c(\"id2\")] <- list(NULL) #>         dat1 <- rowid_to_column(dat1, var = \"id2\") #>         for (i in 1:j) { #>             val <- dat1[dat1$iter == i, ] #>             train.data <- dat1[-val$id2, ] #>             rf <- randomForest(result ~ x + y + z, train.data,  #>                 importance = TRUE) #>             f <- data.frame(ID = val$ID, result = val$result,  #>                 predict = predict(rf, val), change = val$change,  #>                 iter1 = i, iter2 = i2) #>             df <- rbind(df, f) #>         } #>     } #>     for (i in 1:30) { #>         rf <- randomForest(result ~ x + y + z, D) #>         f <- data.frame(ID = final_data$ID, predict = predict(rf,  #>             final_data), n = i) #>         fpredict <- rbind(fpredict, f) #>     } #>     options(warn = oldw) #>     fpredictb <- fpredict %>% group_by(ID) %>% summarise(only_3d_coordinates_predict = mean(predict)) #>     ID <- str_split(fpredictb$ID, pattern = \":\", simplify = TRUE) #>     for (i in 1:nrow(fpredictb)) { #>         if (ID[i, 5] == ID[i, 7]) { #>             fpredictb$predict[i] = 0 #>         } #>     } #>     final_data <- merge(fpredictb, final_data) #>     fwrite(final_data, MOVA_final_predict_file) #>     df$iter3 <- df$iter1 + (df$iter2 * 5) #>     out <- cvAUC(df$predict, df$result, label.ordering = NULL,  #>         folds = df$iter3) #>     plot(out$perf, col = \"green\", avg = \"vertical\", add = TRUE) #>     cvauc <- out$cvAUC #>     YI2 <- data.frame(matrix(rep(NA, 5), nrow = 1))[numeric(0),  #>         ] #>     colnames(YI2) <- c(\"Cutoff\", \"positive_variant_num\", \"negative_variant_num\",  #>         \"AUC\", \"cvauc\") #>     for (i in 6:30) { #>         pred <- prediction(df[df$iter3 == i, ]$predict, df[df$iter3 ==  #>             i, ]$result) #>         auc.tmp <- performance(pred, \"auc\") #>         auc <- as.numeric(auc.tmp@y.values) #>         tab <- data.frame(Cutoff = unlist(pred@cutoffs), TP = unlist(pred@tp),  #>             FP = unlist(pred@fp), FN = unlist(pred@fn), TN = unlist(pred@tn),  #>             Sensitivity = unlist(pred@tp)/(unlist(pred@tp) +  #>                 unlist(pred@fn)), Specificity = unlist(pred@tn)/(unlist(pred@fp) +  #>                 unlist(pred@tn)), Accuracy = ((unlist(pred@tp) +  #>                 unlist(pred@tn))/nrow(df)), Precision = (unlist(pred@tp)/(unlist(pred@tp) +  #>                 unlist(pred@fp)))) #>         tab$Youden <- tab$Sensitivity + tab$Specificity - 1 #>         YI <- tab[order(tab$Youden, decreasing = T), ] #>         YI <- data.frame(Cutoff = YI$Cutoff[1], positive_variant_num = c(nrow(df[(df$result ==  #>             1) & (df$iter2 == 1), ])), negative_variant_num = c(nrow(df[(df$result ==  #>             0) & (df$iter2 == 1), ])), AUC = c(auc), cvauc = c(cvauc)) #>         YI2 <- rbind(YI2, YI) #>     } #>     fwrite(YI2, paste(protein_name, phenotype, \"result_only_3d_coordinates.csv\",  #>         sep = \"_\")) #>     df2 <- df %>% group_by(ID) %>% summarise(only_3d_coordinates_predict = mean(predict)) #>     D[, c(\"result\")] <- list(NULL) #>     fwrite(merge(D, df2), MOVA_predict_file) #>     fwrite(df, paste(protein_name, phenotype, \"predict_orig_only_3d_coordinates.csv\",  #>         sep = \"_\")) #>     return(YI2) #>   } #> <environment: 0x0000011a8478b868>"},{"path":"/reference/MOVA_only_3d_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"A simple baseline approach based on distance to the known pathogenic variants\r\n — MOVA_only_3d_distance","title":"A simple baseline approach based on distance to the known pathogenic variants\r\n — MOVA_only_3d_distance","text":"function evaluates whether pathogenicity can predicted distance variant interest known pathogenic variant using Stratified 5-fold cross validation method.","code":""},{"path":"/reference/MOVA_only_3d_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A simple baseline approach based on distance to the known pathogenic variants\r\n — MOVA_only_3d_distance","text":"","code":"MOVA_only_3d_distance(protein_name, MOVA_final_predict_file, MOVA_predict_file, phenotype = \"Target\")"},{"path":"/reference/MOVA_only_3d_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A simple baseline approach based on distance to the known pathogenic variants\r\n — MOVA_only_3d_distance","text":"protein_name Name target protein/gene. Used name file exported. MOVA_final_predict_file \"gene name_Target Pathogenic_finalpredict.csv\" file output MOVA function. final MOVA_only_3d_distance predicted values file. MOVA_predict_file \"gene name_Target Pathogenic_predict.csv\" file output MOVA function. phenotype Specify \"Target\" want positive variant Target variant , \"Pathogenic\" want include Pathogenic variant well. default \"Target\".","code":""},{"path":"/reference/MOVA_only_3d_distance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A simple baseline approach based on distance to the known pathogenic variants\r\n — MOVA_only_3d_distance","text":"Draw ROC curve MOVA_only_3d_distance (black).  MOVA_only_3d_distance evaluated using Stratified 5-fold cross validation method, model repeated five times. average distance known pathogenic variants added \"t_distance\" column MOVA_predict_file. \"protein/gene name_Target Pathogenic_result_only_3d_distance.csv\" contains Cutoff value (Youden index) fold (Column: Cutoff), number positive variants gene used analysis (Column: positive_variant_num), number negative variants (Column: negative_variant_num), AUC fold MOVA_only_3d_distance (Column: AUC), cvAUC MOVA_only_3d_distance (Column: cvauc). file required redrawing MOVA_redraw function MOVA_only_3d_distance output \"protein/gene name_Target Pathogenic_predict_orig_only_3d_distance.csv\".","code":""},{"path":"/reference/MOVA_only_3d_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A simple baseline approach based on distance to the known pathogenic variants\r\n — MOVA_only_3d_distance","text":"data.frame containing Cutoff value (Youden index) fold (Column: Cutoff), number positive variants gene used analysis (Column: positive_variant_num), number negative variants (Column: negative_variant_num), AUC fold MOVA_only_3d_distance (Column: AUC), cvAUC MOVA_only_3d_distance (Column: cvauc). data output \"protein/gene name_Target Pathogenic_result_only_3d_distance.csv\".","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"/reference/MOVA_only_3d_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A simple baseline approach based on distance to the known pathogenic variants\r\n — MOVA_only_3d_distance","text":"","code":"##---- Should be DIRECTLY executable !! ---- ##-- ==>  Define data, use random, ##--  or do  help(data=index)  for the standard data sets.  ## The function is currently defined as function (protein_name, MOVA_final_predict_file, MOVA_predict_file,      phenotype = \"Target\")  {     D <- fread(MOVA_predict_file)     D$t_distance <- 0     D[, c(\"t_distance\")] <- list(NULL)     if (phenotype == \"Target\") {         D <- D[(D$Type == \"Target\") | (D$Type == \"Ctrl\"), ]     }     fpredict <- data.frame(matrix(rep(NA, 2), nrow = 1))[numeric(0),          ]     colnames(fpredict) <- c(\"ID\", \"distance\")     final_data <- fread(MOVA_final_predict_file)     df <- data.frame(matrix(rep(NA, 6), nrow = 1))[numeric(0),          ]     colnames(df) <- c(\"ID\", \"re_result\", \"distance\", \"change\",          \"iter1\", \"iter2\")     D$id2 <- 0     D[, c(\"id2\")] <- list(NULL)     D$re_result <- 0     D[, c(\"re_result\")] <- list(NULL)     D$t_distance <- 0     D[, c(\"t_distance\")] <- list(NULL)     D$iter1 <- 0     D[, c(\"iter1\")] <- list(NULL)     D$iter2 <- 0     D[, c(\"iter2\")] <- list(NULL)     if (phenotype == \"Target\") {         D$result <- D$Type2     }     else {         D$result <- D$Type3     }     oldw <- getOption(\"warn\")     options(warn = -1)     D <- rowid_to_column(D, var = \"id2\")     for (i2 in 1:5) {         D$id3 <- D$id2         j <- 5         dat1 <- D %>% stratified(., group = \"result\", size = 1/j)         dat1$iter <- 1         datzan <- D[-dat1$id2, ]         for (i in 2:j) {             datzan[, c(\"id2\")] <- list(NULL)             datzan <- rowid_to_column(datzan, var = \"id2\")             if (i != j) {                 dat2 <- datzan %>% stratified(., group = \"result\",                    size = 1/(j - i + 1))             }             else {                 dat2 <- datzan             }             dat2$iter <- i             datzan <- datzan[-dat2$id2, ]             dat1 <- rbind(dat1, dat2)         }         dat1[, c(\"id2\")] <- list(NULL)         dat1 <- rowid_to_column(dat1, var = \"id2\")         for (i in 1:j) {             val <- dat1[dat1$iter == i, ]             train.data <- dat1[-val$id2, ]             x <- train.data[train.data$result == 1, ]$x             y <- train.data[train.data$result == 1, ]$y             z <- train.data[train.data$result == 1, ]$z             for (i3 in 1:nrow(val)) {                 f <- data.frame(ID = val[i3]$ID, re_result = abs(val[i3]$result -                    1), t_distance = min(sqrt((x - val[i3]$x) *                    (x - val[i3]$x) + (y - val[i3]$y) * (y - val[i3]$y) +                    (z - val[i3]$z) * (z - val[i3]$z))), change = val[i3]$change,                    iter1 = i, iter2 = i2)                 df <- rbind(df, f)             }         }     }     options(warn = oldw)     df$iter3 <- df$iter1 + (df$iter2 * 5)     out <- cvAUC(df$t_distance, df$re_result, label.ordering = NULL,          folds = df$iter3)     plot(out$perf, col = \"black\", avg = \"vertical\", add = TRUE)     cvauc <- out$cvAUC     YI2 <- data.frame(matrix(rep(NA, 5), nrow = 1))[numeric(0),          ]     colnames(YI2) <- c(\"Cutoff\", \"positive_variant_num\", \"negative_variant_num\",          \"AUC\", \"cvauc\")     for (i in 6:30) {         pred <- prediction(df[df$iter3 == i, ]$t_distance, df[df$iter3 ==              i, ]$re_result)         auc.tmp <- performance(pred, \"auc\")         auc <- as.numeric(auc.tmp@y.values)         tab <- data.frame(Cutoff = unlist(pred@cutoffs), TP = unlist(pred@tp),              FP = unlist(pred@fp), FN = unlist(pred@fn), TN = unlist(pred@tn),              Sensitivity = unlist(pred@tp)/(unlist(pred@tp) +                  unlist(pred@fn)), Specificity = unlist(pred@tn)/(unlist(pred@fp) +                  unlist(pred@tn)), Accuracy = ((unlist(pred@tp) +                  unlist(pred@tn))/nrow(df)), Precision = (unlist(pred@tp)/(unlist(pred@tp) +                  unlist(pred@fp))))         tab$Youden <- tab$Sensitivity + tab$Specificity - 1         YI <- tab[order(tab$Youden, decreasing = T), ]         YI <- data.frame(Cutoff = YI$Cutoff[1], positive_variant_num = c(nrow(df[(df$re_result ==              0) & (df$iter2 == 1), ])), negative_variant_num = c(nrow(df[(df$re_result ==              1) & (df$iter2 == 1), ])), AUC = c(auc), cvauc = c(cvauc))         YI2 <- rbind(YI2, YI)     }     fwrite(YI2, paste(protein_name, phenotype, \"result_only_3d_distance.csv\",          sep = \"_\"))     df2 <- df %>% group_by(ID) %>% summarise(t_distance = mean(t_distance))     D[, c(\"result\")] <- list(NULL)     fwrite(merge(D, df2), MOVA_predict_file)     fwrite(df, paste(protein_name, phenotype, \"predict_orig_only_3d_distance.csv\",          sep = \"_\"))     return(YI2)   } #> function (protein_name, MOVA_final_predict_file, MOVA_predict_file,  #>     phenotype = \"Target\")  #> { #>     D <- fread(MOVA_predict_file) #>     D$t_distance <- 0 #>     D[, c(\"t_distance\")] <- list(NULL) #>     if (phenotype == \"Target\") { #>         D <- D[(D$Type == \"Target\") | (D$Type == \"Ctrl\"), ] #>     } #>     fpredict <- data.frame(matrix(rep(NA, 2), nrow = 1))[numeric(0),  #>         ] #>     colnames(fpredict) <- c(\"ID\", \"distance\") #>     final_data <- fread(MOVA_final_predict_file) #>     df <- data.frame(matrix(rep(NA, 6), nrow = 1))[numeric(0),  #>         ] #>     colnames(df) <- c(\"ID\", \"re_result\", \"distance\", \"change\",  #>         \"iter1\", \"iter2\") #>     D$id2 <- 0 #>     D[, c(\"id2\")] <- list(NULL) #>     D$re_result <- 0 #>     D[, c(\"re_result\")] <- list(NULL) #>     D$t_distance <- 0 #>     D[, c(\"t_distance\")] <- list(NULL) #>     D$iter1 <- 0 #>     D[, c(\"iter1\")] <- list(NULL) #>     D$iter2 <- 0 #>     D[, c(\"iter2\")] <- list(NULL) #>     if (phenotype == \"Target\") { #>         D$result <- D$Type2 #>     } #>     else { #>         D$result <- D$Type3 #>     } #>     oldw <- getOption(\"warn\") #>     options(warn = -1) #>     D <- rowid_to_column(D, var = \"id2\") #>     for (i2 in 1:5) { #>         D$id3 <- D$id2 #>         j <- 5 #>         dat1 <- D %>% stratified(., group = \"result\", size = 1/j) #>         dat1$iter <- 1 #>         datzan <- D[-dat1$id2, ] #>         for (i in 2:j) { #>             datzan[, c(\"id2\")] <- list(NULL) #>             datzan <- rowid_to_column(datzan, var = \"id2\") #>             if (i != j) { #>                 dat2 <- datzan %>% stratified(., group = \"result\",  #>                   size = 1/(j - i + 1)) #>             } #>             else { #>                 dat2 <- datzan #>             } #>             dat2$iter <- i #>             datzan <- datzan[-dat2$id2, ] #>             dat1 <- rbind(dat1, dat2) #>         } #>         dat1[, c(\"id2\")] <- list(NULL) #>         dat1 <- rowid_to_column(dat1, var = \"id2\") #>         for (i in 1:j) { #>             val <- dat1[dat1$iter == i, ] #>             train.data <- dat1[-val$id2, ] #>             x <- train.data[train.data$result == 1, ]$x #>             y <- train.data[train.data$result == 1, ]$y #>             z <- train.data[train.data$result == 1, ]$z #>             for (i3 in 1:nrow(val)) { #>                 f <- data.frame(ID = val[i3]$ID, re_result = abs(val[i3]$result -  #>                   1), t_distance = min(sqrt((x - val[i3]$x) *  #>                   (x - val[i3]$x) + (y - val[i3]$y) * (y - val[i3]$y) +  #>                   (z - val[i3]$z) * (z - val[i3]$z))), change = val[i3]$change,  #>                   iter1 = i, iter2 = i2) #>                 df <- rbind(df, f) #>             } #>         } #>     } #>     options(warn = oldw) #>     df$iter3 <- df$iter1 + (df$iter2 * 5) #>     out <- cvAUC(df$t_distance, df$re_result, label.ordering = NULL,  #>         folds = df$iter3) #>     plot(out$perf, col = \"black\", avg = \"vertical\", add = TRUE) #>     cvauc <- out$cvAUC #>     YI2 <- data.frame(matrix(rep(NA, 5), nrow = 1))[numeric(0),  #>         ] #>     colnames(YI2) <- c(\"Cutoff\", \"positive_variant_num\", \"negative_variant_num\",  #>         \"AUC\", \"cvauc\") #>     for (i in 6:30) { #>         pred <- prediction(df[df$iter3 == i, ]$t_distance, df[df$iter3 ==  #>             i, ]$re_result) #>         auc.tmp <- performance(pred, \"auc\") #>         auc <- as.numeric(auc.tmp@y.values) #>         tab <- data.frame(Cutoff = unlist(pred@cutoffs), TP = unlist(pred@tp),  #>             FP = unlist(pred@fp), FN = unlist(pred@fn), TN = unlist(pred@tn),  #>             Sensitivity = unlist(pred@tp)/(unlist(pred@tp) +  #>                 unlist(pred@fn)), Specificity = unlist(pred@tn)/(unlist(pred@fp) +  #>                 unlist(pred@tn)), Accuracy = ((unlist(pred@tp) +  #>                 unlist(pred@tn))/nrow(df)), Precision = (unlist(pred@tp)/(unlist(pred@tp) +  #>                 unlist(pred@fp)))) #>         tab$Youden <- tab$Sensitivity + tab$Specificity - 1 #>         YI <- tab[order(tab$Youden, decreasing = T), ] #>         YI <- data.frame(Cutoff = YI$Cutoff[1], positive_variant_num = c(nrow(df[(df$re_result ==  #>             0) & (df$iter2 == 1), ])), negative_variant_num = c(nrow(df[(df$re_result ==  #>             1) & (df$iter2 == 1), ])), AUC = c(auc), cvauc = c(cvauc)) #>         YI2 <- rbind(YI2, YI) #>     } #>     fwrite(YI2, paste(protein_name, phenotype, \"result_only_3d_distance.csv\",  #>         sep = \"_\")) #>     df2 <- df %>% group_by(ID) %>% summarise(t_distance = mean(t_distance)) #>     D[, c(\"result\")] <- list(NULL) #>     fwrite(merge(D, df2), MOVA_predict_file) #>     fwrite(df, paste(protein_name, phenotype, \"predict_orig_only_3d_distance.csv\",  #>         sep = \"_\")) #>     return(YI2) #>   } #> <environment: 0x0000011a8737a180>"},{"path":"/reference/MOVA_only_BLOSUM62.html","id":null,"dir":"Reference","previous_headings":"","what":"MOVA with only BLOSUM62 as explanatory variable.\r\n — MOVA_only_BLOSUM62","title":"MOVA with only BLOSUM62 as explanatory variable.\r\n — MOVA_only_BLOSUM62","text":"function Random forest BLOSUM62 explanatory variable pathogenicity variant objective variable.","code":""},{"path":"/reference/MOVA_only_BLOSUM62.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MOVA with only BLOSUM62 as explanatory variable.\r\n — MOVA_only_BLOSUM62","text":"","code":"MOVA_only_BLOSUM62(protein_name, MOVA_final_predict_file, MOVA_predict_file, phenotype = \"Target\")"},{"path":"/reference/MOVA_only_BLOSUM62.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MOVA with only BLOSUM62 as explanatory variable.\r\n — MOVA_only_BLOSUM62","text":"protein_name Name target protein/gene. Used name file exported. MOVA_final_predict_file \"gene name_Target Pathogenic_finalpredict.csv\" file output MOVA function. final MOVA_3d_distance predicted values file. MOVA_predict_file \"gene name_Target Pathogenic_predict.csv\" file output MOVA function. phenotype Specify \"Target\" want positive variant Target variant , \"Pathogenic\" want include Pathogenic variant well. default \"Target\".","code":""},{"path":"/reference/MOVA_only_BLOSUM62.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MOVA with only BLOSUM62 as explanatory variable.\r\n — MOVA_only_BLOSUM62","text":"Draw ROC curve MOVA_only_BLOSUM62 (yellow). MOVA_only_BLOSUM62 evaluated using Stratified 5-fold cross validation method, model repeated five times. average predicted values added \"only_BLOSUM62_predict\" column MOVA_predict_file. final MOVA_only_BLOSUM62 predicted value added \"only_BLOSUM62_predict\" column MOVA_final_predict_file. \"protein/gene name_Target Pathogenic_result_only_BLOSUM62.csv\" contains Cutoff value (Youden index) fold (Column: Cutoff), number positive variants gene used analysis (Column: positive_variant_num), number negative variants (Column: negative_variant_num), AUC fold MOVA_only_BLOSUM62 (Column: AUC), cvAUC MOVA_only_BLOSUM62 (Column: cvauc). file required redrawing MOVA_redraw function MOVA_only_BLOSUM62 output \"protein/gene name_Target Pathogenic_predict_orig_only_BLOSUM62.csv\".","code":""},{"path":"/reference/MOVA_only_BLOSUM62.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MOVA with only BLOSUM62 as explanatory variable.\r\n — MOVA_only_BLOSUM62","text":"data.frame containing Cutoff value (Youden index) fold (Column: Cutoff), number positive variants gene used analysis (Column: positive_variant_num), number negative variants (Column: negative_variant_num), AUC fold MOVA_only_BLOSUM62 (Column: AUC), cvAUC MOVA_only_BLOSUM62 (Column: cvauc). data output \"protein/gene name_Target Pathogenic_result_only_BLOSUM62.csv\".","code":""},{"path":[]},{"path":"/reference/MOVA_only_BLOSUM62.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"MOVA with only BLOSUM62 as explanatory variable.\r\n — MOVA_only_BLOSUM62","text":"Yuya Hatano","code":""},{"path":[]},{"path":[]},{"path":"/reference/MOVA_only_BLOSUM62.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MOVA with only BLOSUM62 as explanatory variable.\r\n — MOVA_only_BLOSUM62","text":"","code":"Hgmd_divide(\"./source/TARDBP.csv\") #> Error in fread(hgmd_file_name): File './source/TARDBP.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_gnomAD_file(\"./source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv\", \"./source/TARDBP_gnomAD.csv\") #> Error in fread(input_file_name): File './source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_variant_data(\"../CADD_REVEL/AlphScore_final.tsv\", \"./source/TARDBP.csv\", \"./source/TARDBP_gnomAD.csv\", \"Q13148\", \"TARDBP\", \"./source/TARDBPvariantdata.csv\") #> Error in fread(AlphScore_final_file): File '../CADD_REVEL/AlphScore_final.tsv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_polyphen_data(\"../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1\",\"./source/TARDBPvariantdata.csv\", \"TARDBP_alph.csv\",  \"Q13148\",  11012654, 11025492 ,\"./source/TARDBPvariantdatapol.csv\", \"./source/TARDBP_alphpol.csv\") #> Error in fread(dbNSFP4.3a_final_file): File '../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_final_variant_file(\"./source/TARDBP_alphpol.csv\",\"./source/TARDBP_alphpol2.csv\") #> Error in fread(input_file_name): File './source/TARDBP_alphpol.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA(\"./source/Q13148.fa\", \"TARDBP\", \"./source/AF-Q13148-F1-model_v2.pdb\",\"./source/TARDBP_alphpol2.csv\", \"./source/TARDBPvariantdatapol.csv\") #> Warning: data set 'BLOSUM62' not found #> Warning: cannot open file './source/Q13148.fa': No such file or directory #> Error in file(con, \"r\"): cannot open the connection MOVA_without_3d_coordinates(\"TARDBP\", \"TARDBP_Target_finalpredict.csv\",\"TARDBP_Target_predict.csv\") #> Error in fread(MOVA_predict_file): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA_only_pLDDT(\"TARDBP\", \"TARDBP_Target_finalpredict.csv\",\"TARDBP_Target_predict.csv\") #> Error in fread(MOVA_predict_file): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA_only_BLOSUM62(\"TARDBP\", \"TARDBP_Target_finalpredict.csv\",\"TARDBP_Target_predict.csv\") #> Error in fread(MOVA_predict_file): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA_only_3d_coordinates(\"TARDBP\", \"TARDBP_Target_finalpredict.csv\",\"TARDBP_Target_predict.csv\") #> Error in fread(MOVA_predict_file): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference'  ## The function is currently defined as function (protein_name, MOVA_final_predict_file, MOVA_predict_file,      phenotype = \"Target\")  {     D <- fread(MOVA_predict_file)     D$only_BLOSUM62_predict <- 0     D[, c(\"only_BLOSUM62_predict\")] <- list(NULL)     if (phenotype == \"Target\") {         D <- D[(D$Type == \"Target\") | (D$Type == \"Ctrl\"), ]     }     fpredict <- data.frame(matrix(rep(NA, 3), nrow = 1))[numeric(0),          ]     colnames(fpredict) <- c(\"change\", \"predict\", \"n\")     final_data <- fread(MOVA_final_predict_file)     final_data$only_BLOSUM62_predict <- 0     final_data[, c(\"only_BLOSUM62_predict\")] <- list(NULL)     df <- data.frame(matrix(rep(NA, 6), nrow = 1))[numeric(0),          ]     colnames(df) <- c(\"ID\", \"result\", \"predict\", \"change\", \"iter1\",          \"iter2\")     D$id2 <- 0     D[, c(\"id2\")] <- list(NULL)     if (phenotype == \"Target\") {         D$result <- D$Type2     }     else {         D$result <- D$Type3     }     oldw <- getOption(\"warn\")     options(warn = -1)     D <- rowid_to_column(D, var = \"id2\")     for (i2 in 1:5) {         D$id3 <- D$id2         j <- 5         dat1 <- D %>% stratified(., group = \"result\", size = 1/j)         dat1$iter <- 1         datzan <- D[-dat1$id2, ]         for (i in 2:j) {             datzan[, c(\"id2\")] <- list(NULL)             datzan <- rowid_to_column(datzan, var = \"id2\")             if (i != j) {                 dat2 <- datzan %>% stratified(., group = \"result\",                    size = 1/(j - i + 1))             }             else {                 dat2 <- datzan             }             dat2$iter <- i             datzan <- datzan[-dat2$id2, ]             dat1 <- rbind(dat1, dat2)         }         dat1[, c(\"id2\")] <- list(NULL)         dat1 <- rowid_to_column(dat1, var = \"id2\")         for (i in 1:j) {             val <- dat1[dat1$iter == i, ]             train.data <- dat1[-val$id2, ]             rf <- randomForest(result ~ con, train.data, importance = TRUE)             f <- data.frame(ID = val$ID, result = val$result,                  predict = predict(rf, val), change = val$change,                  iter1 = i, iter2 = i2)             df <- rbind(df, f)         }     }     for (i in 1:30) {         rf <- randomForest(result ~ con, D)         f <- data.frame(ID = final_data$ID, predict = predict(rf,              final_data), n = i)         fpredict <- rbind(fpredict, f)     }     options(warn = oldw)     fpredictb <- fpredict %>% group_by(ID) %>% summarise(only_BLOSUM62_predict = mean(predict))     ID <- str_split(fpredictb$ID, pattern = \":\", simplify = TRUE)     for (i in 1:nrow(fpredictb)) {         if (ID[i, 5] == ID[i, 7]) {             fpredictb$predict[i] = 0         }     }     final_data <- merge(fpredictb, final_data)     fwrite(final_data, MOVA_final_predict_file)     df$iter3 <- df$iter1 + (df$iter2 * 5)     out <- cvAUC(df$predict, df$result, label.ordering = NULL,          folds = df$iter3)     plot(out$perf, col = \"yellow\", avg = \"vertical\", add = TRUE)     cvauc <- out$cvAUC     YI2 <- data.frame(matrix(rep(NA, 5), nrow = 1))[numeric(0),          ]     colnames(YI2) <- c(\"Cutoff\", \"positive_variant_num\", \"negative_variant_num\",          \"AUC\", \"cvauc\")     for (i in 6:30) {         pred <- prediction(df[df$iter3 == i, ]$predict, df[df$iter3 ==              i, ]$result)         auc.tmp <- performance(pred, \"auc\")         auc <- as.numeric(auc.tmp@y.values)         tab <- data.frame(Cutoff = unlist(pred@cutoffs), TP = unlist(pred@tp),              FP = unlist(pred@fp), FN = unlist(pred@fn), TN = unlist(pred@tn),              Sensitivity = unlist(pred@tp)/(unlist(pred@tp) +                  unlist(pred@fn)), Specificity = unlist(pred@tn)/(unlist(pred@fp) +                  unlist(pred@tn)), Accuracy = ((unlist(pred@tp) +                  unlist(pred@tn))/nrow(df)), Precision = (unlist(pred@tp)/(unlist(pred@tp) +                  unlist(pred@fp))))         tab$Youden <- tab$Sensitivity + tab$Specificity - 1         YI <- tab[order(tab$Youden, decreasing = T), ]         YI <- data.frame(Cutoff = YI$Cutoff[1], positive_variant_num = c(nrow(df[(df$result ==              1) & (df$iter2 == 1), ])), negative_variant_num = c(nrow(df[(df$result ==              0) & (df$iter2 == 1), ])), AUC = c(auc), cvauc = c(cvauc))         YI2 <- rbind(YI2, YI)     }     fwrite(YI2, paste(protein_name, phenotype, \"result_only_BLOSUM62.csv\",          sep = \"_\"))     df2 <- df %>% group_by(ID) %>% summarise(only_BLOSUM62_predict = mean(predict))     D[, c(\"result\")] <- list(NULL)     fwrite(merge(D, df2), MOVA_predict_file)     fwrite(df, paste(protein_name, phenotype, \"predict_orig_only_BLOSUM62.csv\",          sep = \"_\"))     return(YI2)   } #> function (protein_name, MOVA_final_predict_file, MOVA_predict_file,  #>     phenotype = \"Target\")  #> { #>     D <- fread(MOVA_predict_file) #>     D$only_BLOSUM62_predict <- 0 #>     D[, c(\"only_BLOSUM62_predict\")] <- list(NULL) #>     if (phenotype == \"Target\") { #>         D <- D[(D$Type == \"Target\") | (D$Type == \"Ctrl\"), ] #>     } #>     fpredict <- data.frame(matrix(rep(NA, 3), nrow = 1))[numeric(0),  #>         ] #>     colnames(fpredict) <- c(\"change\", \"predict\", \"n\") #>     final_data <- fread(MOVA_final_predict_file) #>     final_data$only_BLOSUM62_predict <- 0 #>     final_data[, c(\"only_BLOSUM62_predict\")] <- list(NULL) #>     df <- data.frame(matrix(rep(NA, 6), nrow = 1))[numeric(0),  #>         ] #>     colnames(df) <- c(\"ID\", \"result\", \"predict\", \"change\", \"iter1\",  #>         \"iter2\") #>     D$id2 <- 0 #>     D[, c(\"id2\")] <- list(NULL) #>     if (phenotype == \"Target\") { #>         D$result <- D$Type2 #>     } #>     else { #>         D$result <- D$Type3 #>     } #>     oldw <- getOption(\"warn\") #>     options(warn = -1) #>     D <- rowid_to_column(D, var = \"id2\") #>     for (i2 in 1:5) { #>         D$id3 <- D$id2 #>         j <- 5 #>         dat1 <- D %>% stratified(., group = \"result\", size = 1/j) #>         dat1$iter <- 1 #>         datzan <- D[-dat1$id2, ] #>         for (i in 2:j) { #>             datzan[, c(\"id2\")] <- list(NULL) #>             datzan <- rowid_to_column(datzan, var = \"id2\") #>             if (i != j) { #>                 dat2 <- datzan %>% stratified(., group = \"result\",  #>                   size = 1/(j - i + 1)) #>             } #>             else { #>                 dat2 <- datzan #>             } #>             dat2$iter <- i #>             datzan <- datzan[-dat2$id2, ] #>             dat1 <- rbind(dat1, dat2) #>         } #>         dat1[, c(\"id2\")] <- list(NULL) #>         dat1 <- rowid_to_column(dat1, var = \"id2\") #>         for (i in 1:j) { #>             val <- dat1[dat1$iter == i, ] #>             train.data <- dat1[-val$id2, ] #>             rf <- randomForest(result ~ con, train.data, importance = TRUE) #>             f <- data.frame(ID = val$ID, result = val$result,  #>                 predict = predict(rf, val), change = val$change,  #>                 iter1 = i, iter2 = i2) #>             df <- rbind(df, f) #>         } #>     } #>     for (i in 1:30) { #>         rf <- randomForest(result ~ con, D) #>         f <- data.frame(ID = final_data$ID, predict = predict(rf,  #>             final_data), n = i) #>         fpredict <- rbind(fpredict, f) #>     } #>     options(warn = oldw) #>     fpredictb <- fpredict %>% group_by(ID) %>% summarise(only_BLOSUM62_predict = mean(predict)) #>     ID <- str_split(fpredictb$ID, pattern = \":\", simplify = TRUE) #>     for (i in 1:nrow(fpredictb)) { #>         if (ID[i, 5] == ID[i, 7]) { #>             fpredictb$predict[i] = 0 #>         } #>     } #>     final_data <- merge(fpredictb, final_data) #>     fwrite(final_data, MOVA_final_predict_file) #>     df$iter3 <- df$iter1 + (df$iter2 * 5) #>     out <- cvAUC(df$predict, df$result, label.ordering = NULL,  #>         folds = df$iter3) #>     plot(out$perf, col = \"yellow\", avg = \"vertical\", add = TRUE) #>     cvauc <- out$cvAUC #>     YI2 <- data.frame(matrix(rep(NA, 5), nrow = 1))[numeric(0),  #>         ] #>     colnames(YI2) <- c(\"Cutoff\", \"positive_variant_num\", \"negative_variant_num\",  #>         \"AUC\", \"cvauc\") #>     for (i in 6:30) { #>         pred <- prediction(df[df$iter3 == i, ]$predict, df[df$iter3 ==  #>             i, ]$result) #>         auc.tmp <- performance(pred, \"auc\") #>         auc <- as.numeric(auc.tmp@y.values) #>         tab <- data.frame(Cutoff = unlist(pred@cutoffs), TP = unlist(pred@tp),  #>             FP = unlist(pred@fp), FN = unlist(pred@fn), TN = unlist(pred@tn),  #>             Sensitivity = unlist(pred@tp)/(unlist(pred@tp) +  #>                 unlist(pred@fn)), Specificity = unlist(pred@tn)/(unlist(pred@fp) +  #>                 unlist(pred@tn)), Accuracy = ((unlist(pred@tp) +  #>                 unlist(pred@tn))/nrow(df)), Precision = (unlist(pred@tp)/(unlist(pred@tp) +  #>                 unlist(pred@fp)))) #>         tab$Youden <- tab$Sensitivity + tab$Specificity - 1 #>         YI <- tab[order(tab$Youden, decreasing = T), ] #>         YI <- data.frame(Cutoff = YI$Cutoff[1], positive_variant_num = c(nrow(df[(df$result ==  #>             1) & (df$iter2 == 1), ])), negative_variant_num = c(nrow(df[(df$result ==  #>             0) & (df$iter2 == 1), ])), AUC = c(auc), cvauc = c(cvauc)) #>         YI2 <- rbind(YI2, YI) #>     } #>     fwrite(YI2, paste(protein_name, phenotype, \"result_only_BLOSUM62.csv\",  #>         sep = \"_\")) #>     df2 <- df %>% group_by(ID) %>% summarise(only_BLOSUM62_predict = mean(predict)) #>     D[, c(\"result\")] <- list(NULL) #>     fwrite(merge(D, df2), MOVA_predict_file) #>     fwrite(df, paste(protein_name, phenotype, \"predict_orig_only_BLOSUM62.csv\",  #>         sep = \"_\")) #>     return(YI2) #>   } #> <environment: 0x0000011afd5d9240>"},{"path":"/reference/MOVA_only_pLDDT.html","id":null,"dir":"Reference","previous_headings":"","what":"MOVA with only pLDDT as explanatory variable.\r\n — MOVA_only_pLDDT","title":"MOVA with only pLDDT as explanatory variable.\r\n — MOVA_only_pLDDT","text":"function Random forest pLDDT explanatory variable pathogenicity variant objective variable.","code":""},{"path":"/reference/MOVA_only_pLDDT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MOVA with only pLDDT as explanatory variable.\r\n — MOVA_only_pLDDT","text":"","code":"MOVA_only_pLDDT(protein_name, MOVA_final_predict_file, MOVA_predict_file, phenotype = \"Target\")"},{"path":"/reference/MOVA_only_pLDDT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MOVA with only pLDDT as explanatory variable.\r\n — MOVA_only_pLDDT","text":"protein_name Name target protein/gene. Used name file exported. MOVA_final_predict_file \"gene name_Target Pathogenic_finalpredict.csv\" file output MOVA function. final MOVA_3d_distance predicted values file. MOVA_predict_file \"gene name_Target Pathogenic_predict.csv\" file output MOVA function. phenotype Specify \"Target\" want positive variant Target variant , \"Pathogenic\" want include Pathogenic variant well. default \"Target\".","code":""},{"path":"/reference/MOVA_only_pLDDT.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MOVA with only pLDDT as explanatory variable.\r\n — MOVA_only_pLDDT","text":"Draw ROC curve MOVA_only_pLDDT (blue). MOVA_only_pLDDT evaluated using Stratified 5-fold cross validation method, model repeated five times. average predicted values added \"only_pLDDT_predict\" column MOVA_predict_file. final MOVA_only_pLDDT predicted value added \"only_pLDDT_predict\" column MOVA_final_predict_file. \"protein/gene name_Target Pathogenic_result_only_pLDDT.csv\" contains Cutoff value (Youden index) fold (Column: Cutoff), number positive variants gene used analysis (Column: positive_variant_num), number negative variants (Column: negative_variant_num), AUC fold MOVA_only_pLDDT (Column: AUC), cvAUC MOVA_only_pLDDT (Column: cvauc). file required redrawing MOVA_redraw function MOVA_only_pLDDT output \"protein/gene name_Target Pathogenic_predict_orig_only_pLDDT.csv\".","code":""},{"path":"/reference/MOVA_only_pLDDT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MOVA with only pLDDT as explanatory variable.\r\n — MOVA_only_pLDDT","text":"data.frame containing Cutoff value (Youden index) fold (Column: Cutoff), number positive variants gene used analysis (Column: positive_variant_num), number negative variants (Column: negative_variant_num), AUC fold MOVA_only_pLDDT (Column: AUC), cvAUC MOVA_only_pLDDT (Column: cvauc). data output \"protein/gene name_Target Pathogenic_result_only_pLDDT.csv\".","code":""},{"path":[]},{"path":"/reference/MOVA_only_pLDDT.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"MOVA with only pLDDT as explanatory variable.\r\n — MOVA_only_pLDDT","text":"Yuya Hatano","code":""},{"path":[]},{"path":[]},{"path":"/reference/MOVA_only_pLDDT.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MOVA with only pLDDT as explanatory variable.\r\n — MOVA_only_pLDDT","text":"","code":"Hgmd_divide(\"./source/TARDBP.csv\") #> Error in fread(hgmd_file_name): File './source/TARDBP.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_gnomAD_file(\"./source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv\", \"./source/TARDBP_gnomAD.csv\") #> Error in fread(input_file_name): File './source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_variant_data(\"../CADD_REVEL/AlphScore_final.tsv\", \"./source/TARDBP.csv\", \"./source/TARDBP_gnomAD.csv\", \"Q13148\", \"TARDBP\", \"./source/TARDBPvariantdata.csv\") #> Error in fread(AlphScore_final_file): File '../CADD_REVEL/AlphScore_final.tsv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_polyphen_data(\"../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1\",\"./source/TARDBPvariantdata.csv\", \"TARDBP_alph.csv\",  \"Q13148\",  11012654, 11025492 ,\"./source/TARDBPvariantdatapol.csv\", \"./source/TARDBP_alphpol.csv\") #> Error in fread(dbNSFP4.3a_final_file): File '../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_final_variant_file(\"./source/TARDBP_alphpol.csv\",\"./source/TARDBP_alphpol2.csv\") #> Error in fread(input_file_name): File './source/TARDBP_alphpol.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA(\"./source/Q13148.fa\", \"TARDBP\", \"./source/AF-Q13148-F1-model_v2.pdb\",\"./source/TARDBP_alphpol2.csv\", \"./source/TARDBPvariantdatapol.csv\") #> Warning: data set 'BLOSUM62' not found #> Warning: cannot open file './source/Q13148.fa': No such file or directory #> Error in file(con, \"r\"): cannot open the connection MOVA_without_3d_coordinates(\"TARDBP\", \"TARDBP_Target_finalpredict.csv\",\"TARDBP_Target_predict.csv\") #> Error in fread(MOVA_predict_file): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA_only_pLDDT(\"TARDBP\", \"TARDBP_Target_finalpredict.csv\",\"TARDBP_Target_predict.csv\") #> Error in fread(MOVA_predict_file): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA_only_BLOSUM62(\"TARDBP\", \"TARDBP_Target_finalpredict.csv\",\"TARDBP_Target_predict.csv\") #> Error in fread(MOVA_predict_file): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA_only_3d_coordinates(\"TARDBP\", \"TARDBP_Target_finalpredict.csv\",\"TARDBP_Target_predict.csv\") #> Error in fread(MOVA_predict_file): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference'  ## The function is currently defined as function (protein_name, MOVA_final_predict_file, MOVA_predict_file,      phenotype = \"Target\")  {     D <- fread(MOVA_predict_file)     D$only_pLDDT_predict <- 0     D[, c(\"only_pLDDT_predict\")] <- list(NULL)     if (phenotype == \"Target\") {         D <- D[(D$Type == \"Target\") | (D$Type == \"Ctrl\"), ]     }     fpredict <- data.frame(matrix(rep(NA, 3), nrow = 1))[numeric(0),          ]     colnames(fpredict) <- c(\"change\", \"predict\", \"n\")     final_data <- fread(MOVA_final_predict_file)     final_data$only_pLDDT_predict <- 0     final_data[, c(\"only_pLDDT_predict\")] <- list(NULL)     df <- data.frame(matrix(rep(NA, 6), nrow = 1))[numeric(0),          ]     colnames(df) <- c(\"ID\", \"result\", \"predict\", \"change\", \"iter1\",          \"iter2\")     D$id2 <- 0     D[, c(\"id2\")] <- list(NULL)     if (phenotype == \"Target\") {         D$result <- D$Type2     }     else {         D$result <- D$Type3     }     oldw <- getOption(\"warn\")     options(warn = -1)     D <- rowid_to_column(D, var = \"id2\")     for (i2 in 1:5) {         D$id3 <- D$id2         j <- 5         dat1 <- D %>% stratified(., group = \"result\", size = 1/j)         dat1$iter <- 1         datzan <- D[-dat1$id2, ]         for (i in 2:j) {             datzan[, c(\"id2\")] <- list(NULL)             datzan <- rowid_to_column(datzan, var = \"id2\")             if (i != j) {                 dat2 <- datzan %>% stratified(., group = \"result\",                    size = 1/(j - i + 1))             }             else {                 dat2 <- datzan             }             dat2$iter <- i             datzan <- datzan[-dat2$id2, ]             dat1 <- rbind(dat1, dat2)         }         dat1[, c(\"id2\")] <- list(NULL)         dat1 <- rowid_to_column(dat1, var = \"id2\")         for (i in 1:j) {             val <- dat1[dat1$iter == i, ]             train.data <- dat1[-val$id2, ]             rf <- randomForest(result ~ b, train.data, importance = TRUE)             f <- data.frame(ID = val$ID, result = val$result,                  predict = predict(rf, val), change = val$change,                  iter1 = i, iter2 = i2)             df <- rbind(df, f)         }     }     for (i in 1:30) {         rf <- randomForest(result ~ b, D)         f <- data.frame(ID = final_data$ID, predict = predict(rf,              final_data), n = i)         fpredict <- rbind(fpredict, f)     }     options(warn = oldw)     fpredictb <- fpredict %>% group_by(ID) %>% summarise(only_pLDDT_predict = mean(predict))     ID <- str_split(fpredictb$ID, pattern = \":\", simplify = TRUE)     for (i in 1:nrow(fpredictb)) {         if (ID[i, 5] == ID[i, 7]) {             fpredictb$predict[i] = 0         }     }     final_data <- merge(fpredictb, final_data)     fwrite(final_data, MOVA_final_predict_file)     df$iter3 <- df$iter1 + (df$iter2 * 5)     out <- cvAUC(df$predict, df$result, label.ordering = NULL,          folds = df$iter3)     plot(out$perf, col = \"blue\", avg = \"vertical\", add = TRUE)     cvauc <- out$cvAUC     YI2 <- data.frame(matrix(rep(NA, 5), nrow = 1))[numeric(0),          ]     colnames(YI2) <- c(\"Cutoff\", \"positive_variant_num\", \"negative_variant_num\",          \"AUC\", \"cvauc\")     for (i in 6:30) {         pred <- prediction(df[df$iter3 == i, ]$predict, df[df$iter3 ==              i, ]$result)         auc.tmp <- performance(pred, \"auc\")         auc <- as.numeric(auc.tmp@y.values)         tab <- data.frame(Cutoff = unlist(pred@cutoffs), TP = unlist(pred@tp),              FP = unlist(pred@fp), FN = unlist(pred@fn), TN = unlist(pred@tn),              Sensitivity = unlist(pred@tp)/(unlist(pred@tp) +                  unlist(pred@fn)), Specificity = unlist(pred@tn)/(unlist(pred@fp) +                  unlist(pred@tn)), Accuracy = ((unlist(pred@tp) +                  unlist(pred@tn))/nrow(df)), Precision = (unlist(pred@tp)/(unlist(pred@tp) +                  unlist(pred@fp))))         tab$Youden <- tab$Sensitivity + tab$Specificity - 1         YI <- tab[order(tab$Youden, decreasing = T), ]         YI <- data.frame(Cutoff = YI$Cutoff[1], positive_variant_num = c(nrow(df[(df$result ==              1) & (df$iter2 == 1), ])), negative_variant_num = c(nrow(df[(df$result ==              0) & (df$iter2 == 1), ])), AUC = c(auc), cvauc = c(cvauc))         YI2 <- rbind(YI2, YI)     }     fwrite(YI2, paste(protein_name, phenotype, \"result_only_pLDDT.csv\",          sep = \"_\"))     df2 <- df %>% group_by(ID) %>% summarise(only_pLDDT_predict = mean(predict))     D[, c(\"result\")] <- list(NULL)     fwrite(merge(D, df2), MOVA_predict_file)     fwrite(df, paste(protein_name, phenotype, \"predict_orig_only_pLDDT.csv\",          sep = \"_\"))     return(YI2)   } #> function (protein_name, MOVA_final_predict_file, MOVA_predict_file,  #>     phenotype = \"Target\")  #> { #>     D <- fread(MOVA_predict_file) #>     D$only_pLDDT_predict <- 0 #>     D[, c(\"only_pLDDT_predict\")] <- list(NULL) #>     if (phenotype == \"Target\") { #>         D <- D[(D$Type == \"Target\") | (D$Type == \"Ctrl\"), ] #>     } #>     fpredict <- data.frame(matrix(rep(NA, 3), nrow = 1))[numeric(0),  #>         ] #>     colnames(fpredict) <- c(\"change\", \"predict\", \"n\") #>     final_data <- fread(MOVA_final_predict_file) #>     final_data$only_pLDDT_predict <- 0 #>     final_data[, c(\"only_pLDDT_predict\")] <- list(NULL) #>     df <- data.frame(matrix(rep(NA, 6), nrow = 1))[numeric(0),  #>         ] #>     colnames(df) <- c(\"ID\", \"result\", \"predict\", \"change\", \"iter1\",  #>         \"iter2\") #>     D$id2 <- 0 #>     D[, c(\"id2\")] <- list(NULL) #>     if (phenotype == \"Target\") { #>         D$result <- D$Type2 #>     } #>     else { #>         D$result <- D$Type3 #>     } #>     oldw <- getOption(\"warn\") #>     options(warn = -1) #>     D <- rowid_to_column(D, var = \"id2\") #>     for (i2 in 1:5) { #>         D$id3 <- D$id2 #>         j <- 5 #>         dat1 <- D %>% stratified(., group = \"result\", size = 1/j) #>         dat1$iter <- 1 #>         datzan <- D[-dat1$id2, ] #>         for (i in 2:j) { #>             datzan[, c(\"id2\")] <- list(NULL) #>             datzan <- rowid_to_column(datzan, var = \"id2\") #>             if (i != j) { #>                 dat2 <- datzan %>% stratified(., group = \"result\",  #>                   size = 1/(j - i + 1)) #>             } #>             else { #>                 dat2 <- datzan #>             } #>             dat2$iter <- i #>             datzan <- datzan[-dat2$id2, ] #>             dat1 <- rbind(dat1, dat2) #>         } #>         dat1[, c(\"id2\")] <- list(NULL) #>         dat1 <- rowid_to_column(dat1, var = \"id2\") #>         for (i in 1:j) { #>             val <- dat1[dat1$iter == i, ] #>             train.data <- dat1[-val$id2, ] #>             rf <- randomForest(result ~ b, train.data, importance = TRUE) #>             f <- data.frame(ID = val$ID, result = val$result,  #>                 predict = predict(rf, val), change = val$change,  #>                 iter1 = i, iter2 = i2) #>             df <- rbind(df, f) #>         } #>     } #>     for (i in 1:30) { #>         rf <- randomForest(result ~ b, D) #>         f <- data.frame(ID = final_data$ID, predict = predict(rf,  #>             final_data), n = i) #>         fpredict <- rbind(fpredict, f) #>     } #>     options(warn = oldw) #>     fpredictb <- fpredict %>% group_by(ID) %>% summarise(only_pLDDT_predict = mean(predict)) #>     ID <- str_split(fpredictb$ID, pattern = \":\", simplify = TRUE) #>     for (i in 1:nrow(fpredictb)) { #>         if (ID[i, 5] == ID[i, 7]) { #>             fpredictb$predict[i] = 0 #>         } #>     } #>     final_data <- merge(fpredictb, final_data) #>     fwrite(final_data, MOVA_final_predict_file) #>     df$iter3 <- df$iter1 + (df$iter2 * 5) #>     out <- cvAUC(df$predict, df$result, label.ordering = NULL,  #>         folds = df$iter3) #>     plot(out$perf, col = \"blue\", avg = \"vertical\", add = TRUE) #>     cvauc <- out$cvAUC #>     YI2 <- data.frame(matrix(rep(NA, 5), nrow = 1))[numeric(0),  #>         ] #>     colnames(YI2) <- c(\"Cutoff\", \"positive_variant_num\", \"negative_variant_num\",  #>         \"AUC\", \"cvauc\") #>     for (i in 6:30) { #>         pred <- prediction(df[df$iter3 == i, ]$predict, df[df$iter3 ==  #>             i, ]$result) #>         auc.tmp <- performance(pred, \"auc\") #>         auc <- as.numeric(auc.tmp@y.values) #>         tab <- data.frame(Cutoff = unlist(pred@cutoffs), TP = unlist(pred@tp),  #>             FP = unlist(pred@fp), FN = unlist(pred@fn), TN = unlist(pred@tn),  #>             Sensitivity = unlist(pred@tp)/(unlist(pred@tp) +  #>                 unlist(pred@fn)), Specificity = unlist(pred@tn)/(unlist(pred@fp) +  #>                 unlist(pred@tn)), Accuracy = ((unlist(pred@tp) +  #>                 unlist(pred@tn))/nrow(df)), Precision = (unlist(pred@tp)/(unlist(pred@tp) +  #>                 unlist(pred@fp)))) #>         tab$Youden <- tab$Sensitivity + tab$Specificity - 1 #>         YI <- tab[order(tab$Youden, decreasing = T), ] #>         YI <- data.frame(Cutoff = YI$Cutoff[1], positive_variant_num = c(nrow(df[(df$result ==  #>             1) & (df$iter2 == 1), ])), negative_variant_num = c(nrow(df[(df$result ==  #>             0) & (df$iter2 == 1), ])), AUC = c(auc), cvauc = c(cvauc)) #>         YI2 <- rbind(YI2, YI) #>     } #>     fwrite(YI2, paste(protein_name, phenotype, \"result_only_pLDDT.csv\",  #>         sep = \"_\")) #>     df2 <- df %>% group_by(ID) %>% summarise(only_pLDDT_predict = mean(predict)) #>     D[, c(\"result\")] <- list(NULL) #>     fwrite(merge(D, df2), MOVA_predict_file) #>     fwrite(df, paste(protein_name, phenotype, \"predict_orig_only_pLDDT.csv\",  #>         sep = \"_\")) #>     return(YI2) #>   } #> <environment: 0x0000011afda3a190>"},{"path":"/reference/MOVA_plus_3d_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Add 'distance to the known pathogenic variant' as an explanatory variable to the MOVA.\r\n — MOVA_plus_3d_distance","title":"Add 'distance to the known pathogenic variant' as an explanatory variable to the MOVA.\r\n — MOVA_plus_3d_distance","text":"function trained random forest 'distance known pathogenic variant', ΔBLOSUM62, 3D location information, pLDDT explanatory variables pathogenicity variant objective variable. MOVA_predistance function must performed function.","code":""},{"path":"/reference/MOVA_plus_3d_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add 'distance to the known pathogenic variant' as an explanatory variable to the MOVA.\r\n — MOVA_plus_3d_distance","text":"","code":"MOVA_plus_3d_distance(protein_name, MOVA_final_predict_file, MOVA_predict_file, phenotype = \"Target\")"},{"path":"/reference/MOVA_plus_3d_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add 'distance to the known pathogenic variant' as an explanatory variable to the MOVA.\r\n — MOVA_plus_3d_distance","text":"protein_name Name target protein/gene. Used name file exported. MOVA_final_predict_file \"gene name_Target Pathogenic_finalpredict.csv\" file output MOVA function. final MOVA_3d_distance predicted values file. MOVA_predict_file \"gene name_Target Pathogenic_predict.csv\" file output MOVA function. phenotype Specify \"Target\" want positive variant Target variant , \"Pathogenic\" want include Pathogenic variant well. default \"Target\".","code":""},{"path":"/reference/MOVA_plus_3d_distance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add 'distance to the known pathogenic variant' as an explanatory variable to the MOVA.\r\n — MOVA_plus_3d_distance","text":"Draw ROC curve MOVA_plus_3d_distance (blue). MOVA_plus_3d_distance evaluated using Stratified 5-fold cross validation method, model repeated five times. average predicted values added \"MOVA_plus_3d_distance_predict\" column MOVA_predict_file. final MOVA_plus_3d_distance predicted value added \"MOVA_plus_3d_distance_predict\" column MOVA_final_predict_file. \"protein/gene name_Target Pathogenic_result_plus_3d_distance.csv\" contains Cutoff value (Youden index) fold (Column: Cutoff), number positive variants gene used analysis (Column: positive_variant_num), number negative variants (Column: negative_variant_num), AUC fold MOVA_plus_3d_distance (Column: AUC), cvAUC MOVA_plus_3d_distance (Column: cvauc). file required redrawing MOVA_redraw function MOVA_plus_3d_distance output \"protein/gene name_Target Pathogenic_predict_orig_plus_3d_distance.csv\".","code":""},{"path":"/reference/MOVA_plus_3d_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add 'distance to the known pathogenic variant' as an explanatory variable to the MOVA.\r\n — MOVA_plus_3d_distance","text":"data.frame containing Cutoff value (Youden index) fold (Column: Cutoff), number positive variants gene used analysis (Column: positive_variant_num), number negative variants (Column: negative_variant_num), AUC fold MOVA_plus_3d_distance (Column: AUC), cvAUC MOVA_plus_3d_distance (Column: cvauc). data output \"protein/gene name_Target Pathogenic_result_plus_3d_distance.csv\".","code":""},{"path":[]},{"path":"/reference/MOVA_plus_3d_distance.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add 'distance to the known pathogenic variant' as an explanatory variable to the MOVA.\r\n — MOVA_plus_3d_distance","text":"Yuya Hatano","code":""},{"path":[]},{"path":[]},{"path":"/reference/MOVA_plus_3d_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add 'distance to the known pathogenic variant' as an explanatory variable to the MOVA.\r\n — MOVA_plus_3d_distance","text":"","code":"Hgmd_divide(\"./source/TARDBP.csv\") #> Error in fread(hgmd_file_name): File './source/TARDBP.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_gnomAD_file(\"./source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv\", \"./source/TARDBP_gnomAD.csv\") #> Error in fread(input_file_name): File './source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_variant_data(\"../CADD_REVEL/AlphScore_final.tsv\", \"./source/TARDBP.csv\", \"./source/TARDBP_gnomAD.csv\", \"Q13148\", \"TARDBP\", \"./source/TARDBPvariantdata.csv\") #> Error in fread(AlphScore_final_file): File '../CADD_REVEL/AlphScore_final.tsv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_polyphen_data(\"../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1\",\"./source/TARDBPvariantdata.csv\", \"TARDBP_alph.csv\",  \"Q13148\",  11012654, 11025492 ,\"./source/TARDBPvariantdatapol.csv\", \"./source/TARDBP_alphpol.csv\") #> Error in fread(dbNSFP4.3a_final_file): File '../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_final_variant_file(\"./source/TARDBP_alphpol.csv\",\"./source/TARDBP_alphpol2.csv\") #> Error in fread(input_file_name): File './source/TARDBP_alphpol.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA(\"./source/Q13148.fa\", \"TARDBP\", \"./source/AF-Q13148-F1-model_v2.pdb\",\"./source/TARDBP_alphpol2.csv\", \"./source/TARDBPvariantdatapol.csv\") #> Warning: data set 'BLOSUM62' not found #> Warning: cannot open file './source/Q13148.fa': No such file or directory #> Error in file(con, \"r\"): cannot open the connection MOVA_predistance(\"TARDBP\", \"TARDBP_Target_finalpredict.csv\",\"TARDBP_Target_predict.csv\") #> Error in fread(MOVA_predict_file): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA_only_3d_distance(\"TARDBP\", \"TARDBP_Target_finalpredict.csv\",\"TARDBP_Target_predict.csv\") #> Error in fread(MOVA_predict_file): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA_plus_3d_distance(\"TARDBP\", \"TARDBP_Target_finalpredict.csv\",\"TARDBP_Target_predict.csv\") #> Error in fread(MOVA_predict_file): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference'   ## The function is currently defined as function (protein_name, MOVA_final_predict_file, MOVA_predict_file,      phenotype = \"Target\")  {     D <- fread(MOVA_predict_file)     D$MOVA_plus_3d_distance_predict <- 0     D[, c(\"MOVA_plus_3d_distance_predict\")] <- list(NULL)     if (phenotype == \"Target\") {         D <- D[(D$Type == \"Target\") | (D$Type == \"Ctrl\"), ]     }     fpredict <- data.frame(matrix(rep(NA, 3), nrow = 1))[numeric(0),          ]     colnames(fpredict) <- c(\"change\", \"predict\", \"n\")     imp.rfa <- data.frame(matrix(rep(NA, 3), nrow = 1))[numeric(0),          ]     colnames(imp.rfa) <- c(\"name\", \"IncNodePurity\", \"n\")     final_data <- fread(MOVA_final_predict_file)     final_data$MOVA_plus_3d_distance_predict <- 0     final_data[, c(\"MOVA_plus_3d_distance_predict\")] <- list(NULL)     df <- data.frame(matrix(rep(NA, 6), nrow = 1))[numeric(0),          ]     colnames(df) <- c(\"ID\", \"re_result\", \"distance\", \"change\",          \"iter1\", \"iter2\")     D$id2 <- 0     D[, c(\"id2\")] <- list(NULL)     if (phenotype == \"Target\") {         D$result <- D$Type2     }     else {         D$result <- D$Type3     }     oldw <- getOption(\"warn\")     options(warn = -1)     D <- rowid_to_column(D, var = \"id2\")     for (i2 in 1:5) {         D$id3 <- D$id2         j <- 5         dat1 <- D %>% stratified(., group = \"result\", size = 1/j)         dat1$iter <- 1         datzan <- D[-dat1$id2, ]         for (i in 2:j) {             datzan[, c(\"id2\")] <- list(NULL)             datzan <- rowid_to_column(datzan, var = \"id2\")             if (i != j) {                 dat2 <- datzan %>% stratified(., group = \"result\",                    size = 1/(j - i + 1))             }             else {                 dat2 <- datzan             }             dat2$iter <- i             datzan <- datzan[-dat2$id2, ]             dat1 <- rbind(dat1, dat2)         }         dat1[, c(\"id2\")] <- list(NULL)         dat1 <- rowid_to_column(dat1, var = \"id2\")         for (i in 1:j) {             val <- dat1[dat1$iter == i, ]             train.data <- dat1[-val$id2, ]             x <- train.data[train.data$result == 1, ]$x             y <- train.data[train.data$result == 1, ]$y             z <- train.data[train.data$result == 1, ]$z             train.data$t_distance <- 0             for (i3 in 1:nrow(train.data)) {                 t_distance <- sqrt((x - train.data[i3]$x) * (x -                    train.data[i3]$x) + (y - train.data[i3]$y) *                    (y - train.data[i3]$y) + (z - train.data[i3]$z) *                    (z - train.data[i3]$z))                 t_distance <- sort(t_distance, decreasing = F)                 if (train.data[i3]$result == 1) {                   train.data[i3]$t_distance <- t_distance[2]                 }                 else {                   train.data[i3]$t_distance <- t_distance[1]                 }             }             rf <- randomForest(result ~ con + x + y + z + t_distance +                  b, train.data, importance = TRUE)             imp.rf <- importance(rf)             x <- train.data[train.data$result == 1, ]$x             y <- train.data[train.data$result == 1, ]$y             z <- train.data[train.data$result == 1, ]$z             val$t_distance <- 0             for (i3 in 1:nrow(val)) {                 val[i3]$t_distance <- min(sqrt((x - val[i3]$x) *                    (x - val[i3]$x) + (y - val[i3]$y) * (y - val[i3]$y) +                    (z - val[i3]$z) * (z - val[i3]$z)))             }             f <- data.frame(ID = val$ID, result = val$result,                  predict = predict(rf, val), change = val$change,                  iter1 = i, iter2 = i2)             df <- rbind(df, f)         }     }     f <- data.frame(name = rownames(imp.rf), IncNodePurity = imp.rf,          n = i)     imp.rfa <- rbind(imp.rfa, f)     x <- D[D$result == 1, ]$x     y <- D[D$result == 1, ]$y     z <- D[D$result == 1, ]$z     D$t_distance <- 0     for (i3 in 1:nrow(D)) {         t_distance <- sqrt((x - D[i3]$x) * (x - D[i3]$x) + (y -              D[i3]$y) * (y - D[i3]$y) + (z - D[i3]$z) * (z - D[i3]$z))         t_distance <- sort(t_distance, decreasing = F)         if (D[i3]$result == 1) {             D[i3]$t_distance <- t_distance[2]         }         else {             D[i3]$t_distance <- t_distance[1]         }     }     for (i in 1:30) {         rf <- randomForest(result ~ con + x + y + z + t_distance +              b, D)         f <- data.frame(ID = final_data$ID, predict = predict(rf,              final_data), n = i)         fpredict <- rbind(fpredict, f)     }     options(warn = oldw)     fpredictb <- fpredict %>% group_by(ID) %>% summarise(MOVA_plus_3d_distance_predict = mean(predict))     imp.rfb <- imp.rfa %>% group_by(name) %>% summarise(IncMSE = mean(IncNodePurity..IncMSE),          IncNodePurity = mean(IncNodePurity.IncNodePurity))     final_data <- merge(fpredictb, final_data)     fwrite(final_data, MOVA_final_predict_file)     fwrite(imp.rfb, paste(protein_name, phenotype, \"importance_plus_3d_distance.csv\",          sep = \"_\"))     df$iter3 <- df$iter1 + (df$iter2 * 5)     out <- cvAUC(df$predict, df$result, label.ordering = NULL,          folds = df$iter3)     plot(out$perf, col = \"blue\", avg = \"vertical\", add = TRUE)     cvauc <- out$cvAUC     YI2 <- data.frame(matrix(rep(NA, 5), nrow = 1))[numeric(0),          ]     colnames(YI2) <- c(\"Cutoff\", \"positive_variant_num\", \"negative_variant_num\",          \"AUC\", \"cvauc\")     for (i in 6:30) {         pred <- prediction(df[df$iter3 == i, ]$predict, df[df$iter3 ==              i, ]$result)         auc.tmp <- performance(pred, \"auc\")         auc <- as.numeric(auc.tmp@y.values)         tab <- data.frame(Cutoff = unlist(pred@cutoffs), TP = unlist(pred@tp),              FP = unlist(pred@fp), FN = unlist(pred@fn), TN = unlist(pred@tn),              Sensitivity = unlist(pred@tp)/(unlist(pred@tp) +                  unlist(pred@fn)), Specificity = unlist(pred@tn)/(unlist(pred@fp) +                  unlist(pred@tn)), Accuracy = ((unlist(pred@tp) +                  unlist(pred@tn))/nrow(df)), Precision = (unlist(pred@tp)/(unlist(pred@tp) +                  unlist(pred@fp))))         tab$Youden <- tab$Sensitivity + tab$Specificity - 1         YI <- tab[order(tab$Youden, decreasing = T), ]         YI <- data.frame(Cutoff = YI$Cutoff[1], positive_variant_num = c(nrow(df[(df$result ==              1) & (df$iter2 == 1), ])), negative_variant_num = c(nrow(df[(df$result ==              0) & (df$iter2 == 1), ])), AUC = c(auc), cvauc = c(cvauc))         YI2 <- rbind(YI2, YI)     }     fwrite(YI2, paste(protein_name, phenotype, \"result_plus_3d_distance.csv\",          sep = \"_\"))     df2 <- df %>% group_by(ID) %>% summarise(MOVA_plus_3d_distance_predict = mean(predict))     D[, c(\"result\")] <- list(NULL)     fwrite(merge(D, df2), MOVA_predict_file)     fwrite(df, paste(protein_name, phenotype, \"predict_orig_plus_3d_distance.csv\",          sep = \"_\"))     return(YI2)   } #> function (protein_name, MOVA_final_predict_file, MOVA_predict_file,  #>     phenotype = \"Target\")  #> { #>     D <- fread(MOVA_predict_file) #>     D$MOVA_plus_3d_distance_predict <- 0 #>     D[, c(\"MOVA_plus_3d_distance_predict\")] <- list(NULL) #>     if (phenotype == \"Target\") { #>         D <- D[(D$Type == \"Target\") | (D$Type == \"Ctrl\"), ] #>     } #>     fpredict <- data.frame(matrix(rep(NA, 3), nrow = 1))[numeric(0),  #>         ] #>     colnames(fpredict) <- c(\"change\", \"predict\", \"n\") #>     imp.rfa <- data.frame(matrix(rep(NA, 3), nrow = 1))[numeric(0),  #>         ] #>     colnames(imp.rfa) <- c(\"name\", \"IncNodePurity\", \"n\") #>     final_data <- fread(MOVA_final_predict_file) #>     final_data$MOVA_plus_3d_distance_predict <- 0 #>     final_data[, c(\"MOVA_plus_3d_distance_predict\")] <- list(NULL) #>     df <- data.frame(matrix(rep(NA, 6), nrow = 1))[numeric(0),  #>         ] #>     colnames(df) <- c(\"ID\", \"re_result\", \"distance\", \"change\",  #>         \"iter1\", \"iter2\") #>     D$id2 <- 0 #>     D[, c(\"id2\")] <- list(NULL) #>     if (phenotype == \"Target\") { #>         D$result <- D$Type2 #>     } #>     else { #>         D$result <- D$Type3 #>     } #>     oldw <- getOption(\"warn\") #>     options(warn = -1) #>     D <- rowid_to_column(D, var = \"id2\") #>     for (i2 in 1:5) { #>         D$id3 <- D$id2 #>         j <- 5 #>         dat1 <- D %>% stratified(., group = \"result\", size = 1/j) #>         dat1$iter <- 1 #>         datzan <- D[-dat1$id2, ] #>         for (i in 2:j) { #>             datzan[, c(\"id2\")] <- list(NULL) #>             datzan <- rowid_to_column(datzan, var = \"id2\") #>             if (i != j) { #>                 dat2 <- datzan %>% stratified(., group = \"result\",  #>                   size = 1/(j - i + 1)) #>             } #>             else { #>                 dat2 <- datzan #>             } #>             dat2$iter <- i #>             datzan <- datzan[-dat2$id2, ] #>             dat1 <- rbind(dat1, dat2) #>         } #>         dat1[, c(\"id2\")] <- list(NULL) #>         dat1 <- rowid_to_column(dat1, var = \"id2\") #>         for (i in 1:j) { #>             val <- dat1[dat1$iter == i, ] #>             train.data <- dat1[-val$id2, ] #>             x <- train.data[train.data$result == 1, ]$x #>             y <- train.data[train.data$result == 1, ]$y #>             z <- train.data[train.data$result == 1, ]$z #>             train.data$t_distance <- 0 #>             for (i3 in 1:nrow(train.data)) { #>                 t_distance <- sqrt((x - train.data[i3]$x) * (x -  #>                   train.data[i3]$x) + (y - train.data[i3]$y) *  #>                   (y - train.data[i3]$y) + (z - train.data[i3]$z) *  #>                   (z - train.data[i3]$z)) #>                 t_distance <- sort(t_distance, decreasing = F) #>                 if (train.data[i3]$result == 1) { #>                   train.data[i3]$t_distance <- t_distance[2] #>                 } #>                 else { #>                   train.data[i3]$t_distance <- t_distance[1] #>                 } #>             } #>             rf <- randomForest(result ~ con + x + y + z + t_distance +  #>                 b, train.data, importance = TRUE) #>             imp.rf <- importance(rf) #>             x <- train.data[train.data$result == 1, ]$x #>             y <- train.data[train.data$result == 1, ]$y #>             z <- train.data[train.data$result == 1, ]$z #>             val$t_distance <- 0 #>             for (i3 in 1:nrow(val)) { #>                 val[i3]$t_distance <- min(sqrt((x - val[i3]$x) *  #>                   (x - val[i3]$x) + (y - val[i3]$y) * (y - val[i3]$y) +  #>                   (z - val[i3]$z) * (z - val[i3]$z))) #>             } #>             f <- data.frame(ID = val$ID, result = val$result,  #>                 predict = predict(rf, val), change = val$change,  #>                 iter1 = i, iter2 = i2) #>             df <- rbind(df, f) #>         } #>     } #>     f <- data.frame(name = rownames(imp.rf), IncNodePurity = imp.rf,  #>         n = i) #>     imp.rfa <- rbind(imp.rfa, f) #>     x <- D[D$result == 1, ]$x #>     y <- D[D$result == 1, ]$y #>     z <- D[D$result == 1, ]$z #>     D$t_distance <- 0 #>     for (i3 in 1:nrow(D)) { #>         t_distance <- sqrt((x - D[i3]$x) * (x - D[i3]$x) + (y -  #>             D[i3]$y) * (y - D[i3]$y) + (z - D[i3]$z) * (z - D[i3]$z)) #>         t_distance <- sort(t_distance, decreasing = F) #>         if (D[i3]$result == 1) { #>             D[i3]$t_distance <- t_distance[2] #>         } #>         else { #>             D[i3]$t_distance <- t_distance[1] #>         } #>     } #>     for (i in 1:30) { #>         rf <- randomForest(result ~ con + x + y + z + t_distance +  #>             b, D) #>         f <- data.frame(ID = final_data$ID, predict = predict(rf,  #>             final_data), n = i) #>         fpredict <- rbind(fpredict, f) #>     } #>     options(warn = oldw) #>     fpredictb <- fpredict %>% group_by(ID) %>% summarise(MOVA_plus_3d_distance_predict = mean(predict)) #>     imp.rfb <- imp.rfa %>% group_by(name) %>% summarise(IncMSE = mean(IncNodePurity..IncMSE),  #>         IncNodePurity = mean(IncNodePurity.IncNodePurity)) #>     final_data <- merge(fpredictb, final_data) #>     fwrite(final_data, MOVA_final_predict_file) #>     fwrite(imp.rfb, paste(protein_name, phenotype, \"importance_plus_3d_distance.csv\",  #>         sep = \"_\")) #>     df$iter3 <- df$iter1 + (df$iter2 * 5) #>     out <- cvAUC(df$predict, df$result, label.ordering = NULL,  #>         folds = df$iter3) #>     plot(out$perf, col = \"blue\", avg = \"vertical\", add = TRUE) #>     cvauc <- out$cvAUC #>     YI2 <- data.frame(matrix(rep(NA, 5), nrow = 1))[numeric(0),  #>         ] #>     colnames(YI2) <- c(\"Cutoff\", \"positive_variant_num\", \"negative_variant_num\",  #>         \"AUC\", \"cvauc\") #>     for (i in 6:30) { #>         pred <- prediction(df[df$iter3 == i, ]$predict, df[df$iter3 ==  #>             i, ]$result) #>         auc.tmp <- performance(pred, \"auc\") #>         auc <- as.numeric(auc.tmp@y.values) #>         tab <- data.frame(Cutoff = unlist(pred@cutoffs), TP = unlist(pred@tp),  #>             FP = unlist(pred@fp), FN = unlist(pred@fn), TN = unlist(pred@tn),  #>             Sensitivity = unlist(pred@tp)/(unlist(pred@tp) +  #>                 unlist(pred@fn)), Specificity = unlist(pred@tn)/(unlist(pred@fp) +  #>                 unlist(pred@tn)), Accuracy = ((unlist(pred@tp) +  #>                 unlist(pred@tn))/nrow(df)), Precision = (unlist(pred@tp)/(unlist(pred@tp) +  #>                 unlist(pred@fp)))) #>         tab$Youden <- tab$Sensitivity + tab$Specificity - 1 #>         YI <- tab[order(tab$Youden, decreasing = T), ] #>         YI <- data.frame(Cutoff = YI$Cutoff[1], positive_variant_num = c(nrow(df[(df$result ==  #>             1) & (df$iter2 == 1), ])), negative_variant_num = c(nrow(df[(df$result ==  #>             0) & (df$iter2 == 1), ])), AUC = c(auc), cvauc = c(cvauc)) #>         YI2 <- rbind(YI2, YI) #>     } #>     fwrite(YI2, paste(protein_name, phenotype, \"result_plus_3d_distance.csv\",  #>         sep = \"_\")) #>     df2 <- df %>% group_by(ID) %>% summarise(MOVA_plus_3d_distance_predict = mean(predict)) #>     D[, c(\"result\")] <- list(NULL) #>     fwrite(merge(D, df2), MOVA_predict_file) #>     fwrite(df, paste(protein_name, phenotype, \"predict_orig_plus_3d_distance.csv\",  #>         sep = \"_\")) #>     return(YI2) #>   } #> <environment: 0x0000011afdd93700>"},{"path":"/reference/MOVA_plus_3d_distance_SVM.html","id":null,"dir":"Reference","previous_headings":"","what":"Add 'distance to the known pathogenic variant' to the explanatory variables of MOVA and train with SVM.\r\n — MOVA_plus_3d_distance_SVM","title":"Add 'distance to the known pathogenic variant' to the explanatory variables of MOVA and train with SVM.\r\n — MOVA_plus_3d_distance_SVM","text":"function trained Support vector machine 'distance known pathogenic variant', ΔBLOSUM62, 3D location information, pLDDT explanatory variables pathogenicity variant objective variable. MOVA_predistance function must performed function.","code":""},{"path":"/reference/MOVA_plus_3d_distance_SVM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add 'distance to the known pathogenic variant' to the explanatory variables of MOVA and train with SVM.\r\n — MOVA_plus_3d_distance_SVM","text":"","code":"MOVA_plus_3d_distance_SVM(protein_name, MOVA_final_predict_file, MOVA_predict_file, phenotype = \"Target\")"},{"path":"/reference/MOVA_plus_3d_distance_SVM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add 'distance to the known pathogenic variant' to the explanatory variables of MOVA and train with SVM.\r\n — MOVA_plus_3d_distance_SVM","text":"protein_name Name target protein/gene. Used name file exported. MOVA_final_predict_file \"gene name_Target Pathogenic_finalpredict.csv\" file output MOVA function. final MOVA_3d_distance predicted values file. MOVA_predict_file \"gene name_Target Pathogenic_predict.csv\" file output MOVA function. phenotype Specify \"Target\" want positive variant Target variant , \"Pathogenic\" want include Pathogenic variant well. default \"Target\".","code":""},{"path":"/reference/MOVA_plus_3d_distance_SVM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add 'distance to the known pathogenic variant' to the explanatory variables of MOVA and train with SVM.\r\n — MOVA_plus_3d_distance_SVM","text":"Draw ROC curve MOVA_plus_3d_distance_SVM (blue). MOVA_plus_3d_distance_SVM evaluated using Stratified 5-fold cross validation method, model repeated five times. average predicted values added \"MOVA_plus_3d_distance_SVM_predict\" column MOVA_predict_file. final MOVA_plus_3d_distance_SVM predicted value added \"MOVA_plus_3d_distance_SVM_predict\" column MOVA_final_predict_file. \"protein/gene name_Target Pathogenic_result_plus_3d_distance_SVM.csv\" contains Cutoff value (Youden index) fold (Column: Cutoff), number positive variants gene used analysis (Column: positive_variant_num), number negative variants (Column: negative_variant_num), AUC fold MOVA_plus_3d_distance_SVM (Column: AUC), cvAUC MOVA_plus_3d_distance_SVM (Column: cvauc). file required redrawing MOVA_redraw function MOVA_plus_3d_distance_SVM output \"protein/gene name_Target Pathogenic_predict_orig_plus_3d_distance_SVM.csv\".","code":""},{"path":"/reference/MOVA_plus_3d_distance_SVM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add 'distance to the known pathogenic variant' to the explanatory variables of MOVA and train with SVM.\r\n — MOVA_plus_3d_distance_SVM","text":"data.frame containing Cutoff value (Youden index) fold (Column: Cutoff), number positive variants gene used analysis (Column: positive_variant_num), number negative variants (Column: negative_variant_num), AUC fold MOVA_plus_3d_distance_SVM (Column: AUC), cvAUC MOVA_plus_3d_distance_SVM (Column: cvauc). data output \"protein/gene name_Target Pathogenic_result_plus_3d_distance_SVM.csv\".","code":""},{"path":[]},{"path":"/reference/MOVA_plus_3d_distance_SVM.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add 'distance to the known pathogenic variant' to the explanatory variables of MOVA and train with SVM.\r\n — MOVA_plus_3d_distance_SVM","text":"Yuya Hatano","code":""},{"path":[]},{"path":[]},{"path":"/reference/MOVA_plus_3d_distance_SVM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add 'distance to the known pathogenic variant' to the explanatory variables of MOVA and train with SVM.\r\n — MOVA_plus_3d_distance_SVM","text":"","code":"Hgmd_divide(\"./source/TARDBP.csv\") #> Error in fread(hgmd_file_name): File './source/TARDBP.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_gnomAD_file(\"./source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv\", \"./source/TARDBP_gnomAD.csv\") #> Error in fread(input_file_name): File './source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_variant_data(\"../CADD_REVEL/AlphScore_final.tsv\", \"./source/TARDBP.csv\", \"./source/TARDBP_gnomAD.csv\", \"Q13148\", \"TARDBP\", \"./source/TARDBPvariantdata.csv\") #> Error in fread(AlphScore_final_file): File '../CADD_REVEL/AlphScore_final.tsv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_polyphen_data(\"../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1\",\"./source/TARDBPvariantdata.csv\", \"TARDBP_alph.csv\",  \"Q13148\",  11012654, 11025492 ,\"./source/TARDBPvariantdatapol.csv\", \"./source/TARDBP_alphpol.csv\") #> Error in fread(dbNSFP4.3a_final_file): File '../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_final_variant_file(\"./source/TARDBP_alphpol.csv\",\"./source/TARDBP_alphpol2.csv\") #> Error in fread(input_file_name): File './source/TARDBP_alphpol.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA(\"./source/Q13148.fa\", \"TARDBP\", \"./source/AF-Q13148-F1-model_v2.pdb\",\"./source/TARDBP_alphpol2.csv\", \"./source/TARDBPvariantdatapol.csv\") #> Warning: data set 'BLOSUM62' not found #> Warning: cannot open file './source/Q13148.fa': No such file or directory #> Error in file(con, \"r\"): cannot open the connection MOVA_predistance(\"TARDBP\", \"TARDBP_Target_finalpredict.csv\",\"TARDBP_Target_predict.csv\") #> Error in fread(MOVA_predict_file): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA_plus_3d_distance_SVM(\"TARDBP\", \"TARDBP_Target_finalpredict.csv\",\"TARDBP_Target_predict.csv\") #> Error in fread(MOVA_predict_file): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference'  ## The function is currently defined as function (protein_name, MOVA_final_predict_file, MOVA_predict_file,      phenotype = \"Target\")  {     D <- fread(MOVA_predict_file)     D$MOVA_plus_3d_distance_SVM_predict <- 0     D[, c(\"MOVA_plus_3d_distance_SVM_predict\")] <- list(NULL)     if (phenotype == \"Target\") {         D <- D[(D$Type == \"Target\") | (D$Type == \"Ctrl\"), ]     }     fpredict <- data.frame(matrix(rep(NA, 3), nrow = 1))[numeric(0),          ]     colnames(fpredict) <- c(\"change\", \"predict\", \"n\")     imp.rfa <- data.frame(matrix(rep(NA, 3), nrow = 1))[numeric(0),          ]     colnames(imp.rfa) <- c(\"name\", \"IncNodePurity\", \"n\")     final_data <- fread(MOVA_final_predict_file)     final_data$MOVA_plus_3d_distance_SVM_predict <- 0     final_data[, c(\"MOVA_plus_3d_distance_SVM_predict\")] <- list(NULL)     df <- data.frame(matrix(rep(NA, 6), nrow = 1))[numeric(0),          ]     colnames(df) <- c(\"ID\", \"re_result\", \"distance\", \"change\",          \"iter1\", \"iter2\")     D$id2 <- 0     if (phenotype == \"Target\") {         D$result <- D$Type2     }     else {         D$result <- D$Type3     }     D[, c(\"id2\")] <- list(NULL)     oldw <- getOption(\"warn\")     options(warn = -1)     D <- rowid_to_column(D, var = \"id2\")     for (i2 in 1:5) {         D$id3 <- D$id2         j <- 5         dat1 <- D %>% stratified(., group = \"result\", size = 1/j)         dat1$iter <- 1         datzan <- D[-dat1$id2, ]         for (i in 2:j) {             datzan[, c(\"id2\")] <- list(NULL)             datzan <- rowid_to_column(datzan, var = \"id2\")             if (i != j) {                 dat2 <- datzan %>% stratified(., group = \"result\",                    size = 1/(j - i + 1))             }             else {                 dat2 <- datzan             }             dat2$iter <- i             datzan <- datzan[-dat2$id2, ]             dat1 <- rbind(dat1, dat2)         }         dat1[, c(\"id2\")] <- list(NULL)         dat1 <- rowid_to_column(dat1, var = \"id2\")         for (i in 1:j) {             val <- dat1[dat1$iter == i, ]             train.data <- dat1[-val$id2, ]             x <- train.data[train.data$result == 1, ]$x             y <- train.data[train.data$result == 1, ]$y             z <- train.data[train.data$result == 1, ]$z             train.data$t_distance <- 0             for (i3 in 1:nrow(train.data)) {                 t_distance <- sqrt((x - train.data[i3]$x) * (x -                    train.data[i3]$x) + (y - train.data[i3]$y) *                    (y - train.data[i3]$y) + (z - train.data[i3]$z) *                    (z - train.data[i3]$z))                 t_distance <- sort(t_distance, decreasing = F)                 if (train.data[i3]$result == 1) {                   train.data[i3]$t_distance <- t_distance[2]                 }                 else {                   train.data[i3]$t_distance <- t_distance[1]                 }             }             svm <- ksvm(result ~ con + x + y + z + t_distance +                  b, train.data, importance = TRUE)             x <- train.data[train.data$result == 1, ]$x             y <- train.data[train.data$result == 1, ]$y             z <- train.data[train.data$result == 1, ]$z             val$t_distance <- 0             for (i3 in 1:nrow(val)) {                 val[i3]$t_distance <- min(sqrt((x - val[i3]$x) *                    (x - val[i3]$x) + (y - val[i3]$y) * (y - val[i3]$y) +                    (z - val[i3]$z) * (z - val[i3]$z)))             }             f <- data.frame(ID = val$ID, result = val$result,                  predict = predict(svm, val), change = val$change,                  iter1 = i, iter2 = i2)             df <- rbind(df, f)         }     }     x <- D[D$result == 1, ]$x     y <- D[D$result == 1, ]$y     z <- D[D$result == 1, ]$z     D$t_distance <- 0     for (i3 in 1:nrow(D)) {         t_distance <- sqrt((x - D[i3]$x) * (x - D[i3]$x) + (y -              D[i3]$y) * (y - D[i3]$y) + (z - D[i3]$z) * (z - D[i3]$z))         t_distance <- sort(t_distance, decreasing = F)         if (D[i3]$result == 1) {             D[i3]$t_distance <- t_distance[2]         }         else {             D[i3]$t_distance <- t_distance[1]         }     }     for (i in 1:30) {         svm <- ksvm(result ~ con + x + y + z + t_distance + b,              D)         f <- data.frame(ID = final_data$ID, predict = predict(svm,              final_data), n = i)         fpredict <- rbind(fpredict, f)     }     options(warn = oldw)     fpredictb <- fpredict %>% group_by(ID) %>% summarise(MOVA_plus_3d_distance_SVM_predict = mean(predict))     final_data <- merge(fpredictb, final_data)     fwrite(final_data, MOVA_final_predict_file)     df$iter3 <- df$iter1 + (df$iter2 * 5)     out <- cvAUC(df$predict, df$result, label.ordering = NULL,          folds = df$iter3)     plot(out$perf, col = \"blue\", avg = \"vertical\", add = TRUE)     cvauc <- out$cvAUC     YI2 <- data.frame(matrix(rep(NA, 5), nrow = 1))[numeric(0),          ]     colnames(YI2) <- c(\"Cutoff\", \"positive_variant_num\", \"negative_variant_num\",          \"AUC\", \"cvauc\")     for (i in 6:30) {         pred <- prediction(df[df$iter3 == i, ]$predict, df[df$iter3 ==              i, ]$result)         auc.tmp <- performance(pred, \"auc\")         auc <- as.numeric(auc.tmp@y.values)         tab <- data.frame(Cutoff = unlist(pred@cutoffs), TP = unlist(pred@tp),              FP = unlist(pred@fp), FN = unlist(pred@fn), TN = unlist(pred@tn),              Sensitivity = unlist(pred@tp)/(unlist(pred@tp) +                  unlist(pred@fn)), Specificity = unlist(pred@tn)/(unlist(pred@fp) +                  unlist(pred@tn)), Accuracy = ((unlist(pred@tp) +                  unlist(pred@tn))/nrow(df)), Precision = (unlist(pred@tp)/(unlist(pred@tp) +                  unlist(pred@fp))))         tab$Youden <- tab$Sensitivity + tab$Specificity - 1         YI <- tab[order(tab$Youden, decreasing = T), ]         YI <- data.frame(Cutoff = YI$Cutoff[1], positive_variant_num = c(nrow(df[(df$result ==              1) & (df$iter2 == 1), ])), negative_variant_num = c(nrow(df[(df$result ==              0) & (df$iter2 == 1), ])), AUC = c(auc), cvauc = c(cvauc))         YI2 <- rbind(YI2, YI)     }     fwrite(YI2, paste(protein_name, phenotype, \"result_plus_3d_distance_SVM.csv\",          sep = \"_\"))     df2 <- df %>% group_by(ID) %>% summarise(MOVA_plus_3d_distance_SVM_predict = mean(predict))     D[, c(\"result\")] <- list(NULL)     fwrite(merge(D, df2), MOVA_predict_file)     fwrite(df, paste(protein_name, phenotype, \"predict_orig_plus_3d_distance_SVM.csv\",          sep = \"_\"))     return(YI2)   } #> function (protein_name, MOVA_final_predict_file, MOVA_predict_file,  #>     phenotype = \"Target\")  #> { #>     D <- fread(MOVA_predict_file) #>     D$MOVA_plus_3d_distance_SVM_predict <- 0 #>     D[, c(\"MOVA_plus_3d_distance_SVM_predict\")] <- list(NULL) #>     if (phenotype == \"Target\") { #>         D <- D[(D$Type == \"Target\") | (D$Type == \"Ctrl\"), ] #>     } #>     fpredict <- data.frame(matrix(rep(NA, 3), nrow = 1))[numeric(0),  #>         ] #>     colnames(fpredict) <- c(\"change\", \"predict\", \"n\") #>     imp.rfa <- data.frame(matrix(rep(NA, 3), nrow = 1))[numeric(0),  #>         ] #>     colnames(imp.rfa) <- c(\"name\", \"IncNodePurity\", \"n\") #>     final_data <- fread(MOVA_final_predict_file) #>     final_data$MOVA_plus_3d_distance_SVM_predict <- 0 #>     final_data[, c(\"MOVA_plus_3d_distance_SVM_predict\")] <- list(NULL) #>     df <- data.frame(matrix(rep(NA, 6), nrow = 1))[numeric(0),  #>         ] #>     colnames(df) <- c(\"ID\", \"re_result\", \"distance\", \"change\",  #>         \"iter1\", \"iter2\") #>     D$id2 <- 0 #>     if (phenotype == \"Target\") { #>         D$result <- D$Type2 #>     } #>     else { #>         D$result <- D$Type3 #>     } #>     D[, c(\"id2\")] <- list(NULL) #>     oldw <- getOption(\"warn\") #>     options(warn = -1) #>     D <- rowid_to_column(D, var = \"id2\") #>     for (i2 in 1:5) { #>         D$id3 <- D$id2 #>         j <- 5 #>         dat1 <- D %>% stratified(., group = \"result\", size = 1/j) #>         dat1$iter <- 1 #>         datzan <- D[-dat1$id2, ] #>         for (i in 2:j) { #>             datzan[, c(\"id2\")] <- list(NULL) #>             datzan <- rowid_to_column(datzan, var = \"id2\") #>             if (i != j) { #>                 dat2 <- datzan %>% stratified(., group = \"result\",  #>                   size = 1/(j - i + 1)) #>             } #>             else { #>                 dat2 <- datzan #>             } #>             dat2$iter <- i #>             datzan <- datzan[-dat2$id2, ] #>             dat1 <- rbind(dat1, dat2) #>         } #>         dat1[, c(\"id2\")] <- list(NULL) #>         dat1 <- rowid_to_column(dat1, var = \"id2\") #>         for (i in 1:j) { #>             val <- dat1[dat1$iter == i, ] #>             train.data <- dat1[-val$id2, ] #>             x <- train.data[train.data$result == 1, ]$x #>             y <- train.data[train.data$result == 1, ]$y #>             z <- train.data[train.data$result == 1, ]$z #>             train.data$t_distance <- 0 #>             for (i3 in 1:nrow(train.data)) { #>                 t_distance <- sqrt((x - train.data[i3]$x) * (x -  #>                   train.data[i3]$x) + (y - train.data[i3]$y) *  #>                   (y - train.data[i3]$y) + (z - train.data[i3]$z) *  #>                   (z - train.data[i3]$z)) #>                 t_distance <- sort(t_distance, decreasing = F) #>                 if (train.data[i3]$result == 1) { #>                   train.data[i3]$t_distance <- t_distance[2] #>                 } #>                 else { #>                   train.data[i3]$t_distance <- t_distance[1] #>                 } #>             } #>             svm <- ksvm(result ~ con + x + y + z + t_distance +  #>                 b, train.data, importance = TRUE) #>             x <- train.data[train.data$result == 1, ]$x #>             y <- train.data[train.data$result == 1, ]$y #>             z <- train.data[train.data$result == 1, ]$z #>             val$t_distance <- 0 #>             for (i3 in 1:nrow(val)) { #>                 val[i3]$t_distance <- min(sqrt((x - val[i3]$x) *  #>                   (x - val[i3]$x) + (y - val[i3]$y) * (y - val[i3]$y) +  #>                   (z - val[i3]$z) * (z - val[i3]$z))) #>             } #>             f <- data.frame(ID = val$ID, result = val$result,  #>                 predict = predict(svm, val), change = val$change,  #>                 iter1 = i, iter2 = i2) #>             df <- rbind(df, f) #>         } #>     } #>     x <- D[D$result == 1, ]$x #>     y <- D[D$result == 1, ]$y #>     z <- D[D$result == 1, ]$z #>     D$t_distance <- 0 #>     for (i3 in 1:nrow(D)) { #>         t_distance <- sqrt((x - D[i3]$x) * (x - D[i3]$x) + (y -  #>             D[i3]$y) * (y - D[i3]$y) + (z - D[i3]$z) * (z - D[i3]$z)) #>         t_distance <- sort(t_distance, decreasing = F) #>         if (D[i3]$result == 1) { #>             D[i3]$t_distance <- t_distance[2] #>         } #>         else { #>             D[i3]$t_distance <- t_distance[1] #>         } #>     } #>     for (i in 1:30) { #>         svm <- ksvm(result ~ con + x + y + z + t_distance + b,  #>             D) #>         f <- data.frame(ID = final_data$ID, predict = predict(svm,  #>             final_data), n = i) #>         fpredict <- rbind(fpredict, f) #>     } #>     options(warn = oldw) #>     fpredictb <- fpredict %>% group_by(ID) %>% summarise(MOVA_plus_3d_distance_SVM_predict = mean(predict)) #>     final_data <- merge(fpredictb, final_data) #>     fwrite(final_data, MOVA_final_predict_file) #>     df$iter3 <- df$iter1 + (df$iter2 * 5) #>     out <- cvAUC(df$predict, df$result, label.ordering = NULL,  #>         folds = df$iter3) #>     plot(out$perf, col = \"blue\", avg = \"vertical\", add = TRUE) #>     cvauc <- out$cvAUC #>     YI2 <- data.frame(matrix(rep(NA, 5), nrow = 1))[numeric(0),  #>         ] #>     colnames(YI2) <- c(\"Cutoff\", \"positive_variant_num\", \"negative_variant_num\",  #>         \"AUC\", \"cvauc\") #>     for (i in 6:30) { #>         pred <- prediction(df[df$iter3 == i, ]$predict, df[df$iter3 ==  #>             i, ]$result) #>         auc.tmp <- performance(pred, \"auc\") #>         auc <- as.numeric(auc.tmp@y.values) #>         tab <- data.frame(Cutoff = unlist(pred@cutoffs), TP = unlist(pred@tp),  #>             FP = unlist(pred@fp), FN = unlist(pred@fn), TN = unlist(pred@tn),  #>             Sensitivity = unlist(pred@tp)/(unlist(pred@tp) +  #>                 unlist(pred@fn)), Specificity = unlist(pred@tn)/(unlist(pred@fp) +  #>                 unlist(pred@tn)), Accuracy = ((unlist(pred@tp) +  #>                 unlist(pred@tn))/nrow(df)), Precision = (unlist(pred@tp)/(unlist(pred@tp) +  #>                 unlist(pred@fp)))) #>         tab$Youden <- tab$Sensitivity + tab$Specificity - 1 #>         YI <- tab[order(tab$Youden, decreasing = T), ] #>         YI <- data.frame(Cutoff = YI$Cutoff[1], positive_variant_num = c(nrow(df[(df$result ==  #>             1) & (df$iter2 == 1), ])), negative_variant_num = c(nrow(df[(df$result ==  #>             0) & (df$iter2 == 1), ])), AUC = c(auc), cvauc = c(cvauc)) #>         YI2 <- rbind(YI2, YI) #>     } #>     fwrite(YI2, paste(protein_name, phenotype, \"result_plus_3d_distance_SVM.csv\",  #>         sep = \"_\")) #>     df2 <- df %>% group_by(ID) %>% summarise(MOVA_plus_3d_distance_SVM_predict = mean(predict)) #>     D[, c(\"result\")] <- list(NULL) #>     fwrite(merge(D, df2), MOVA_predict_file) #>     fwrite(df, paste(protein_name, phenotype, \"predict_orig_plus_3d_distance_SVM.csv\",  #>         sep = \"_\")) #>     return(YI2) #>   } #> <environment: 0x0000011afd5ebe30>"},{"path":"/reference/MOVA_plus_3d_distance_xgboost.html","id":null,"dir":"Reference","previous_headings":"","what":"Add 'distance to the known pathogenic variant' to the explanatory variables of MOVA and train with XGBoost.\r\n — MOVA_plus_3d_distance_xgboost","title":"Add 'distance to the known pathogenic variant' to the explanatory variables of MOVA and train with XGBoost.\r\n — MOVA_plus_3d_distance_xgboost","text":"function trained XGBoost 'distance known pathogenic variant', ΔBLOSUM62, 3D location information, pLDDT explanatory variables pathogenicity variant objective variable. MOVA_predistance function must performed function.","code":""},{"path":"/reference/MOVA_plus_3d_distance_xgboost.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add 'distance to the known pathogenic variant' to the explanatory variables of MOVA and train with XGBoost.\r\n — MOVA_plus_3d_distance_xgboost","text":"","code":"MOVA_plus_3d_distance_xgboost(protein_name, MOVA_final_predict_file, MOVA_predict_file, phenotype = \"Target\")"},{"path":"/reference/MOVA_plus_3d_distance_xgboost.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add 'distance to the known pathogenic variant' to the explanatory variables of MOVA and train with XGBoost.\r\n — MOVA_plus_3d_distance_xgboost","text":"protein_name Name target protein/gene. Used name file exported. MOVA_final_predict_file \"gene name_Target Pathogenic_finalpredict.csv\" file output MOVA function. final MOVA_3d_distance predicted values file. MOVA_predict_file \"gene name_Target Pathogenic_predict.csv\" file output MOVA function. phenotype Specify \"Target\" want positive variant Target variant , \"Pathogenic\" want include Pathogenic variant well. default \"Target\".","code":""},{"path":"/reference/MOVA_plus_3d_distance_xgboost.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add 'distance to the known pathogenic variant' to the explanatory variables of MOVA and train with XGBoost.\r\n — MOVA_plus_3d_distance_xgboost","text":"Draw ROC curve MOVA_plus_3d_distance_xgboost (black). MOVA_plus_3d_distance_xgboost evaluated using Stratified 5-fold cross validation method, model repeated five times. average predicted values added \"MOVA_plus_3d_distance_xgboost_predict\" column MOVA_predict_file. final MOVA_plus_3d_distance predicted value added \"MOVA_plus_3d_distance_xgboost_predict\" column MOVA_final_predict_file. \"protein/gene name_Target Pathogenic_result_plus_3d_distance_xgboost.csv\" contains Cutoff value (Youden index) fold (Column: Cutoff), number positive variants gene used analysis (Column: positive_variant_num), number negative variants (Column: negative_variant_num), AUC fold MOVA_plus_3d_distance_xgboost (Column: AUC), cvAUC MOVA_plus_3d_distance_xgboost (Column: cvauc). file required redrawing MOVA_redraw function MOVA_plus_3d_distance_xgboost output \"protein/gene name_Target Pathogenic_predict_orig_plus_3d_distance_xgboost.csv\".","code":""},{"path":"/reference/MOVA_plus_3d_distance_xgboost.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add 'distance to the known pathogenic variant' to the explanatory variables of MOVA and train with XGBoost.\r\n — MOVA_plus_3d_distance_xgboost","text":"data.frame containing Cutoff value (Youden index) fold (Column: Cutoff), number positive variants gene used analysis (Column: positive_variant_num), number negative variants (Column: negative_variant_num), AUC fold MOVA_plus_3d_distance_xgboost (Column: AUC), cvAUC MOVA_plus_3d_distance_xgboost (Column: cvauc). data output \"protein/gene name_Target Pathogenic_result_plus_3d_distance_xgboost.csv\".","code":""},{"path":[]},{"path":"/reference/MOVA_plus_3d_distance_xgboost.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add 'distance to the known pathogenic variant' to the explanatory variables of MOVA and train with XGBoost.\r\n — MOVA_plus_3d_distance_xgboost","text":"Yuya Hatano","code":""},{"path":[]},{"path":[]},{"path":"/reference/MOVA_plus_3d_distance_xgboost.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add 'distance to the known pathogenic variant' to the explanatory variables of MOVA and train with XGBoost.\r\n — MOVA_plus_3d_distance_xgboost","text":"","code":"Hgmd_divide(\"./source/TARDBP.csv\") #> Error in fread(hgmd_file_name): File './source/TARDBP.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_gnomAD_file(\"./source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv\", \"./source/TARDBP_gnomAD.csv\") #> Error in fread(input_file_name): File './source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_variant_data(\"../CADD_REVEL/AlphScore_final.tsv\", \"./source/TARDBP.csv\", \"./source/TARDBP_gnomAD.csv\", \"Q13148\", \"TARDBP\", \"./source/TARDBPvariantdata.csv\") #> Error in fread(AlphScore_final_file): File '../CADD_REVEL/AlphScore_final.tsv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_polyphen_data(\"../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1\",\"./source/TARDBPvariantdata.csv\", \"TARDBP_alph.csv\",  \"Q13148\",  11012654, 11025492 ,\"./source/TARDBPvariantdatapol.csv\", \"./source/TARDBP_alphpol.csv\") #> Error in fread(dbNSFP4.3a_final_file): File '../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_final_variant_file(\"./source/TARDBP_alphpol.csv\",\"./source/TARDBP_alphpol2.csv\") #> Error in fread(input_file_name): File './source/TARDBP_alphpol.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA(\"./source/Q13148.fa\", \"TARDBP\", \"./source/AF-Q13148-F1-model_v2.pdb\",\"./source/TARDBP_alphpol2.csv\", \"./source/TARDBPvariantdatapol.csv\") #> Warning: data set 'BLOSUM62' not found #> Warning: cannot open file './source/Q13148.fa': No such file or directory #> Error in file(con, \"r\"): cannot open the connection MOVA_predistance(\"TARDBP\", \"TARDBP_Target_finalpredict.csv\",\"TARDBP_Target_predict.csv\") #> Error in fread(MOVA_predict_file): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA_plus_3d_distance_SVM(\"TARDBP\", \"TARDBP_Target_finalpredict.csv\",\"TARDBP_Target_predict.csv\") #> Error in fread(MOVA_predict_file): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' ##---- Should be DIRECTLY executable !! ---- ##-- ==>  Define data, use random, ##--  or do  help(data=index)  for the standard data sets.  ## The function is currently defined as function (protein_name, MOVA_final_predict_file, MOVA_predict_file,      phenotype = \"Target\")  {     D <- fread(MOVA_predict_file)     D$MOVA_plus_3d_distance_xgboost_predict <- 0     D[, c(\"MOVA_plus_3d_distance_xgboost_predict\")] <- list(NULL)     if (phenotype == \"Target\") {         D <- D[(D$Type == \"Target\") | (D$Type == \"Ctrl\"), ]     }     fpredict <- data.frame(matrix(rep(NA, 3), nrow = 1))[numeric(0),          ]     colnames(fpredict) <- c(\"change\", \"predict\", \"n\")     imp.rfa <- data.frame(matrix(rep(NA, 3), nrow = 1))[numeric(0),          ]     colnames(imp.rfa) <- c(\"name\", \"IncNodePurity\", \"n\")     final_data <- fread(MOVA_final_predict_file)     final_data$MOVA_plus_3d_distance_xgboost_predict <- 0     final_data[, c(\"MOVA_plus_3d_distance_xgboost_predict\")] <- list(NULL)     df <- data.frame(matrix(rep(NA, 6), nrow = 1))[numeric(0),          ]     colnames(df) <- c(\"ID\", \"re_result\", \"distance\", \"change\",          \"iter1\", \"iter2\")     D$id2 <- 0     if (phenotype == \"Target\") {         D$result <- D$Type2     }     else {         D$result <- D$Type3     }     D[, c(\"id2\")] <- list(NULL)     oldw <- getOption(\"warn\")     options(warn = -1)     D <- rowid_to_column(D, var = \"id2\")     for (i2 in 1:5) {         D$id3 <- D$id2         j <- 5         dat1 <- D %>% stratified(., group = \"result\", size = 1/j)         dat1$iter <- 1         datzan <- D[-dat1$id2, ]         for (i in 2:j) {             datzan[, c(\"id2\")] <- list(NULL)             datzan <- rowid_to_column(datzan, var = \"id2\")             if (i != j) {                 dat2 <- datzan %>% stratified(., group = \"result\",                    size = 1/(j - i + 1))             }             else {                 dat2 <- datzan             }             dat2$iter <- i             datzan <- datzan[-dat2$id2, ]             dat1 <- rbind(dat1, dat2)         }         dat1[, c(\"id2\")] <- list(NULL)         dat1 <- rowid_to_column(dat1, var = \"id2\")         for (i in 1:j) {             val <- dat1[dat1$iter == i, ]             train.data <- dat1[-val$id2, ]             x <- train.data[train.data$result == 1, ]$x             y <- train.data[train.data$result == 1, ]$y             z <- train.data[train.data$result == 1, ]$z             train.data$t_distance <- 0             for (i3 in 1:nrow(train.data)) {                 t_distance <- sqrt((x - train.data[i3]$x) * (x -                    train.data[i3]$x) + (y - train.data[i3]$y) *                    (y - train.data[i3]$y) + (z - train.data[i3]$z) *                    (z - train.data[i3]$z))                 t_distance <- sort(t_distance, decreasing = F)                 if (train.data[i3]$result == 1) {                   train.data[i3]$t_distance <- t_distance[2]                 }                 else {                   train.data[i3]$t_distance <- t_distance[1]                 }             }             train.data.mx <- sparse.model.matrix(result ~ .,                  data.frame(result = train.data$result, con = train.data$con,                    x = train.data$x, y = train.data$y, z = train.data$z,                    b = train.data$b, t_distance = train.data$t_distance))             train.data.dm <- xgb.DMatrix(train.data.mx, label = train.data$result)             xgb.result <- xgb.train(data = train.data.dm, label = train.data$result,                  objective = \"binary:logistic\", booster = \"gbtree\",                  nrounds = 100, verbose = 1)             x <- train.data[train.data$result == 1, ]$x             y <- train.data[train.data$result == 1, ]$y             z <- train.data[train.data$result == 1, ]$z             val$t_distance <- 0             for (i3 in 1:nrow(val)) {                 val[i3]$t_distance <- min(sqrt((x - val[i3]$x) *                    (x - val[i3]$x) + (y - val[i3]$y) * (y - val[i3]$y) +                    (z - val[i3]$z) * (z - val[i3]$z)))             }             test.data.mx <- sparse.model.matrix(result ~ ., data.frame(result = val$result,                  con = val$con, x = val$x, y = val$y, z = val$z,                  b = val$b, t_distance = val$t_distance))             test.data.dm <- xgb.DMatrix(test.data.mx, label = val$result)             f <- data.frame(ID = val$ID, result = val$result,                  predict = predict(object = xgb.result, newdata = test.data.dm),                  change = val$change, iter1 = i, iter2 = i2)             df <- rbind(df, f)         }     }     x <- D[D$result == 1, ]$x     y <- D[D$result == 1, ]$y     z <- D[D$result == 1, ]$z     D$t_distance <- 0     for (i3 in 1:nrow(D)) {         t_distance <- sqrt((x - D[i3]$x) * (x - D[i3]$x) + (y -              D[i3]$y) * (y - D[i3]$y) + (z - D[i3]$z) * (z - D[i3]$z))         t_distance <- sort(t_distance, decreasing = F)         if (D[i3]$result == 1) {             D[i3]$t_distance <- t_distance[2]         }         else {             D[i3]$t_distance <- t_distance[1]         }     }     D.mx <- sparse.model.matrix(result ~ ., data.frame(result = D$result,          con = D$con, x = D$x, y = D$y, z = D$z, b = D$b, t_distance = D$t_distance))     D.dm <- xgb.DMatrix(D.mx, label = D$result)     final_data.mx <- sparse.model.matrix(dammy ~ ., data.frame(dammy = final_data$dammy,          con = final_data$con, x = final_data$x, y = final_data$y,          z = final_data$z, b = final_data$b, t_distance = final_data$t_distance))     final_data.dm <- xgb.DMatrix(final_data.mx, label = final_data$dammy)     for (i in 1:30) {         xgb.result <- xgb.train(data = D.dm, label = D$result,              objective = \"binary:logistic\", booster = \"gbtree\",              nrounds = 100, verbose = 1)         f <- data.frame(ID = final_data$ID, predict = predict(object = xgb.result,              newdata = final_data.dm), n = i)         fpredict <- rbind(fpredict, f)     }     options(warn = oldw)     fpredictb <- fpredict %>% group_by(ID) %>% summarise(MOVA_plus_3d_distance_xgboost_predict = mean(predict))     final_data <- merge(fpredictb, final_data)     fwrite(final_data, MOVA_final_predict_file)     df$iter3 <- df$iter1 + (df$iter2 * 5)     out <- cvAUC(df$predict, df$result, label.ordering = NULL,          folds = df$iter3)     plot(out$perf, col = \"black\", avg = \"vertical\", add = TRUE)     cvauc <- out$cvAUC     YI2 <- data.frame(matrix(rep(NA, 5), nrow = 1))[numeric(0),          ]     colnames(YI2) <- c(\"Cutoff\", \"positive_variant_num\", \"negative_variant_num\",          \"AUC\", \"cvauc\")     for (i in 6:30) {         pred <- prediction(df[df$iter3 == i, ]$predict, df[df$iter3 ==              i, ]$result)         auc.tmp <- performance(pred, \"auc\")         auc <- as.numeric(auc.tmp@y.values)         tab <- data.frame(Cutoff = unlist(pred@cutoffs), TP = unlist(pred@tp),              FP = unlist(pred@fp), FN = unlist(pred@fn), TN = unlist(pred@tn),              Sensitivity = unlist(pred@tp)/(unlist(pred@tp) +                  unlist(pred@fn)), Specificity = unlist(pred@tn)/(unlist(pred@fp) +                  unlist(pred@tn)), Accuracy = ((unlist(pred@tp) +                  unlist(pred@tn))/nrow(df)), Precision = (unlist(pred@tp)/(unlist(pred@tp) +                  unlist(pred@fp))))         tab$Youden <- tab$Sensitivity + tab$Specificity - 1         YI <- tab[order(tab$Youden, decreasing = T), ]         YI <- data.frame(Cutoff = YI$Cutoff[1], positive_variant_num = c(nrow(df[(df$result ==              1) & (df$iter2 == 1), ])), negative_variant_num = c(nrow(df[(df$result ==              0) & (df$iter2 == 1), ])), AUC = c(auc), cvauc = c(cvauc))         YI2 <- rbind(YI2, YI)     }     fwrite(YI2, paste(protein_name, phenotype, \"result_plus_3d_distance_xgboost.csv\",          sep = \"_\"))     df2 <- df %>% group_by(ID) %>% summarise(MOVA_plus_3d_distance_xgboost_predict = mean(predict))     D[, c(\"result\")] <- list(NULL)     fwrite(merge(D, df2), MOVA_predict_file)     fwrite(df, paste(protein_name, phenotype, \"predict_orig_plus_3d_distance_xgboost.csv\",          sep = \"_\"))     return(YI2)   } #> function (protein_name, MOVA_final_predict_file, MOVA_predict_file,  #>     phenotype = \"Target\")  #> { #>     D <- fread(MOVA_predict_file) #>     D$MOVA_plus_3d_distance_xgboost_predict <- 0 #>     D[, c(\"MOVA_plus_3d_distance_xgboost_predict\")] <- list(NULL) #>     if (phenotype == \"Target\") { #>         D <- D[(D$Type == \"Target\") | (D$Type == \"Ctrl\"), ] #>     } #>     fpredict <- data.frame(matrix(rep(NA, 3), nrow = 1))[numeric(0),  #>         ] #>     colnames(fpredict) <- c(\"change\", \"predict\", \"n\") #>     imp.rfa <- data.frame(matrix(rep(NA, 3), nrow = 1))[numeric(0),  #>         ] #>     colnames(imp.rfa) <- c(\"name\", \"IncNodePurity\", \"n\") #>     final_data <- fread(MOVA_final_predict_file) #>     final_data$MOVA_plus_3d_distance_xgboost_predict <- 0 #>     final_data[, c(\"MOVA_plus_3d_distance_xgboost_predict\")] <- list(NULL) #>     df <- data.frame(matrix(rep(NA, 6), nrow = 1))[numeric(0),  #>         ] #>     colnames(df) <- c(\"ID\", \"re_result\", \"distance\", \"change\",  #>         \"iter1\", \"iter2\") #>     D$id2 <- 0 #>     if (phenotype == \"Target\") { #>         D$result <- D$Type2 #>     } #>     else { #>         D$result <- D$Type3 #>     } #>     D[, c(\"id2\")] <- list(NULL) #>     oldw <- getOption(\"warn\") #>     options(warn = -1) #>     D <- rowid_to_column(D, var = \"id2\") #>     for (i2 in 1:5) { #>         D$id3 <- D$id2 #>         j <- 5 #>         dat1 <- D %>% stratified(., group = \"result\", size = 1/j) #>         dat1$iter <- 1 #>         datzan <- D[-dat1$id2, ] #>         for (i in 2:j) { #>             datzan[, c(\"id2\")] <- list(NULL) #>             datzan <- rowid_to_column(datzan, var = \"id2\") #>             if (i != j) { #>                 dat2 <- datzan %>% stratified(., group = \"result\",  #>                   size = 1/(j - i + 1)) #>             } #>             else { #>                 dat2 <- datzan #>             } #>             dat2$iter <- i #>             datzan <- datzan[-dat2$id2, ] #>             dat1 <- rbind(dat1, dat2) #>         } #>         dat1[, c(\"id2\")] <- list(NULL) #>         dat1 <- rowid_to_column(dat1, var = \"id2\") #>         for (i in 1:j) { #>             val <- dat1[dat1$iter == i, ] #>             train.data <- dat1[-val$id2, ] #>             x <- train.data[train.data$result == 1, ]$x #>             y <- train.data[train.data$result == 1, ]$y #>             z <- train.data[train.data$result == 1, ]$z #>             train.data$t_distance <- 0 #>             for (i3 in 1:nrow(train.data)) { #>                 t_distance <- sqrt((x - train.data[i3]$x) * (x -  #>                   train.data[i3]$x) + (y - train.data[i3]$y) *  #>                   (y - train.data[i3]$y) + (z - train.data[i3]$z) *  #>                   (z - train.data[i3]$z)) #>                 t_distance <- sort(t_distance, decreasing = F) #>                 if (train.data[i3]$result == 1) { #>                   train.data[i3]$t_distance <- t_distance[2] #>                 } #>                 else { #>                   train.data[i3]$t_distance <- t_distance[1] #>                 } #>             } #>             train.data.mx <- sparse.model.matrix(result ~ .,  #>                 data.frame(result = train.data$result, con = train.data$con,  #>                   x = train.data$x, y = train.data$y, z = train.data$z,  #>                   b = train.data$b, t_distance = train.data$t_distance)) #>             train.data.dm <- xgb.DMatrix(train.data.mx, label = train.data$result) #>             xgb.result <- xgb.train(data = train.data.dm, label = train.data$result,  #>                 objective = \"binary:logistic\", booster = \"gbtree\",  #>                 nrounds = 100, verbose = 1) #>             x <- train.data[train.data$result == 1, ]$x #>             y <- train.data[train.data$result == 1, ]$y #>             z <- train.data[train.data$result == 1, ]$z #>             val$t_distance <- 0 #>             for (i3 in 1:nrow(val)) { #>                 val[i3]$t_distance <- min(sqrt((x - val[i3]$x) *  #>                   (x - val[i3]$x) + (y - val[i3]$y) * (y - val[i3]$y) +  #>                   (z - val[i3]$z) * (z - val[i3]$z))) #>             } #>             test.data.mx <- sparse.model.matrix(result ~ ., data.frame(result = val$result,  #>                 con = val$con, x = val$x, y = val$y, z = val$z,  #>                 b = val$b, t_distance = val$t_distance)) #>             test.data.dm <- xgb.DMatrix(test.data.mx, label = val$result) #>             f <- data.frame(ID = val$ID, result = val$result,  #>                 predict = predict(object = xgb.result, newdata = test.data.dm),  #>                 change = val$change, iter1 = i, iter2 = i2) #>             df <- rbind(df, f) #>         } #>     } #>     x <- D[D$result == 1, ]$x #>     y <- D[D$result == 1, ]$y #>     z <- D[D$result == 1, ]$z #>     D$t_distance <- 0 #>     for (i3 in 1:nrow(D)) { #>         t_distance <- sqrt((x - D[i3]$x) * (x - D[i3]$x) + (y -  #>             D[i3]$y) * (y - D[i3]$y) + (z - D[i3]$z) * (z - D[i3]$z)) #>         t_distance <- sort(t_distance, decreasing = F) #>         if (D[i3]$result == 1) { #>             D[i3]$t_distance <- t_distance[2] #>         } #>         else { #>             D[i3]$t_distance <- t_distance[1] #>         } #>     } #>     D.mx <- sparse.model.matrix(result ~ ., data.frame(result = D$result,  #>         con = D$con, x = D$x, y = D$y, z = D$z, b = D$b, t_distance = D$t_distance)) #>     D.dm <- xgb.DMatrix(D.mx, label = D$result) #>     final_data.mx <- sparse.model.matrix(dammy ~ ., data.frame(dammy = final_data$dammy,  #>         con = final_data$con, x = final_data$x, y = final_data$y,  #>         z = final_data$z, b = final_data$b, t_distance = final_data$t_distance)) #>     final_data.dm <- xgb.DMatrix(final_data.mx, label = final_data$dammy) #>     for (i in 1:30) { #>         xgb.result <- xgb.train(data = D.dm, label = D$result,  #>             objective = \"binary:logistic\", booster = \"gbtree\",  #>             nrounds = 100, verbose = 1) #>         f <- data.frame(ID = final_data$ID, predict = predict(object = xgb.result,  #>             newdata = final_data.dm), n = i) #>         fpredict <- rbind(fpredict, f) #>     } #>     options(warn = oldw) #>     fpredictb <- fpredict %>% group_by(ID) %>% summarise(MOVA_plus_3d_distance_xgboost_predict = mean(predict)) #>     final_data <- merge(fpredictb, final_data) #>     fwrite(final_data, MOVA_final_predict_file) #>     df$iter3 <- df$iter1 + (df$iter2 * 5) #>     out <- cvAUC(df$predict, df$result, label.ordering = NULL,  #>         folds = df$iter3) #>     plot(out$perf, col = \"black\", avg = \"vertical\", add = TRUE) #>     cvauc <- out$cvAUC #>     YI2 <- data.frame(matrix(rep(NA, 5), nrow = 1))[numeric(0),  #>         ] #>     colnames(YI2) <- c(\"Cutoff\", \"positive_variant_num\", \"negative_variant_num\",  #>         \"AUC\", \"cvauc\") #>     for (i in 6:30) { #>         pred <- prediction(df[df$iter3 == i, ]$predict, df[df$iter3 ==  #>             i, ]$result) #>         auc.tmp <- performance(pred, \"auc\") #>         auc <- as.numeric(auc.tmp@y.values) #>         tab <- data.frame(Cutoff = unlist(pred@cutoffs), TP = unlist(pred@tp),  #>             FP = unlist(pred@fp), FN = unlist(pred@fn), TN = unlist(pred@tn),  #>             Sensitivity = unlist(pred@tp)/(unlist(pred@tp) +  #>                 unlist(pred@fn)), Specificity = unlist(pred@tn)/(unlist(pred@fp) +  #>                 unlist(pred@tn)), Accuracy = ((unlist(pred@tp) +  #>                 unlist(pred@tn))/nrow(df)), Precision = (unlist(pred@tp)/(unlist(pred@tp) +  #>                 unlist(pred@fp)))) #>         tab$Youden <- tab$Sensitivity + tab$Specificity - 1 #>         YI <- tab[order(tab$Youden, decreasing = T), ] #>         YI <- data.frame(Cutoff = YI$Cutoff[1], positive_variant_num = c(nrow(df[(df$result ==  #>             1) & (df$iter2 == 1), ])), negative_variant_num = c(nrow(df[(df$result ==  #>             0) & (df$iter2 == 1), ])), AUC = c(auc), cvauc = c(cvauc)) #>         YI2 <- rbind(YI2, YI) #>     } #>     fwrite(YI2, paste(protein_name, phenotype, \"result_plus_3d_distance_xgboost.csv\",  #>         sep = \"_\")) #>     df2 <- df %>% group_by(ID) %>% summarise(MOVA_plus_3d_distance_xgboost_predict = mean(predict)) #>     D[, c(\"result\")] <- list(NULL) #>     fwrite(merge(D, df2), MOVA_predict_file) #>     fwrite(df, paste(protein_name, phenotype, \"predict_orig_plus_3d_distance_xgboost.csv\",  #>         sep = \"_\")) #>     return(YI2) #>   } #> <environment: 0x0000011afcc09ad0>"},{"path":"/reference/MOVA_predistance.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the 'distance to the known pathogenic variant' for each variant in MOVA_final_predict_file.\r\n — MOVA_predistance","title":"Calculate the 'distance to the known pathogenic variant' for each variant in MOVA_final_predict_file.\r\n — MOVA_predistance","text":"Calculate 'distance known pathogenic variant' variant MOVA_final_predict_file. function done advance machine learning function 'distance known pathogenic variant' feature.","code":""},{"path":"/reference/MOVA_predistance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the 'distance to the known pathogenic variant' for each variant in MOVA_final_predict_file.\r\n — MOVA_predistance","text":"","code":"MOVA_predistance(protein_name, MOVA_final_predict_file, MOVA_predict_file, phenotype = \"Target\")"},{"path":"/reference/MOVA_predistance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the 'distance to the known pathogenic variant' for each variant in MOVA_final_predict_file.\r\n — MOVA_predistance","text":"protein_name Name target protein/gene. Used name file exported. MOVA_final_predict_file \"gene name_Target Pathogenic_finalpredict.csv\" file output MOVA function. final MOVA_3d_distance predicted values file. MOVA_predict_file \"gene name_Target Pathogenic_predict.csv\" file output MOVA function. phenotype Specify \"Target\" want positive variant Target variant , \"Pathogenic\" want include Pathogenic variant well. default \"Target\".","code":""},{"path":"/reference/MOVA_predistance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the 'distance to the known pathogenic variant' for each variant in MOVA_final_predict_file.\r\n — MOVA_predistance","text":"function must performed following functions performed.        *MOVA_3d_distance        *MOVA_3d_distance_log        *MOVA_LOPOV        *MOVA_plus_3d_distance        *MOVA_plus_3d_distance_SVM        *MOVA_plus_3d_distance_xgboost","code":""},{"path":[]},{"path":[]},{"path":"/reference/MOVA_predistance.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate the 'distance to the known pathogenic variant' for each variant in MOVA_final_predict_file.\r\n — MOVA_predistance","text":"Yuya Hatano","code":""},{"path":[]},{"path":[]},{"path":"/reference/MOVA_predistance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the 'distance to the known pathogenic variant' for each variant in MOVA_final_predict_file.\r\n — MOVA_predistance","text":"","code":"Hgmd_divide(\"./source/TARDBP.csv\") #> Error in fread(hgmd_file_name): File './source/TARDBP.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_gnomAD_file(\"./source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv\", \"./source/TARDBP_gnomAD.csv\") #> Error in fread(input_file_name): File './source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_variant_data(\"../CADD_REVEL/AlphScore_final.tsv\", \"./source/TARDBP.csv\", \"./source/TARDBP_gnomAD.csv\", \"Q13148\", \"TARDBP\", \"./source/TARDBPvariantdata.csv\") #> Error in fread(AlphScore_final_file): File '../CADD_REVEL/AlphScore_final.tsv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_polyphen_data(\"../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1\",\"./source/TARDBPvariantdata.csv\", \"TARDBP_alph.csv\",  \"Q13148\",  11012654, 11025492 ,\"./source/TARDBPvariantdatapol.csv\", \"./source/TARDBP_alphpol.csv\") #> Error in fread(dbNSFP4.3a_final_file): File '../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_final_variant_file(\"./source/TARDBP_alphpol.csv\",\"./source/TARDBP_alphpol2.csv\") #> Error in fread(input_file_name): File './source/TARDBP_alphpol.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA(\"./source/Q13148.fa\", \"TARDBP\", \"./source/AF-Q13148-F1-model_v2.pdb\",\"./source/TARDBP_alphpol2.csv\", \"./source/TARDBPvariantdatapol.csv\") #> Warning: data set 'BLOSUM62' not found #> Warning: cannot open file './source/Q13148.fa': No such file or directory #> Error in file(con, \"r\"): cannot open the connection MOVA_predistance(\"TARDBP\", \"TARDBP_Target_finalpredict.csv\",\"TARDBP_Target_predict.csv\") #> Error in fread(MOVA_predict_file): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA_plus_3d_distance(\"TARDBP\", \"TARDBP_Target_finalpredict.csv\",\"TARDBP_Target_predict.csv\") #> Error in fread(MOVA_predict_file): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference'  ## The function is currently defined as function (protein_name, MOVA_final_predict_file, MOVA_predict_file,      phenotype = \"Target\")  {     D <- fread(MOVA_predict_file)     if (phenotype == \"Target\") {         D <- D[(D$Type == \"Target\") | (D$Type == \"Ctrl\"), ]     }     final_data <- fread(MOVA_final_predict_file)     if (phenotype == \"Target\") {         x <- D[Type2 == 1, ]$x         y <- D[Type2 == 1, ]$y         z <- D[Type2 == 1, ]$z         D$t_distance <- 0         final_data$t_distance <- 0         for (i3 in 1:nrow(final_data)) {             t_distance <- sqrt((x - final_data[i3]$x) * (x -                  final_data[i3]$x) + (y - final_data[i3]$y) *                  (y - final_data[i3]$y) + (z - final_data[i3]$z) *                  (z - final_data[i3]$z))             t_distance <- sort(t_distance, decreasing = F)             final_data[i3]$t_distance <- t_distance[1]         }     }     else {         x <- D[Type3 == 1, ]$x         y <- D[Type3 == 1, ]$y         z <- D[Type3 == 1, ]$z         D$t_distance <- 0         final_data$t_distance <- 0         for (i3 in 1:nrow(final_data)) {             t_distance <- sqrt((x - final_data[i3]$x) * (x -                  final_data[i3]$x) + (y - final_data[i3]$y) *                  (y - final_data[i3]$y) + (z - final_data[i3]$z) *                  (z - final_data[i3]$z))             t_distance <- sort(t_distance, decreasing = F)             final_data[i3]$t_distance <- t_distance[1]         }     }     fwrite(final_data, MOVA_final_predict_file)   } #> function (protein_name, MOVA_final_predict_file, MOVA_predict_file,  #>     phenotype = \"Target\")  #> { #>     D <- fread(MOVA_predict_file) #>     if (phenotype == \"Target\") { #>         D <- D[(D$Type == \"Target\") | (D$Type == \"Ctrl\"), ] #>     } #>     final_data <- fread(MOVA_final_predict_file) #>     if (phenotype == \"Target\") { #>         x <- D[Type2 == 1, ]$x #>         y <- D[Type2 == 1, ]$y #>         z <- D[Type2 == 1, ]$z #>         D$t_distance <- 0 #>         final_data$t_distance <- 0 #>         for (i3 in 1:nrow(final_data)) { #>             t_distance <- sqrt((x - final_data[i3]$x) * (x -  #>                 final_data[i3]$x) + (y - final_data[i3]$y) *  #>                 (y - final_data[i3]$y) + (z - final_data[i3]$z) *  #>                 (z - final_data[i3]$z)) #>             t_distance <- sort(t_distance, decreasing = F) #>             final_data[i3]$t_distance <- t_distance[1] #>         } #>     } #>     else { #>         x <- D[Type3 == 1, ]$x #>         y <- D[Type3 == 1, ]$y #>         z <- D[Type3 == 1, ]$z #>         D$t_distance <- 0 #>         final_data$t_distance <- 0 #>         for (i3 in 1:nrow(final_data)) { #>             t_distance <- sqrt((x - final_data[i3]$x) * (x -  #>                 final_data[i3]$x) + (y - final_data[i3]$y) *  #>                 (y - final_data[i3]$y) + (z - final_data[i3]$z) *  #>                 (z - final_data[i3]$z)) #>             t_distance <- sort(t_distance, decreasing = F) #>             final_data[i3]$t_distance <- t_distance[1] #>         } #>     } #>     fwrite(final_data, MOVA_final_predict_file) #>   } #> <environment: 0x0000011a810326a8>"},{"path":"/reference/MOVA_redraw.html","id":null,"dir":"Reference","previous_headings":"","what":"Redraw the resulting ROC curve once analyzed.\r\n — MOVA_redraw","title":"Redraw the resulting ROC curve once analyzed.\r\n — MOVA_redraw","text":"Redraw resulting ROC curve analyzed.","code":""},{"path":"/reference/MOVA_redraw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Redraw the resulting ROC curve once analyzed.\r\n — MOVA_redraw","text":"","code":"MOVA_redraw(MOVA_predict_orig_file, col, add = FALSE)"},{"path":"/reference/MOVA_redraw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Redraw the resulting ROC curve once analyzed.\r\n — MOVA_redraw","text":"MOVA_predict_orig_file \"protein/gene name_Target Pathogenic_predict_orig.csv\" output MOVA function, csv file MOVA_redraw output function col Color ROC curve add TRUE, overlays existing graph; FALSE, creates new graph.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"/reference/MOVA_redraw.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Redraw the resulting ROC curve once analyzed.\r\n — MOVA_redraw","text":"Yuya Hatano","code":""},{"path":[]},{"path":[]},{"path":"/reference/MOVA_redraw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Redraw the resulting ROC curve once analyzed.\r\n — MOVA_redraw","text":"","code":"Hgmd_divide(\"./source/TARDBP.csv\") #> Error in fread(hgmd_file_name): File './source/TARDBP.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_gnomAD_file(\"./source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv\", \"./source/TARDBP_gnomAD.csv\") #> Error in fread(input_file_name): File './source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_variant_data(\"../CADD_REVEL/AlphScore_final.tsv\", \"./source/TARDBP.csv\", \"./source/TARDBP_gnomAD.csv\", \"Q13148\", \"TARDBP\", \"./source/TARDBPvariantdata.csv\") #> Error in fread(AlphScore_final_file): File '../CADD_REVEL/AlphScore_final.tsv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_polyphen_data(\"../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1\",\"./source/TARDBPvariantdata.csv\", \"TARDBP_alph.csv\",  \"Q13148\",  11012654, 11025492 ,\"./source/TARDBPvariantdatapol.csv\", \"./source/TARDBP_alphpol.csv\") #> Error in fread(dbNSFP4.3a_final_file): File '../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_final_variant_file(\"./source/TARDBP_alphpol.csv\",\"./source/TARDBP_alphpol2.csv\") #> Error in fread(input_file_name): File './source/TARDBP_alphpol.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA(\"./source/Q13148.fa\", \"TARDBP\", \"./source/AF-Q13148-F1-model_v2.pdb\",\"./source/TARDBP_alphpol2.csv\", \"./source/TARDBPvariantdatapol.csv\") #> Warning: data set 'BLOSUM62' not found #> Warning: cannot open file './source/Q13148.fa': No such file or directory #> Error in file(con, \"r\"): cannot open the connection MOVA_SVM(\"TARDBP\", \"TARDBP_Target_finalpredict.csv\",\"TARDBP_Target_predict.csv\") #> Error in fread(MOVA_predict_file): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA_xgboost(\"TARDBP\", \"TARDBP_Target_finalpredict.csv\",\"TARDBP_Target_predict.csv\") #> Error in fread(MOVA_predict_file): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA_redraw(\"TARDBP_Target_predict_orig.csv\",col=\"red\") #> Error in fread(MOVA_predict_orig_file): File 'TARDBP_Target_predict_orig.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' PolyPhen_MOVA(\"TARDBP_Target_predict.csv\") #> Error in fread(file_name): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' AlphScore_MOVA(\"TARDBP_Target_predict.csv\") #> Error in fread(file_name): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' CADD_MOVA(\"TARDBP_Target_predict.csv\") #> Error in fread(file_name): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' REVEL_MOVA(\"TARDBP_Target_predict.csv\") #> Error in fread(file_name): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' EVE_MOVA(\"TARDBP_Target_predict.csv\", \"../dementia/EVE_all_data/variant_files/TADBP_HUMAN.csv\") #> Error in fread(file_name): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA_redraw(\"TARDBP_Target_predict_orig.csv\",col=\"red\") #> Error in fread(MOVA_predict_orig_file): File 'TARDBP_Target_predict_orig.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA_redraw(\"TARDBP_Target_predict_orig_SVM.csv\",col=\"black\", add=TRUE) #> Error in fread(MOVA_predict_orig_file): File 'TARDBP_Target_predict_orig_SVM.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA_redraw(\"TARDBP_Target_predict_orig_xgboost.csv\",col=\"blue\", add=TRUE) #> Error in fread(MOVA_predict_orig_file): File 'TARDBP_Target_predict_orig_xgboost.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference'  ##---- Should be DIRECTLY executable !! ---- ##-- ==>  Define data, use random, ##--  or do  help(data=index)  for the standard data sets.  ## The function is currently defined as function (MOVA_predict_orig_file, col, add = FALSE)  {     df <- fread(MOVA_predict_orig_file)     out <- cvAUC(df$predict, df$result, label.ordering = NULL,          folds = df$iter3)     plot(out$perf, col = col, avg = \"vertical\", add = add)   } #> function (MOVA_predict_orig_file, col, add = FALSE)  #> { #>     df <- fread(MOVA_predict_orig_file) #>     out <- cvAUC(df$predict, df$result, label.ordering = NULL,  #>         folds = df$iter3) #>     plot(out$perf, col = col, avg = \"vertical\", add = add) #>   } #> <environment: 0x0000011a8aa4b630>"},{"path":"/reference/MOVA_SVM.html","id":null,"dir":"Reference","previous_headings":"","what":"The training was performed in SVM.\r\n — MOVA_SVM","title":"The training was performed in SVM.\r\n — MOVA_SVM","text":"function trained Support vector machine ΔBLOSUM62, 3D location information, pLDDT explanatory variables pathogenicity variant objective variable.","code":""},{"path":"/reference/MOVA_SVM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The training was performed in SVM.\r\n — MOVA_SVM","text":"","code":"MOVA_SVM(protein_name, MOVA_final_predict_file, MOVA_predict_file, phenotype = \"Target\")"},{"path":"/reference/MOVA_SVM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The training was performed in SVM.\r\n — MOVA_SVM","text":"protein_name Name target protein/gene. Used name file exported. MOVA_final_predict_file \"gene name_Target Pathogenic_finalpredict.csv\" file output MOVA function. final MOVA_3d_distance predicted values file. MOVA_predict_file \"gene name_Target Pathogenic_predict.csv\" file output MOVA function. phenotype Specify \"Target\" want positive variant Target variant , \"Pathogenic\" want include Pathogenic variant well. default \"Target\".","code":""},{"path":"/reference/MOVA_SVM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The training was performed in SVM.\r\n — MOVA_SVM","text":"Draw ROC curve MOVA_SVM (black). MOVA_SVM evaluated using Stratified 5-fold cross validation method, models repeated five times. average predicted values added \"SVM_predict\" column MOVA_predict_file. final MOVA_SVM predicted value added \"SVM_predict\" column MOVA_final_predict_file. \"protein/gene name_Target Pathogenic_result_svm.csv\" contains Cutoff value (Youden index) fold (Column: Cutoff), number positive variants gene used analysis (Column: positive_variant_num), number negative variants (Column: negative_variant_num), AUC fold MOVA_SVM (Column: AUC), cvAUC MOVA_SVM (Column: cvauc). file required redrawing MOVA_redraw function MOVA_SVM output \"protein/gene name_Target Pathogenic_predict_orig_SVM.csv\".","code":""},{"path":"/reference/MOVA_SVM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The training was performed in SVM.\r\n — MOVA_SVM","text":"data.frame containing Cutoff value (Youden index) fold (Column: Cutoff), number positive variants gene used analysis (Column: positive_variant_num), number negative variants (Column: negative_variant_num), AUC fold MOVA_SVM (Column: AUC), cvAUC MOVA_SVM (Column: cvauc). data output \"protein/gene name_Target Pathogenic_result_svm.csv\".","code":""},{"path":[]},{"path":"/reference/MOVA_SVM.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The training was performed in SVM.\r\n — MOVA_SVM","text":"Yuya Hatano","code":""},{"path":[]},{"path":[]},{"path":"/reference/MOVA_SVM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The training was performed in SVM.\r\n — MOVA_SVM","text":"","code":"Hgmd_divide(\"./source/TARDBP.csv\") #> Error in fread(hgmd_file_name): File './source/TARDBP.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_gnomAD_file(\"./source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv\", \"./source/TARDBP_gnomAD.csv\") #> Error in fread(input_file_name): File './source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_variant_data(\"../CADD_REVEL/AlphScore_final.tsv\", \"./source/TARDBP.csv\", \"./source/TARDBP_gnomAD.csv\", \"Q13148\", \"TARDBP\", \"./source/TARDBPvariantdata.csv\") #> Error in fread(AlphScore_final_file): File '../CADD_REVEL/AlphScore_final.tsv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_polyphen_data(\"../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1\",\"./source/TARDBPvariantdata.csv\", \"TARDBP_alph.csv\",  \"Q13148\",  11012654, 11025492 ,\"./source/TARDBPvariantdatapol.csv\", \"./source/TARDBP_alphpol.csv\") #> Error in fread(dbNSFP4.3a_final_file): File '../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_final_variant_file(\"./source/TARDBP_alphpol.csv\",\"./source/TARDBP_alphpol2.csv\") #> Error in fread(input_file_name): File './source/TARDBP_alphpol.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA(\"./source/Q13148.fa\", \"TARDBP\", \"./source/AF-Q13148-F1-model_v2.pdb\",\"./source/TARDBP_alphpol2.csv\", \"./source/TARDBPvariantdatapol.csv\") #> Warning: data set 'BLOSUM62' not found #> Warning: cannot open file './source/Q13148.fa': No such file or directory #> Error in file(con, \"r\"): cannot open the connection MOVA_SVM(\"TARDBP\", \"TARDBP_Target_finalpredict.csv\",\"TARDBP_Target_predict.csv\") #> Error in fread(MOVA_predict_file): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA_xgboost(\"TARDBP\", \"TARDBP_Target_finalpredict.csv\",\"TARDBP_Target_predict.csv\") #> Error in fread(MOVA_predict_file): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference'  ## The function is currently defined as function (protein_name, MOVA_final_predict_file, MOVA_predict_file,      phenotype = \"Target\")  {     D <- fread(MOVA_predict_file)     D$SVM_predict <- 0     D[, c(\"SVM_predict\")] <- list(NULL)     if (phenotype == \"Target\") {         D <- D[(D$Type == \"Target\") | (D$Type == \"Ctrl\"), ]     }     fpredict <- data.frame(matrix(rep(NA, 3), nrow = 1))[numeric(0),          ]     colnames(fpredict) <- c(\"change\", \"predict\", \"n\")     final_data <- fread(MOVA_final_predict_file)     final_data$SVM_predict <- 0     final_data[, c(\"SVM_predict\")] <- list(NULL)     df <- data.frame(matrix(rep(NA, 6), nrow = 1))[numeric(0),          ]     colnames(df) <- c(\"ID\", \"result\", \"predict\", \"change\", \"iter1\",          \"iter2\")     D$id2 <- 0     D[, c(\"id2\")] <- list(NULL)     if (phenotype == \"Target\") {         D$result <- D$Type2     }     else {         D$result <- D$Type3     }     oldw <- getOption(\"warn\")     options(warn = -1)     D <- rowid_to_column(D, var = \"id2\")     for (i2 in 1:5) {         D$id3 <- D$id2         j <- 5         dat1 <- D %>% stratified(., group = \"result\", size = 1/j)         dat1$iter <- 1         datzan <- D[-dat1$id2, ]         for (i in 2:j) {             datzan[, c(\"id2\")] <- list(NULL)             datzan <- rowid_to_column(datzan, var = \"id2\")             if (i != j) {                 dat2 <- datzan %>% stratified(., group = \"result\",                    size = 1/(j - i + 1))             }             else {                 dat2 <- datzan             }             dat2$iter <- i             datzan <- datzan[-dat2$id2, ]             dat1 <- rbind(dat1, dat2)         }         dat1[, c(\"id2\")] <- list(NULL)         dat1 <- rowid_to_column(dat1, var = \"id2\")         for (i in 1:j) {             val <- dat1[dat1$iter == i, ]             train.data <- dat1[-val$id2, ]             svm <- ksvm(result ~ con + x + y + z + b, data = train.data)             f <- data.frame(ID = val$ID, result = val$result,                  predict = predict(svm, val), change = val$change,                  iter1 = i, iter2 = i2)             df <- rbind(df, f)         }     }     for (i in 1:30) {         svm <- ksvm(result ~ con + x + y + z + b, data = D)         f <- data.frame(ID = final_data$ID, predict = predict(svm,              final_data), n = i)         fpredict <- rbind(fpredict, f)     }     options(warn = oldw)     fpredictb <- fpredict %>% group_by(ID) %>% summarise(SVM_predict = mean(predict))     ID <- str_split(fpredictb$ID, pattern = \":\", simplify = TRUE)     for (i in 1:nrow(fpredictb)) {         if (ID[i, 5] == ID[i, 7]) {             fpredictb$predict[i] = 0         }     }     final_data <- merge(fpredictb, final_data)     fwrite(final_data, MOVA_final_predict_file)     df$iter3 <- df$iter1 + (df$iter2 * 5)     out <- cvAUC(df$predict, df$result, label.ordering = NULL,          folds = df$iter3)     plot(out$perf, col = \"black\", avg = \"vertical\", add = TRUE)     cvauc <- out$cvAUC     YI2 <- data.frame(matrix(rep(NA, 5), nrow = 1))[numeric(0),          ]     colnames(YI2) <- c(\"Cutoff\", \"positive_variant_num\", \"negative_variant_num\",          \"AUC\", \"cvauc\")     for (i in 6:30) {         pred <- prediction(df[df$iter3 == i, ]$predict, df[df$iter3 ==              i, ]$result)         auc.tmp <- performance(pred, \"auc\")         auc <- as.numeric(auc.tmp@y.values)         tab <- data.frame(Cutoff = unlist(pred@cutoffs), TP = unlist(pred@tp),              FP = unlist(pred@fp), FN = unlist(pred@fn), TN = unlist(pred@tn),              Sensitivity = unlist(pred@tp)/(unlist(pred@tp) +                  unlist(pred@fn)), Specificity = unlist(pred@tn)/(unlist(pred@fp) +                  unlist(pred@tn)), Accuracy = ((unlist(pred@tp) +                  unlist(pred@tn))/nrow(df)), Precision = (unlist(pred@tp)/(unlist(pred@tp) +                  unlist(pred@fp))))         tab$Youden <- tab$Sensitivity + tab$Specificity - 1         YI <- tab[order(tab$Youden, decreasing = T), ]         YI <- data.frame(Cutoff = YI$Cutoff[1], positive_variant_num = c(nrow(df[(df$result ==              1) & (df$iter2 == 1), ])), negative_variant_num = c(nrow(df[(df$result ==              0) & (df$iter2 == 1), ])), AUC = c(auc), cvauc = c(cvauc))         YI2 <- rbind(YI2, YI)     }     fwrite(YI2, paste(protein_name, phenotype, \"result_svm.csv\",          sep = \"_\"))     df2 <- df %>% group_by(ID) %>% summarise(SVM_predict = mean(predict))     D[, c(\"result\")] <- list(NULL)     fwrite(merge(D, df2), MOVA_predict_file)     fwrite(df, paste(protein_name, phenotype, \"predict_orig_SVM.csv\",          sep = \"_\"))     return(YI2)   } #> function (protein_name, MOVA_final_predict_file, MOVA_predict_file,  #>     phenotype = \"Target\")  #> { #>     D <- fread(MOVA_predict_file) #>     D$SVM_predict <- 0 #>     D[, c(\"SVM_predict\")] <- list(NULL) #>     if (phenotype == \"Target\") { #>         D <- D[(D$Type == \"Target\") | (D$Type == \"Ctrl\"), ] #>     } #>     fpredict <- data.frame(matrix(rep(NA, 3), nrow = 1))[numeric(0),  #>         ] #>     colnames(fpredict) <- c(\"change\", \"predict\", \"n\") #>     final_data <- fread(MOVA_final_predict_file) #>     final_data$SVM_predict <- 0 #>     final_data[, c(\"SVM_predict\")] <- list(NULL) #>     df <- data.frame(matrix(rep(NA, 6), nrow = 1))[numeric(0),  #>         ] #>     colnames(df) <- c(\"ID\", \"result\", \"predict\", \"change\", \"iter1\",  #>         \"iter2\") #>     D$id2 <- 0 #>     D[, c(\"id2\")] <- list(NULL) #>     if (phenotype == \"Target\") { #>         D$result <- D$Type2 #>     } #>     else { #>         D$result <- D$Type3 #>     } #>     oldw <- getOption(\"warn\") #>     options(warn = -1) #>     D <- rowid_to_column(D, var = \"id2\") #>     for (i2 in 1:5) { #>         D$id3 <- D$id2 #>         j <- 5 #>         dat1 <- D %>% stratified(., group = \"result\", size = 1/j) #>         dat1$iter <- 1 #>         datzan <- D[-dat1$id2, ] #>         for (i in 2:j) { #>             datzan[, c(\"id2\")] <- list(NULL) #>             datzan <- rowid_to_column(datzan, var = \"id2\") #>             if (i != j) { #>                 dat2 <- datzan %>% stratified(., group = \"result\",  #>                   size = 1/(j - i + 1)) #>             } #>             else { #>                 dat2 <- datzan #>             } #>             dat2$iter <- i #>             datzan <- datzan[-dat2$id2, ] #>             dat1 <- rbind(dat1, dat2) #>         } #>         dat1[, c(\"id2\")] <- list(NULL) #>         dat1 <- rowid_to_column(dat1, var = \"id2\") #>         for (i in 1:j) { #>             val <- dat1[dat1$iter == i, ] #>             train.data <- dat1[-val$id2, ] #>             svm <- ksvm(result ~ con + x + y + z + b, data = train.data) #>             f <- data.frame(ID = val$ID, result = val$result,  #>                 predict = predict(svm, val), change = val$change,  #>                 iter1 = i, iter2 = i2) #>             df <- rbind(df, f) #>         } #>     } #>     for (i in 1:30) { #>         svm <- ksvm(result ~ con + x + y + z + b, data = D) #>         f <- data.frame(ID = final_data$ID, predict = predict(svm,  #>             final_data), n = i) #>         fpredict <- rbind(fpredict, f) #>     } #>     options(warn = oldw) #>     fpredictb <- fpredict %>% group_by(ID) %>% summarise(SVM_predict = mean(predict)) #>     ID <- str_split(fpredictb$ID, pattern = \":\", simplify = TRUE) #>     for (i in 1:nrow(fpredictb)) { #>         if (ID[i, 5] == ID[i, 7]) { #>             fpredictb$predict[i] = 0 #>         } #>     } #>     final_data <- merge(fpredictb, final_data) #>     fwrite(final_data, MOVA_final_predict_file) #>     df$iter3 <- df$iter1 + (df$iter2 * 5) #>     out <- cvAUC(df$predict, df$result, label.ordering = NULL,  #>         folds = df$iter3) #>     plot(out$perf, col = \"black\", avg = \"vertical\", add = TRUE) #>     cvauc <- out$cvAUC #>     YI2 <- data.frame(matrix(rep(NA, 5), nrow = 1))[numeric(0),  #>         ] #>     colnames(YI2) <- c(\"Cutoff\", \"positive_variant_num\", \"negative_variant_num\",  #>         \"AUC\", \"cvauc\") #>     for (i in 6:30) { #>         pred <- prediction(df[df$iter3 == i, ]$predict, df[df$iter3 ==  #>             i, ]$result) #>         auc.tmp <- performance(pred, \"auc\") #>         auc <- as.numeric(auc.tmp@y.values) #>         tab <- data.frame(Cutoff = unlist(pred@cutoffs), TP = unlist(pred@tp),  #>             FP = unlist(pred@fp), FN = unlist(pred@fn), TN = unlist(pred@tn),  #>             Sensitivity = unlist(pred@tp)/(unlist(pred@tp) +  #>                 unlist(pred@fn)), Specificity = unlist(pred@tn)/(unlist(pred@fp) +  #>                 unlist(pred@tn)), Accuracy = ((unlist(pred@tp) +  #>                 unlist(pred@tn))/nrow(df)), Precision = (unlist(pred@tp)/(unlist(pred@tp) +  #>                 unlist(pred@fp)))) #>         tab$Youden <- tab$Sensitivity + tab$Specificity - 1 #>         YI <- tab[order(tab$Youden, decreasing = T), ] #>         YI <- data.frame(Cutoff = YI$Cutoff[1], positive_variant_num = c(nrow(df[(df$result ==  #>             1) & (df$iter2 == 1), ])), negative_variant_num = c(nrow(df[(df$result ==  #>             0) & (df$iter2 == 1), ])), AUC = c(auc), cvauc = c(cvauc)) #>         YI2 <- rbind(YI2, YI) #>     } #>     fwrite(YI2, paste(protein_name, phenotype, \"result_svm.csv\",  #>         sep = \"_\")) #>     df2 <- df %>% group_by(ID) %>% summarise(SVM_predict = mean(predict)) #>     D[, c(\"result\")] <- list(NULL) #>     fwrite(merge(D, df2), MOVA_predict_file) #>     fwrite(df, paste(protein_name, phenotype, \"predict_orig_SVM.csv\",  #>         sep = \"_\")) #>     return(YI2) #>   } #> <environment: 0x0000011a8f8472c0>"},{"path":"/reference/MOVA_without_3d_coordinates.html","id":null,"dir":"Reference","previous_headings":"","what":"MOVA with pLDDT and BLOSUM62 as explanatory variable\r\n — MOVA_without_3d_coordinates","title":"MOVA with pLDDT and BLOSUM62 as explanatory variable\r\n — MOVA_without_3d_coordinates","text":"Random forest performed pLDDT BLOSUM62  explanatory variable pathogenicity variants objective variable.","code":""},{"path":"/reference/MOVA_without_3d_coordinates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MOVA with pLDDT and BLOSUM62 as explanatory variable\r\n — MOVA_without_3d_coordinates","text":"","code":"MOVA_without_3d_coordinates(protein_name, MOVA_final_predict_file, MOVA_predict_file, phenotype = \"Target\")"},{"path":"/reference/MOVA_without_3d_coordinates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MOVA with pLDDT and BLOSUM62 as explanatory variable\r\n — MOVA_without_3d_coordinates","text":"protein_name Name target protein/gene. Used name file exported. MOVA_final_predict_file \"gene name_Target Pathogenic_finalpredict.csv\" file output MOVA function. final MOVA_only_3d_coordinates predicted values file. MOVA_predict_file \"gene name_Target Pathogenic_predict.csv\" file output MOVA function. phenotype Specify \"Target\" want positive variant Target variant , \"Pathogenic\" want include Pathogenic variant well. default \"Target\".","code":""},{"path":"/reference/MOVA_without_3d_coordinates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MOVA with pLDDT and BLOSUM62 as explanatory variable\r\n — MOVA_without_3d_coordinates","text":"Draw ROC curve MOVA_without_3d_coordinates (black). MOVA_without_3d_coordinates evaluated using Stratified 5-fold cross validation method, model repeated five times. average predicted values added \"without_3d_coordinates_predict\" column MOVA_predict_file. final MOVA_without_3d_coordinates predicted value added \"without_3d_coordinates_predict\" column MOVA_final_predict_file. \"protein/gene name_Target Pathogenic_result_without3d.csv\" contains Cutoff value (Youden index) fold (Column: Cutoff), number positive variants gene used analysis (Column: positive_variant_num), number negative variants (Column: negative_variant_num), AUC fold MOVA_without_3d_coordinates (Column: AUC), cvAUC MOVA_without_3d_coordinates (Column: cvauc). file required redrawing MOVA_redraw function MOVA_without_3d_coordinates output \"protein/gene name_Target Pathogenic_predict_orig_without3d.csv\".","code":""},{"path":"/reference/MOVA_without_3d_coordinates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MOVA with pLDDT and BLOSUM62 as explanatory variable\r\n — MOVA_without_3d_coordinates","text":"data.frame containing Cutoff value (Youden index) fold (Column: Cutoff), number positive variants gene used analysis (Column: positive_variant_num), number negative variants (Column: negative_variant_num), AUC fold MOVA_without_3d_coordinates (Column: AUC), cvAUC MOVA_without_3d_coordinates (Column: cvauc). data output \"protein/gene name_Target Pathogenic_result_only_without3d.csv\".","code":""},{"path":[]},{"path":"/reference/MOVA_without_3d_coordinates.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"MOVA with pLDDT and BLOSUM62 as explanatory variable\r\n — MOVA_without_3d_coordinates","text":"Yuya Hatano","code":""},{"path":[]},{"path":[]},{"path":"/reference/MOVA_without_3d_coordinates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MOVA with pLDDT and BLOSUM62 as explanatory variable\r\n — MOVA_without_3d_coordinates","text":"","code":"Hgmd_divide(\"./source/TARDBP.csv\") #> Error in fread(hgmd_file_name): File './source/TARDBP.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_gnomAD_file(\"./source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv\", \"./source/TARDBP_gnomAD.csv\") #> Error in fread(input_file_name): File './source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_variant_data(\"../CADD_REVEL/AlphScore_final.tsv\", \"./source/TARDBP.csv\", \"./source/TARDBP_gnomAD.csv\", \"Q13148\", \"TARDBP\", \"./source/TARDBPvariantdata.csv\") #> Error in fread(AlphScore_final_file): File '../CADD_REVEL/AlphScore_final.tsv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_polyphen_data(\"../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1\",\"./source/TARDBPvariantdata.csv\", \"TARDBP_alph.csv\",  \"Q13148\",  11012654, 11025492 ,\"./source/TARDBPvariantdatapol.csv\", \"./source/TARDBP_alphpol.csv\") #> Error in fread(dbNSFP4.3a_final_file): File '../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_final_variant_file(\"./source/TARDBP_alphpol.csv\",\"./source/TARDBP_alphpol2.csv\") #> Error in fread(input_file_name): File './source/TARDBP_alphpol.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA(\"./source/Q13148.fa\", \"TARDBP\", \"./source/AF-Q13148-F1-model_v2.pdb\",\"./source/TARDBP_alphpol2.csv\", \"./source/TARDBPvariantdatapol.csv\") #> Warning: data set 'BLOSUM62' not found #> Warning: cannot open file './source/Q13148.fa': No such file or directory #> Error in file(con, \"r\"): cannot open the connection MOVA_without_3d_coordinates(\"TARDBP\", \"TARDBP_Target_finalpredict.csv\",\"TARDBP_Target_predict.csv\") #> Error in fread(MOVA_predict_file): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA_only_pLDDT(\"TARDBP\", \"TARDBP_Target_finalpredict.csv\",\"TARDBP_Target_predict.csv\") #> Error in fread(MOVA_predict_file): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA_only_BLOSUM62(\"TARDBP\", \"TARDBP_Target_finalpredict.csv\",\"TARDBP_Target_predict.csv\") #> Error in fread(MOVA_predict_file): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA_only_3d_coordinates(\"TARDBP\", \"TARDBP_Target_finalpredict.csv\",\"TARDBP_Target_predict.csv\") #> Error in fread(MOVA_predict_file): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' ##---- Should be DIRECTLY executable !! ---- ##-- ==>  Define data, use random, ##--  or do  help(data=index)  for the standard data sets.  ## The function is currently defined as function (protein_name, MOVA_final_predict_file, MOVA_predict_file,      phenotype = \"Target\")  {     D <- fread(MOVA_predict_file)     D$without_3d_coordinates_predict <- 0     D[, c(\"without_3d_coordinates_predict\")] <- list(NULL)     if (phenotype == \"Target\") {         D <- D[(D$Type == \"Target\") | (D$Type == \"Ctrl\"), ]     }     fpredict <- data.frame(matrix(rep(NA, 3), nrow = 1))[numeric(0),          ]     colnames(fpredict) <- c(\"change\", \"predict\", \"n\")     final_data <- fread(MOVA_final_predict_file)     final_data$without_3d_coordinates_predict <- 0     final_data[, c(\"without_3d_coordinates_predict\")] <- list(NULL)     df <- data.frame(matrix(rep(NA, 6), nrow = 1))[numeric(0),          ]     colnames(df) <- c(\"ID\", \"result\", \"predict\", \"change\", \"iter1\",          \"iter2\")     D$id2 <- 0     D[, c(\"id2\")] <- list(NULL)     if (phenotype == \"Target\") {         D$result <- D$Type2     }     else {         D$result <- D$Type3     }     oldw <- getOption(\"warn\")     options(warn = -1)     D <- rowid_to_column(D, var = \"id2\")     for (i2 in 1:5) {         D$id3 <- D$id2         j <- 5         dat1 <- D %>% stratified(., group = \"result\", size = 1/j)         dat1$iter <- 1         datzan <- D[-dat1$id2, ]         for (i in 2:j) {             datzan[, c(\"id2\")] <- list(NULL)             datzan <- rowid_to_column(datzan, var = \"id2\")             if (i != j) {                 dat2 <- datzan %>% stratified(., group = \"result\",                    size = 1/(j - i + 1))             }             else {                 dat2 <- datzan             }             dat2$iter <- i             datzan <- datzan[-dat2$id2, ]             dat1 <- rbind(dat1, dat2)         }         dat1[, c(\"id2\")] <- list(NULL)         dat1 <- rowid_to_column(dat1, var = \"id2\")         for (i in 1:j) {             val <- dat1[dat1$iter == i, ]             train.data <- dat1[-val$id2, ]             rf <- randomForest(result ~ con + b, train.data,                  importance = TRUE)             f <- data.frame(ID = val$ID, result = val$result,                  predict = predict(rf, val), change = val$change,                  iter1 = i, iter2 = i2)             df <- rbind(df, f)         }     }     for (i in 1:30) {         rf <- randomForest(result ~ con + b, D)         f <- data.frame(ID = final_data$ID, predict = predict(rf,              final_data), n = i)         fpredict <- rbind(fpredict, f)     }     options(warn = oldw)     fpredictb <- fpredict %>% group_by(ID) %>% summarise(without_3d_coordinates_predict = mean(predict))     ID <- str_split(fpredictb$ID, pattern = \":\", simplify = TRUE)     for (i in 1:nrow(fpredictb)) {         if (ID[i, 5] == ID[i, 7]) {             fpredictb$predict[i] = 0         }     }     final_data <- merge(fpredictb, final_data)     fwrite(final_data, MOVA_final_predict_file)     df$iter3 <- df$iter1 + (df$iter2 * 5)     out <- cvAUC(df$predict, df$result, label.ordering = NULL,          folds = df$iter3)     plot(out$perf, col = \"black\", avg = \"vertical\", add = TRUE)     cvauc <- out$cvAUC     YI2 <- data.frame(matrix(rep(NA, 5), nrow = 1))[numeric(0),          ]     colnames(YI2) <- c(\"Cutoff\", \"positive_variant_num\", \"negative_variant_num\",          \"AUC\", \"cvauc\")     for (i in 6:30) {         pred <- prediction(df[df$iter3 == i, ]$predict, df[df$iter3 ==              i, ]$result)         auc.tmp <- performance(pred, \"auc\")         auc <- as.numeric(auc.tmp@y.values)         tab <- data.frame(Cutoff = unlist(pred@cutoffs), TP = unlist(pred@tp),              FP = unlist(pred@fp), FN = unlist(pred@fn), TN = unlist(pred@tn),              Sensitivity = unlist(pred@tp)/(unlist(pred@tp) +                  unlist(pred@fn)), Specificity = unlist(pred@tn)/(unlist(pred@fp) +                  unlist(pred@tn)), Accuracy = ((unlist(pred@tp) +                  unlist(pred@tn))/nrow(df)), Precision = (unlist(pred@tp)/(unlist(pred@tp) +                  unlist(pred@fp))))         tab$Youden <- tab$Sensitivity + tab$Specificity - 1         YI <- tab[order(tab$Youden, decreasing = T), ]         YI <- data.frame(Cutoff = YI$Cutoff[1], positive_variant_num = c(nrow(df[(df$result ==              1) & (df$iter2 == 1), ])), negative_variant_num = c(nrow(df[(df$result ==              0) & (df$iter2 == 1), ])), AUC = c(auc), cvauc = c(cvauc))         YI2 <- rbind(YI2, YI)     }     fwrite(YI2, paste(protein_name, phenotype, \"result_without3d.csv\",          sep = \"_\"))     df2 <- df %>% group_by(ID) %>% summarise(without_3d_coordinates_predict = mean(predict))     D[, c(\"result\")] <- list(NULL)     fwrite(merge(D, df2), MOVA_predict_file)     fwrite(df, paste(protein_name, phenotype, \"predict_orig_without3d.csv\",          sep = \"_\"))     return(YI2)   } #> function (protein_name, MOVA_final_predict_file, MOVA_predict_file,  #>     phenotype = \"Target\")  #> { #>     D <- fread(MOVA_predict_file) #>     D$without_3d_coordinates_predict <- 0 #>     D[, c(\"without_3d_coordinates_predict\")] <- list(NULL) #>     if (phenotype == \"Target\") { #>         D <- D[(D$Type == \"Target\") | (D$Type == \"Ctrl\"), ] #>     } #>     fpredict <- data.frame(matrix(rep(NA, 3), nrow = 1))[numeric(0),  #>         ] #>     colnames(fpredict) <- c(\"change\", \"predict\", \"n\") #>     final_data <- fread(MOVA_final_predict_file) #>     final_data$without_3d_coordinates_predict <- 0 #>     final_data[, c(\"without_3d_coordinates_predict\")] <- list(NULL) #>     df <- data.frame(matrix(rep(NA, 6), nrow = 1))[numeric(0),  #>         ] #>     colnames(df) <- c(\"ID\", \"result\", \"predict\", \"change\", \"iter1\",  #>         \"iter2\") #>     D$id2 <- 0 #>     D[, c(\"id2\")] <- list(NULL) #>     if (phenotype == \"Target\") { #>         D$result <- D$Type2 #>     } #>     else { #>         D$result <- D$Type3 #>     } #>     oldw <- getOption(\"warn\") #>     options(warn = -1) #>     D <- rowid_to_column(D, var = \"id2\") #>     for (i2 in 1:5) { #>         D$id3 <- D$id2 #>         j <- 5 #>         dat1 <- D %>% stratified(., group = \"result\", size = 1/j) #>         dat1$iter <- 1 #>         datzan <- D[-dat1$id2, ] #>         for (i in 2:j) { #>             datzan[, c(\"id2\")] <- list(NULL) #>             datzan <- rowid_to_column(datzan, var = \"id2\") #>             if (i != j) { #>                 dat2 <- datzan %>% stratified(., group = \"result\",  #>                   size = 1/(j - i + 1)) #>             } #>             else { #>                 dat2 <- datzan #>             } #>             dat2$iter <- i #>             datzan <- datzan[-dat2$id2, ] #>             dat1 <- rbind(dat1, dat2) #>         } #>         dat1[, c(\"id2\")] <- list(NULL) #>         dat1 <- rowid_to_column(dat1, var = \"id2\") #>         for (i in 1:j) { #>             val <- dat1[dat1$iter == i, ] #>             train.data <- dat1[-val$id2, ] #>             rf <- randomForest(result ~ con + b, train.data,  #>                 importance = TRUE) #>             f <- data.frame(ID = val$ID, result = val$result,  #>                 predict = predict(rf, val), change = val$change,  #>                 iter1 = i, iter2 = i2) #>             df <- rbind(df, f) #>         } #>     } #>     for (i in 1:30) { #>         rf <- randomForest(result ~ con + b, D) #>         f <- data.frame(ID = final_data$ID, predict = predict(rf,  #>             final_data), n = i) #>         fpredict <- rbind(fpredict, f) #>     } #>     options(warn = oldw) #>     fpredictb <- fpredict %>% group_by(ID) %>% summarise(without_3d_coordinates_predict = mean(predict)) #>     ID <- str_split(fpredictb$ID, pattern = \":\", simplify = TRUE) #>     for (i in 1:nrow(fpredictb)) { #>         if (ID[i, 5] == ID[i, 7]) { #>             fpredictb$predict[i] = 0 #>         } #>     } #>     final_data <- merge(fpredictb, final_data) #>     fwrite(final_data, MOVA_final_predict_file) #>     df$iter3 <- df$iter1 + (df$iter2 * 5) #>     out <- cvAUC(df$predict, df$result, label.ordering = NULL,  #>         folds = df$iter3) #>     plot(out$perf, col = \"black\", avg = \"vertical\", add = TRUE) #>     cvauc <- out$cvAUC #>     YI2 <- data.frame(matrix(rep(NA, 5), nrow = 1))[numeric(0),  #>         ] #>     colnames(YI2) <- c(\"Cutoff\", \"positive_variant_num\", \"negative_variant_num\",  #>         \"AUC\", \"cvauc\") #>     for (i in 6:30) { #>         pred <- prediction(df[df$iter3 == i, ]$predict, df[df$iter3 ==  #>             i, ]$result) #>         auc.tmp <- performance(pred, \"auc\") #>         auc <- as.numeric(auc.tmp@y.values) #>         tab <- data.frame(Cutoff = unlist(pred@cutoffs), TP = unlist(pred@tp),  #>             FP = unlist(pred@fp), FN = unlist(pred@fn), TN = unlist(pred@tn),  #>             Sensitivity = unlist(pred@tp)/(unlist(pred@tp) +  #>                 unlist(pred@fn)), Specificity = unlist(pred@tn)/(unlist(pred@fp) +  #>                 unlist(pred@tn)), Accuracy = ((unlist(pred@tp) +  #>                 unlist(pred@tn))/nrow(df)), Precision = (unlist(pred@tp)/(unlist(pred@tp) +  #>                 unlist(pred@fp)))) #>         tab$Youden <- tab$Sensitivity + tab$Specificity - 1 #>         YI <- tab[order(tab$Youden, decreasing = T), ] #>         YI <- data.frame(Cutoff = YI$Cutoff[1], positive_variant_num = c(nrow(df[(df$result ==  #>             1) & (df$iter2 == 1), ])), negative_variant_num = c(nrow(df[(df$result ==  #>             0) & (df$iter2 == 1), ])), AUC = c(auc), cvauc = c(cvauc)) #>         YI2 <- rbind(YI2, YI) #>     } #>     fwrite(YI2, paste(protein_name, phenotype, \"result_without3d.csv\",  #>         sep = \"_\")) #>     df2 <- df %>% group_by(ID) %>% summarise(without_3d_coordinates_predict = mean(predict)) #>     D[, c(\"result\")] <- list(NULL) #>     fwrite(merge(D, df2), MOVA_predict_file) #>     fwrite(df, paste(protein_name, phenotype, \"predict_orig_without3d.csv\",  #>         sep = \"_\")) #>     return(YI2) #>   } #> <environment: 0x0000011a86cac288>"},{"path":"/reference/MOVA_xgboost.html","id":null,"dir":"Reference","previous_headings":"","what":"The training was performed in XGBoost.\r\n — MOVA_xgboost","title":"The training was performed in XGBoost.\r\n — MOVA_xgboost","text":"function trained XGBoost ΔBLOSUM62, 3D location information, pLDDT explanatory variables pathogenicity variant objective variable.","code":""},{"path":"/reference/MOVA_xgboost.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The training was performed in XGBoost.\r\n — MOVA_xgboost","text":"","code":"MOVA_xgboost(protein_name, MOVA_final_predict_file, MOVA_predict_file, phenotype = \"Target\")"},{"path":"/reference/MOVA_xgboost.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The training was performed in XGBoost.\r\n — MOVA_xgboost","text":"protein_name Name target protein/gene. Used name file exported. MOVA_final_predict_file \"gene name_Target Pathogenic_finalpredict.csv\" file output MOVA function. final MOVA_3d_distance predicted values file. MOVA_predict_file \"gene name_Target Pathogenic_predict.csv\" file output MOVA function. phenotype Specify \"Target\" want positive variant Target variant , \"Pathogenic\" want include Pathogenic variant well. default \"Target\".","code":""},{"path":"/reference/MOVA_xgboost.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The training was performed in XGBoost.\r\n — MOVA_xgboost","text":"Draw ROC curve MOVA_xgboost (blue). MOVA_xgboost evaluated using stratified 5-fold cross validation method, models repeated five times. average predicted values added \"xgboost_predict\" column MOVA_predict_file. final MOVA_xgboost predicted value added \"xgboost_predict\" column MOVA_final_predict_file. \"protein/gene name_Target Pathogenic_result_xgboost.csv\" contains Cutoff value (Youden index) fold (Column: Cutoff), number positive variants gene used analysis (Column: positive_variant_num), number negative variants (Column: negative_variant_num), AUC fold MOVA_xgboost (Column: AUC), cvAUC MOVA_xgboost (Column: cvauc). file required redrawing MOVA_redraw function MOVA_xgboost output \"protein/gene name_Target Pathogenic_predict_orig_xgboost.csv\".","code":""},{"path":"/reference/MOVA_xgboost.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The training was performed in XGBoost.\r\n — MOVA_xgboost","text":"data.frame containing Cutoff value (Youden index) fold (Column: Cutoff), number positive variants gene used analysis (Column: positive_variant_num), number negative variants (Column: negative_variant_num), AUC fold MOVA_xgboost (Column: AUC), cvAUC MOVA_xgboost (Column: cvauc). data output \"protein/gene name_Target Pathogenic_result_xgboost.csv\".","code":""},{"path":[]},{"path":"/reference/MOVA_xgboost.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The training was performed in XGBoost.\r\n — MOVA_xgboost","text":"Yuya Hatano","code":""},{"path":[]},{"path":[]},{"path":"/reference/MOVA_xgboost.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The training was performed in XGBoost.\r\n — MOVA_xgboost","text":"","code":"Hgmd_divide(\"./source/TARDBP.csv\") #> Error in fread(hgmd_file_name): File './source/TARDBP.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_gnomAD_file(\"./source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv\", \"./source/TARDBP_gnomAD.csv\") #> Error in fread(input_file_name): File './source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_variant_data(\"../CADD_REVEL/AlphScore_final.tsv\", \"./source/TARDBP.csv\", \"./source/TARDBP_gnomAD.csv\", \"Q13148\", \"TARDBP\", \"./source/TARDBPvariantdata.csv\") #> Error in fread(AlphScore_final_file): File '../CADD_REVEL/AlphScore_final.tsv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_polyphen_data(\"../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1\",\"./source/TARDBPvariantdata.csv\", \"TARDBP_alph.csv\",  \"Q13148\",  11012654, 11025492 ,\"./source/TARDBPvariantdatapol.csv\", \"./source/TARDBP_alphpol.csv\") #> Error in fread(dbNSFP4.3a_final_file): File '../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_final_variant_file(\"./source/TARDBP_alphpol.csv\",\"./source/TARDBP_alphpol2.csv\") #> Error in fread(input_file_name): File './source/TARDBP_alphpol.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA(\"./source/Q13148.fa\", \"TARDBP\", \"./source/AF-Q13148-F1-model_v2.pdb\",\"./source/TARDBP_alphpol2.csv\", \"./source/TARDBPvariantdatapol.csv\") #> Warning: data set 'BLOSUM62' not found #> Warning: cannot open file './source/Q13148.fa': No such file or directory #> Error in file(con, \"r\"): cannot open the connection MOVA_SVM(\"TARDBP\", \"TARDBP_Target_finalpredict.csv\",\"TARDBP_Target_predict.csv\") #> Error in fread(MOVA_predict_file): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA_xgboost(\"TARDBP\", \"TARDBP_Target_finalpredict.csv\",\"TARDBP_Target_predict.csv\") #> Error in fread(MOVA_predict_file): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' ##---- Should be DIRECTLY executable !! ---- ##-- ==>  Define data, use random, ##--  or do  help(data=index)  for the standard data sets.  ## The function is currently defined as function (protein_name, MOVA_final_predict_file, MOVA_predict_file,      phenotype = \"Target\")  {     D <- fread(MOVA_predict_file)     D$xgboost_predict <- 0     D[, c(\"xgboost_predict\")] <- list(NULL)     if (phenotype == \"Target\") {         D <- D[(D$Type == \"Target\") | (D$Type == \"Ctrl\"), ]     }     fpredict <- data.frame(matrix(rep(NA, 3), nrow = 1))[numeric(0),          ]     colnames(fpredict) <- c(\"change\", \"predict\", \"n\")     final_data <- fread(MOVA_final_predict_file)     final_data$xgboost_predict <- 0     final_data[, c(\"xgboost_predict\")] <- list(NULL)     final_data$dammy <- 0     df <- data.frame(matrix(rep(NA, 6), nrow = 1))[numeric(0),          ]     colnames(df) <- c(\"ID\", \"result\", \"predict\", \"change\", \"iter1\",          \"iter2\")     D$id2 <- 0     D[, c(\"id2\")] <- list(NULL)     if (phenotype == \"Target\") {         D$result <- D$Type2     }     else {         D$result <- D$Type3     }     oldw <- getOption(\"warn\")     options(warn = -1)     D <- rowid_to_column(D, var = \"id2\")     for (i2 in 1:5) {         D$id3 <- D$id2         j <- 5         dat1 <- D %>% stratified(., group = \"result\", size = 1/j)         dat1$iter <- 1         datzan <- D[-dat1$id2, ]         for (i in 2:j) {             datzan[, c(\"id2\")] <- list(NULL)             datzan <- rowid_to_column(datzan, var = \"id2\")             if (i != j) {                 dat2 <- datzan %>% stratified(., group = \"result\",                    size = 1/(j - i + 1))             }             else {                 dat2 <- datzan             }             dat2$iter <- i             datzan <- datzan[-dat2$id2, ]             dat1 <- rbind(dat1, dat2)         }         dat1[, c(\"id2\")] <- list(NULL)         dat1 <- rowid_to_column(dat1, var = \"id2\")         for (i in 1:j) {             val <- dat1[dat1$iter == i, ]             train.data <- dat1[-val$id2, ]             train.data.mx <- sparse.model.matrix(result ~ .,                  data.frame(result = train.data$result, con = train.data$con,                    x = train.data$x, y = train.data$y, z = train.data$z,                    b = train.data$b))             train.data.dm <- xgb.DMatrix(train.data.mx, label = train.data$result)             xgb.result <- xgb.train(data = train.data.dm, label = train.data$result,                  objective = \"binary:logistic\", booster = \"gbtree\",                  nrounds = 100, verbose = 1)             test.data.mx <- sparse.model.matrix(result ~ ., data.frame(result = val$result,                  con = val$con, x = val$x, y = val$y, z = val$z,                  b = val$b))             test.data.dm <- xgb.DMatrix(test.data.mx, label = val$result)             f <- data.frame(ID = val$ID, result = val$result,                  predict = predict(object = xgb.result, newdata = test.data.dm),                  change = val$change, iter1 = i, iter2 = i2)             df <- rbind(df, f)         }     }     final_data.mx <- sparse.model.matrix(dammy ~ ., data.frame(dammy = final_data$dammy,          con = final_data$con, x = final_data$x, y = final_data$y,          z = final_data$z, b = final_data$b))     final_data.dm <- xgb.DMatrix(final_data.mx, label = final_data$dammy)     D.mx <- sparse.model.matrix(result ~ ., data.frame(result = D$result,          con = D$con, x = D$x, y = D$y, z = D$z, b = D$b))     D.dm <- xgb.DMatrix(D.mx, label = D$result)     for (i in 1:30) {         xgb.result <- xgb.train(data = D.dm, label = D$result,              objective = \"binary:logistic\", booster = \"gbtree\",              nrounds = 100, verbose = 1)         f <- data.frame(ID = final_data$ID, predict = predict(object = xgb.result,              newdata = final_data.dm), n = i)         fpredict <- rbind(fpredict, f)     }     options(warn = oldw)     fpredictb <- fpredict %>% group_by(ID) %>% summarise(xgboost_predict = mean(predict))     final_data <- merge(fpredictb, final_data)     fwrite(final_data, MOVA_final_predict_file)     df$iter3 <- df$iter1 + (df$iter2 * 5)     out <- cvAUC(df$predict, df$result, label.ordering = NULL,          folds = df$iter3)     plot(out$perf, col = \"blue\", avg = \"vertical\", add = TRUE)     cvauc <- out$cvAUC     YI2 <- data.frame(matrix(rep(NA, 5), nrow = 1))[numeric(0),          ]     colnames(YI2) <- c(\"Cutoff\", \"positive_variant_num\", \"negative_variant_num\",          \"AUC\", \"cvauc\")     for (i in 6:30) {         pred <- prediction(df[df$iter3 == i, ]$predict, df[df$iter3 ==              i, ]$result)         auc.tmp <- performance(pred, \"auc\")         auc <- as.numeric(auc.tmp@y.values)         tab <- data.frame(Cutoff = unlist(pred@cutoffs), TP = unlist(pred@tp),              FP = unlist(pred@fp), FN = unlist(pred@fn), TN = unlist(pred@tn),              Sensitivity = unlist(pred@tp)/(unlist(pred@tp) +                  unlist(pred@fn)), Specificity = unlist(pred@tn)/(unlist(pred@fp) +                  unlist(pred@tn)), Accuracy = ((unlist(pred@tp) +                  unlist(pred@tn))/nrow(df)), Precision = (unlist(pred@tp)/(unlist(pred@tp) +                  unlist(pred@fp))))         tab$Youden <- tab$Sensitivity + tab$Specificity - 1         YI <- tab[order(tab$Youden, decreasing = T), ]         YI <- data.frame(Cutoff = YI$Cutoff[1], positive_variant_num = c(nrow(df[(df$result ==              1) & (df$iter2 == 1), ])), negative_variant_num = c(nrow(df[(df$result ==              0) & (df$iter2 == 1), ])), AUC = c(auc), cvauc = c(cvauc))         YI2 <- rbind(YI2, YI)     }     fwrite(YI2, paste(protein_name, phenotype, \"result_xgboost.csv\",          sep = \"_\"))     df2 <- df %>% group_by(ID) %>% summarise(xgboost_predict = mean(predict))     D[, c(\"result\")] <- list(NULL)     fwrite(merge(D, df2), MOVA_predict_file)     fwrite(df, paste(protein_name, phenotype, \"predict_orig_xgboost.csv\",          sep = \"_\"))     return(YI2)   } #> function (protein_name, MOVA_final_predict_file, MOVA_predict_file,  #>     phenotype = \"Target\")  #> { #>     D <- fread(MOVA_predict_file) #>     D$xgboost_predict <- 0 #>     D[, c(\"xgboost_predict\")] <- list(NULL) #>     if (phenotype == \"Target\") { #>         D <- D[(D$Type == \"Target\") | (D$Type == \"Ctrl\"), ] #>     } #>     fpredict <- data.frame(matrix(rep(NA, 3), nrow = 1))[numeric(0),  #>         ] #>     colnames(fpredict) <- c(\"change\", \"predict\", \"n\") #>     final_data <- fread(MOVA_final_predict_file) #>     final_data$xgboost_predict <- 0 #>     final_data[, c(\"xgboost_predict\")] <- list(NULL) #>     final_data$dammy <- 0 #>     df <- data.frame(matrix(rep(NA, 6), nrow = 1))[numeric(0),  #>         ] #>     colnames(df) <- c(\"ID\", \"result\", \"predict\", \"change\", \"iter1\",  #>         \"iter2\") #>     D$id2 <- 0 #>     D[, c(\"id2\")] <- list(NULL) #>     if (phenotype == \"Target\") { #>         D$result <- D$Type2 #>     } #>     else { #>         D$result <- D$Type3 #>     } #>     oldw <- getOption(\"warn\") #>     options(warn = -1) #>     D <- rowid_to_column(D, var = \"id2\") #>     for (i2 in 1:5) { #>         D$id3 <- D$id2 #>         j <- 5 #>         dat1 <- D %>% stratified(., group = \"result\", size = 1/j) #>         dat1$iter <- 1 #>         datzan <- D[-dat1$id2, ] #>         for (i in 2:j) { #>             datzan[, c(\"id2\")] <- list(NULL) #>             datzan <- rowid_to_column(datzan, var = \"id2\") #>             if (i != j) { #>                 dat2 <- datzan %>% stratified(., group = \"result\",  #>                   size = 1/(j - i + 1)) #>             } #>             else { #>                 dat2 <- datzan #>             } #>             dat2$iter <- i #>             datzan <- datzan[-dat2$id2, ] #>             dat1 <- rbind(dat1, dat2) #>         } #>         dat1[, c(\"id2\")] <- list(NULL) #>         dat1 <- rowid_to_column(dat1, var = \"id2\") #>         for (i in 1:j) { #>             val <- dat1[dat1$iter == i, ] #>             train.data <- dat1[-val$id2, ] #>             train.data.mx <- sparse.model.matrix(result ~ .,  #>                 data.frame(result = train.data$result, con = train.data$con,  #>                   x = train.data$x, y = train.data$y, z = train.data$z,  #>                   b = train.data$b)) #>             train.data.dm <- xgb.DMatrix(train.data.mx, label = train.data$result) #>             xgb.result <- xgb.train(data = train.data.dm, label = train.data$result,  #>                 objective = \"binary:logistic\", booster = \"gbtree\",  #>                 nrounds = 100, verbose = 1) #>             test.data.mx <- sparse.model.matrix(result ~ ., data.frame(result = val$result,  #>                 con = val$con, x = val$x, y = val$y, z = val$z,  #>                 b = val$b)) #>             test.data.dm <- xgb.DMatrix(test.data.mx, label = val$result) #>             f <- data.frame(ID = val$ID, result = val$result,  #>                 predict = predict(object = xgb.result, newdata = test.data.dm),  #>                 change = val$change, iter1 = i, iter2 = i2) #>             df <- rbind(df, f) #>         } #>     } #>     final_data.mx <- sparse.model.matrix(dammy ~ ., data.frame(dammy = final_data$dammy,  #>         con = final_data$con, x = final_data$x, y = final_data$y,  #>         z = final_data$z, b = final_data$b)) #>     final_data.dm <- xgb.DMatrix(final_data.mx, label = final_data$dammy) #>     D.mx <- sparse.model.matrix(result ~ ., data.frame(result = D$result,  #>         con = D$con, x = D$x, y = D$y, z = D$z, b = D$b)) #>     D.dm <- xgb.DMatrix(D.mx, label = D$result) #>     for (i in 1:30) { #>         xgb.result <- xgb.train(data = D.dm, label = D$result,  #>             objective = \"binary:logistic\", booster = \"gbtree\",  #>             nrounds = 100, verbose = 1) #>         f <- data.frame(ID = final_data$ID, predict = predict(object = xgb.result,  #>             newdata = final_data.dm), n = i) #>         fpredict <- rbind(fpredict, f) #>     } #>     options(warn = oldw) #>     fpredictb <- fpredict %>% group_by(ID) %>% summarise(xgboost_predict = mean(predict)) #>     final_data <- merge(fpredictb, final_data) #>     fwrite(final_data, MOVA_final_predict_file) #>     df$iter3 <- df$iter1 + (df$iter2 * 5) #>     out <- cvAUC(df$predict, df$result, label.ordering = NULL,  #>         folds = df$iter3) #>     plot(out$perf, col = \"blue\", avg = \"vertical\", add = TRUE) #>     cvauc <- out$cvAUC #>     YI2 <- data.frame(matrix(rep(NA, 5), nrow = 1))[numeric(0),  #>         ] #>     colnames(YI2) <- c(\"Cutoff\", \"positive_variant_num\", \"negative_variant_num\",  #>         \"AUC\", \"cvauc\") #>     for (i in 6:30) { #>         pred <- prediction(df[df$iter3 == i, ]$predict, df[df$iter3 ==  #>             i, ]$result) #>         auc.tmp <- performance(pred, \"auc\") #>         auc <- as.numeric(auc.tmp@y.values) #>         tab <- data.frame(Cutoff = unlist(pred@cutoffs), TP = unlist(pred@tp),  #>             FP = unlist(pred@fp), FN = unlist(pred@fn), TN = unlist(pred@tn),  #>             Sensitivity = unlist(pred@tp)/(unlist(pred@tp) +  #>                 unlist(pred@fn)), Specificity = unlist(pred@tn)/(unlist(pred@fp) +  #>                 unlist(pred@tn)), Accuracy = ((unlist(pred@tp) +  #>                 unlist(pred@tn))/nrow(df)), Precision = (unlist(pred@tp)/(unlist(pred@tp) +  #>                 unlist(pred@fp)))) #>         tab$Youden <- tab$Sensitivity + tab$Specificity - 1 #>         YI <- tab[order(tab$Youden, decreasing = T), ] #>         YI <- data.frame(Cutoff = YI$Cutoff[1], positive_variant_num = c(nrow(df[(df$result ==  #>             1) & (df$iter2 == 1), ])), negative_variant_num = c(nrow(df[(df$result ==  #>             0) & (df$iter2 == 1), ])), AUC = c(auc), cvauc = c(cvauc)) #>         YI2 <- rbind(YI2, YI) #>     } #>     fwrite(YI2, paste(protein_name, phenotype, \"result_xgboost.csv\",  #>         sep = \"_\")) #>     df2 <- df %>% group_by(ID) %>% summarise(xgboost_predict = mean(predict)) #>     D[, c(\"result\")] <- list(NULL) #>     fwrite(merge(D, df2), MOVA_predict_file) #>     fwrite(df, paste(protein_name, phenotype, \"predict_orig_xgboost.csv\",  #>         sep = \"_\")) #>     return(YI2) #>   } #> <environment: 0x0000011a903dc1b8>"},{"path":"/reference/PolyPhen_MOVA.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to compare MOVA and PolyPhen-2.\r\n — PolyPhen_MOVA","title":"Function to compare MOVA and PolyPhen-2.\r\n — PolyPhen_MOVA","text":"function plots ROC curve PolyPhen-2 gene returns AUC.","code":""},{"path":"/reference/PolyPhen_MOVA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to compare MOVA and PolyPhen-2.\r\n — PolyPhen_MOVA","text":"","code":"PolyPhen_MOVA(file_name, phenotype = \"Target\", col = \"orange\")"},{"path":"/reference/PolyPhen_MOVA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to compare MOVA and PolyPhen-2.\r\n — PolyPhen_MOVA","text":"file_name \"gene name_Target Pathogenic_predict.csv\" file output MOVA function phenotype Specify \"Target\" want positive variant Target variant , \"Pathogenic\" want include Pathogenic variant well. default \"Target\". col Specifies color ROC curve. Default orange.","code":""},{"path":[]},{"path":"/reference/PolyPhen_MOVA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to compare MOVA and PolyPhen-2.\r\n — PolyPhen_MOVA","text":"Return AUC gene PolyPhen-2.","code":""},{"path":[]},{"path":"/reference/PolyPhen_MOVA.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function to compare MOVA and PolyPhen-2.\r\n — PolyPhen_MOVA","text":"Yuya Hatano","code":""},{"path":[]},{"path":[]},{"path":"/reference/PolyPhen_MOVA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to compare MOVA and PolyPhen-2.\r\n — PolyPhen_MOVA","text":"","code":"Hgmd_divide(\"./source/TARDBP.csv\") #> Error in fread(hgmd_file_name): File './source/TARDBP.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_gnomAD_file(\"./source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv\", \"./source/TARDBP_gnomAD.csv\") #> Error in fread(input_file_name): File './source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_variant_data(\"../CADD_REVEL/AlphScore_final.tsv\", \"./source/TARDBP.csv\", \"./source/TARDBP_gnomAD.csv\", \"Q13148\", \"TARDBP\", \"./source/TARDBPvariantdata.csv\") #> Error in fread(AlphScore_final_file): File '../CADD_REVEL/AlphScore_final.tsv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_polyphen_data(\"../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1\",\"./source/TARDBPvariantdata.csv\", \"TARDBP_alph.csv\",  \"Q13148\",  11012654, 11025492 ,\"./source/TARDBPvariantdatapol.csv\", \"./source/TARDBP_alphpol.csv\") #> Error in fread(dbNSFP4.3a_final_file): File '../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_final_variant_file(\"./source/TARDBP_alphpol.csv\",\"./source/TARDBP_alphpol2.csv\") #> Error in fread(input_file_name): File './source/TARDBP_alphpol.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA(\"./source/Q13148.fa\", \"TARDBP\", \"./source/AF-Q13148-F1-model_v2.pdb\",\"./source/TARDBP_alphpol2.csv\", \"./source/TARDBPvariantdatapol.csv\") #> Warning: data set 'BLOSUM62' not found #> Warning: cannot open file './source/Q13148.fa': No such file or directory #> Error in file(con, \"r\"): cannot open the connection PolyPhen_MOVA(\"TARDBP_Target_predict.csv\") #> Error in fread(file_name): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' AlphScore_MOVA(\"TARDBP_Target_predict.csv\") #> Error in fread(file_name): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' CADD_MOVA(\"TARDBP_Target_predict.csv\") #> Error in fread(file_name): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' REVEL_MOVA(\"TARDBP_Target_predict.csv\") #> Error in fread(file_name): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' EVE_MOVA(\"TARDBP_Target_predict.csv\", \"../dementia/EVE_all_data/variant_files/TADBP_HUMAN.csv\") #> Error in fread(file_name): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' ##---- Should be DIRECTLY executable !! ---- ##-- ==>  Define data, use random, ##--  or do  help(data=index)  for the standard data sets.  ## The function is currently defined as function (file_name, phenotype = \"Target\", col = \"orange\")  {     df <- fread(file_name)     if (phenotype == \"Target\") {         df <- df[(df$Type == \"Target\") | (df$Type == \"Ctrl\"),              ]     }     df$predict <- df$pph_prob     if (phenotype == \"Target\") {         df$result <- df$Type2     }     else {         df$result <- df$Type3     }     pred <- prediction(df$predict, df$result)     perf <- performance(pred, \"tpr\", \"fpr\")     plot(perf, col = col, add = TRUE)     auc.tmp <- performance(pred, \"auc\")     auc <- as.numeric(auc.tmp@y.values)     return(auc)   } #> function (file_name, phenotype = \"Target\", col = \"orange\")  #> { #>     df <- fread(file_name) #>     if (phenotype == \"Target\") { #>         df <- df[(df$Type == \"Target\") | (df$Type == \"Ctrl\"),  #>             ] #>     } #>     df$predict <- df$pph_prob #>     if (phenotype == \"Target\") { #>         df$result <- df$Type2 #>     } #>     else { #>         df$result <- df$Type3 #>     } #>     pred <- prediction(df$predict, df$result) #>     perf <- performance(pred, \"tpr\", \"fpr\") #>     plot(perf, col = col, add = TRUE) #>     auc.tmp <- performance(pred, \"auc\") #>     auc <- as.numeric(auc.tmp@y.values) #>     return(auc) #>   } #> <environment: 0x0000011a8f2dda78>"},{"path":"/reference/REVEL_AlphScore.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to compare MOVA and REVEL + AlphScore.\r\n — REVEL_AlphScore","title":"Function to compare MOVA and REVEL + AlphScore.\r\n — REVEL_AlphScore","text":"function plots ROC curve REVEL + AlphScore gene returns AUC.","code":""},{"path":"/reference/REVEL_AlphScore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to compare MOVA and REVEL + AlphScore.\r\n — REVEL_AlphScore","text":"","code":"REVEL_AlphScore(file_name, phenotype = \"Target\", col = \"gray\")"},{"path":"/reference/REVEL_AlphScore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to compare MOVA and REVEL + AlphScore.\r\n — REVEL_AlphScore","text":"file_name \"gene name_Target Pathogenic_predict.csv\" file output MOVA function. phenotype Specify \"Target\" want positive variant Target variant , \"Pathogenic\" want include Pathogenic variant well. default \"Target\". col Specifies color ROC curve. Default gray.","code":""},{"path":[]},{"path":"/reference/REVEL_AlphScore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to compare MOVA and REVEL + AlphScore.\r\n — REVEL_AlphScore","text":"Return AUC gene REVEL + AlphScore.","code":""},{"path":[]},{"path":"/reference/REVEL_AlphScore.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function to compare MOVA and REVEL + AlphScore.\r\n — REVEL_AlphScore","text":"Yuya Hatano","code":""},{"path":[]},{"path":[]},{"path":"/reference/REVEL_AlphScore.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to compare MOVA and REVEL + AlphScore.\r\n — REVEL_AlphScore","text":"","code":"##---- Should be DIRECTLY executable !! ---- ##-- ==>  Define data, use random, ##--  or do  help(data=index)  for the standard data sets.  ## The function is currently defined as function (file_name, phenotype = \"Target\", col = \"gray\")  {     df <- fread(file_name)     if (phenotype == \"Target\") {         df <- df[(df$Type == \"Target\") | (df$Type == \"Ctrl\"),              ]     }     df$predict <- df$glm_AlphRevel     df <- df[df$predict != \".\", ]     df$predict <- as.numeric(df$predict)     if (phenotype == \"Target\") {         df$result <- df$Type2     }     else {         df$result <- df$Type3     }     pred <- prediction(df$predict, df$result)     perf <- performance(pred, \"tpr\", \"fpr\")     plot(perf, col = col, add = TRUE)     auc.tmp <- performance(pred, \"auc\")     auc <- as.numeric(auc.tmp@y.values)     return(auc)   } #> function (file_name, phenotype = \"Target\", col = \"gray\")  #> { #>     df <- fread(file_name) #>     if (phenotype == \"Target\") { #>         df <- df[(df$Type == \"Target\") | (df$Type == \"Ctrl\"),  #>             ] #>     } #>     df$predict <- df$glm_AlphRevel #>     df <- df[df$predict != \".\", ] #>     df$predict <- as.numeric(df$predict) #>     if (phenotype == \"Target\") { #>         df$result <- df$Type2 #>     } #>     else { #>         df$result <- df$Type3 #>     } #>     pred <- prediction(df$predict, df$result) #>     perf <- performance(pred, \"tpr\", \"fpr\") #>     plot(perf, col = col, add = TRUE) #>     auc.tmp <- performance(pred, \"auc\") #>     auc <- as.numeric(auc.tmp@y.values) #>     return(auc) #>   } #> <environment: 0x0000011a884b4410>"},{"path":"/reference/REVEL_MOVA.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to compare MOVA and REVEL.\r\n — REVEL_MOVA","title":"Function to compare MOVA and REVEL.\r\n — REVEL_MOVA","text":"function plots ROC curve REVEL gene returns AUC.","code":""},{"path":"/reference/REVEL_MOVA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to compare MOVA and REVEL.\r\n — REVEL_MOVA","text":"","code":"REVEL_MOVA(file_name, phenotype = \"Target\", col = \"black\")"},{"path":"/reference/REVEL_MOVA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to compare MOVA and REVEL.\r\n — REVEL_MOVA","text":"file_name \"gene name_Target Pathogenic_predict.csv\" file output MOVA function phenotype Specify \"Target\" want positive variant Target variant , \"Pathogenic\" want include Pathogenic variant well. default \"Target\". col Specifies color ROC curve. Default black.","code":""},{"path":[]},{"path":"/reference/REVEL_MOVA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to compare MOVA and REVEL.\r\n — REVEL_MOVA","text":"Return AUC gene REVEL.","code":""},{"path":[]},{"path":"/reference/REVEL_MOVA.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function to compare MOVA and REVEL.\r\n — REVEL_MOVA","text":"Yuya Hatano","code":""},{"path":[]},{"path":[]},{"path":"/reference/REVEL_MOVA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to compare MOVA and REVEL.\r\n — REVEL_MOVA","text":"","code":"Hgmd_divide(\"./source/TARDBP.csv\") #> Error in fread(hgmd_file_name): File './source/TARDBP.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_gnomAD_file(\"./source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv\", \"./source/TARDBP_gnomAD.csv\") #> Error in fread(input_file_name): File './source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_variant_data(\"../CADD_REVEL/AlphScore_final.tsv\", \"./source/TARDBP.csv\", \"./source/TARDBP_gnomAD.csv\", \"Q13148\", \"TARDBP\", \"./source/TARDBPvariantdata.csv\") #> Error in fread(AlphScore_final_file): File '../CADD_REVEL/AlphScore_final.tsv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_polyphen_data(\"../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1\",\"./source/TARDBPvariantdata.csv\", \"TARDBP_alph.csv\",  \"Q13148\",  11012654, 11025492 ,\"./source/TARDBPvariantdatapol.csv\", \"./source/TARDBP_alphpol.csv\") #> Error in fread(dbNSFP4.3a_final_file): File '../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_final_variant_file(\"./source/TARDBP_alphpol.csv\",\"./source/TARDBP_alphpol2.csv\") #> Error in fread(input_file_name): File './source/TARDBP_alphpol.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA(\"./source/Q13148.fa\", \"TARDBP\", \"./source/AF-Q13148-F1-model_v2.pdb\",\"./source/TARDBP_alphpol2.csv\", \"./source/TARDBPvariantdatapol.csv\") #> Warning: data set 'BLOSUM62' not found #> Warning: cannot open file './source/Q13148.fa': No such file or directory #> Error in file(con, \"r\"): cannot open the connection PolyPhen_MOVA(\"TARDBP_Target_predict.csv\") #> Error in fread(file_name): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' AlphScore_MOVA(\"TARDBP_Target_predict.csv\") #> Error in fread(file_name): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' CADD_MOVA(\"TARDBP_Target_predict.csv\") #> Error in fread(file_name): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' REVEL_MOVA(\"TARDBP_Target_predict.csv\") #> Error in fread(file_name): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' EVE_MOVA(\"TARDBP_Target_predict.csv\", \"../dementia/EVE_all_data/variant_files/TADBP_HUMAN.csv\") #> Error in fread(file_name): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' ##---- Should be DIRECTLY executable !! ---- ##-- ==>  Define data, use random, ##--  or do  help(data=index)  for the standard data sets.  ## The function is currently defined as function (file_name, phenotype = \"Target\", col = \"black\")  {     df <- fread(file_name)     if (phenotype == \"Target\") {         df <- df[(df$Type == \"Target\") | (df$Type == \"Ctrl\"),              ]     }     df$predict <- df$REVEL_score     df <- df[df$predict != \".\", ]     df$predict <- as.numeric(df$predict)     if (phenotype == \"Target\") {         df$result <- df$Type2     }     else {         df$result <- df$Type3     }     pred <- prediction(df$predict, df$result)     perf <- performance(pred, \"tpr\", \"fpr\")     plot(perf, col = col, add = TRUE)     auc.tmp <- performance(pred, \"auc\")     auc <- as.numeric(auc.tmp@y.values)     return(auc)   } #> function (file_name, phenotype = \"Target\", col = \"black\")  #> { #>     df <- fread(file_name) #>     if (phenotype == \"Target\") { #>         df <- df[(df$Type == \"Target\") | (df$Type == \"Ctrl\"),  #>             ] #>     } #>     df$predict <- df$REVEL_score #>     df <- df[df$predict != \".\", ] #>     df$predict <- as.numeric(df$predict) #>     if (phenotype == \"Target\") { #>         df$result <- df$Type2 #>     } #>     else { #>         df$result <- df$Type3 #>     } #>     pred <- prediction(df$predict, df$result) #>     perf <- performance(pred, \"tpr\", \"fpr\") #>     plot(perf, col = col, add = TRUE) #>     auc.tmp <- performance(pred, \"auc\") #>     auc <- as.numeric(auc.tmp@y.values) #>     return(auc) #>   } #> <environment: 0x0000011a8430d4c8>"},{"path":"/reference/variant_predict_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"The predicted probability of pathogenicity was compared between MOVA and PolyPhen-2.\r\n — variant_predict_plot","title":"The predicted probability of pathogenicity was compared between MOVA and PolyPhen-2.\r\n — variant_predict_plot","text":"Create graph corresponding Figure 3 paper.","code":""},{"path":"/reference/variant_predict_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The predicted probability of pathogenicity was compared between MOVA and PolyPhen-2.\r\n — variant_predict_plot","text":"","code":"variant_predict_plot(file_name, legend_type = FALSE)"},{"path":"/reference/variant_predict_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The predicted probability of pathogenicity was compared between MOVA and PolyPhen-2.\r\n — variant_predict_plot","text":"file_name \"gene name_Target Pathogenic_predict.csv\" file output MOVA function legend_type Specify \"TRUE\" want legend, \"FALSE\" want legend. default \"FALSE\".","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"/reference/variant_predict_plot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The predicted probability of pathogenicity was compared between MOVA and PolyPhen-2.\r\n — variant_predict_plot","text":"Yuya Hatano","code":""},{"path":[]},{"path":[]},{"path":"/reference/variant_predict_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The predicted probability of pathogenicity was compared between MOVA and PolyPhen-2.\r\n — variant_predict_plot","text":"","code":"Hgmd_divide(\"./source/TARDBP.csv\") #> Error in fread(hgmd_file_name): File './source/TARDBP.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_gnomAD_file(\"./source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv\", \"./source/TARDBP_gnomAD.csv\") #> Error in fread(input_file_name): File './source/gnomAD_v3.1.2_ENST00000240185_2023_02_14_13_23_48.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_variant_data(\"../CADD_REVEL/AlphScore_final.tsv\", \"./source/TARDBP.csv\", \"./source/TARDBP_gnomAD.csv\", \"Q13148\", \"TARDBP\", \"./source/TARDBPvariantdata.csv\") #> Error in fread(AlphScore_final_file): File '../CADD_REVEL/AlphScore_final.tsv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_polyphen_data(\"../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1\",\"./source/TARDBPvariantdata.csv\", \"TARDBP_alph.csv\",  \"Q13148\",  11012654, 11025492 ,\"./source/TARDBPvariantdatapol.csv\", \"./source/TARDBP_alphpol.csv\") #> Error in fread(dbNSFP4.3a_final_file): File '../dbNSFP/dbNSFP4.3a/dbNSFP4.3a_variant.chr1' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' Edit_final_variant_file(\"./source/TARDBP_alphpol.csv\",\"./source/TARDBP_alphpol2.csv\") #> Error in fread(input_file_name): File './source/TARDBP_alphpol.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' MOVA(\"./source/Q13148.fa\", \"TARDBP\", \"./source/AF-Q13148-F1-model_v2.pdb\",\"./source/TARDBP_alphpol2.csv\", \"./source/TARDBPvariantdatapol.csv\") #> Warning: data set 'BLOSUM62' not found #> Warning: cannot open file './source/Q13148.fa': No such file or directory #> Error in file(con, \"r\"): cannot open the connection variant_predict_plot(\"TARDBP_Target_predict.csv\") #> Error in fread(file_name): File 'TARDBP_Target_predict.csv' does not exist or is non-readable. getwd()=='D:/ALS/R/new_variant_prediction/revise_package/MOVA/docs/reference' ##---- Should be DIRECTLY executable !! ---- ##-- ==>  Define data, use random, ##--  or do  help(data=index)  for the standard data sets.  ## The function is currently defined as function (file_name, legend_type = FALSE)  {     df <- fread(file_name)     df$Typevariant <- \"negative\"     df[df$Type == \"Target\", `:=`(Typevariant, \"positive\")]     f <- data.table(variant = df$Typevariant, predict = df$MOVA_predict,          position = df$Pos, type = \"MOVA\")     f2 <- data.table(variant = df$Typevariant, predict = df$pph_prob,          position = df$Pos, type = \"Polyphen-2\")     df2 <- rbind(f, f2)     df2 <- transform(df2, variant = factor(variant, levels = c(\"positive\",          \"negative\")))     g <- ggplot(data = df2)     g <- g + theme(axis.text = element_text(size = 12))     g <- g + theme(legend.text = element_text(size = 12))     g <- g + geom_point(aes(x = position, y = predict, colour = variant))     g <- g + facet_grid(rows = vars(type), scales = \"free_y\")     if (legend_type == TRUE) {         g <- g + theme(legend.position = \"bottom\")     }     else {         g <- g + theme(legend.position = \"none\")     }     g   } #> function (file_name, legend_type = FALSE)  #> { #>     df <- fread(file_name) #>     df$Typevariant <- \"negative\" #>     df[df$Type == \"Target\", `:=`(Typevariant, \"positive\")] #>     f <- data.table(variant = df$Typevariant, predict = df$MOVA_predict,  #>         position = df$Pos, type = \"MOVA\") #>     f2 <- data.table(variant = df$Typevariant, predict = df$pph_prob,  #>         position = df$Pos, type = \"Polyphen-2\") #>     df2 <- rbind(f, f2) #>     df2 <- transform(df2, variant = factor(variant, levels = c(\"positive\",  #>         \"negative\"))) #>     g <- ggplot(data = df2) #>     g <- g + theme(axis.text = element_text(size = 12)) #>     g <- g + theme(legend.text = element_text(size = 12)) #>     g <- g + geom_point(aes(x = position, y = predict, colour = variant)) #>     g <- g + facet_grid(rows = vars(type), scales = \"free_y\") #>     if (legend_type == TRUE) { #>         g <- g + theme(legend.position = \"bottom\") #>     } #>     else { #>         g <- g + theme(legend.position = \"none\") #>     } #>     g #>   } #> <environment: 0x0000011a89bd1ac8>"}]
